{
    "openapi": "3.0.3",
    "info": {
        "title": "User Service",
        "description": "Solomon AI User Service API",
        "version": "0.1",
        "contact": {
            "name": "YoanYomba",
            "url": "https://solomon-ai.io",
            "email": "yoanyomba@solomon-ai.co"
        },
        "license": {
            "name": "Apache-2.0",
            "url": "https://github.com/openfga/openfga/blob/main/LICENSE"
        }
    },
    "servers": [
        {
            "url": "http://user-service.platform.svc.cluster.local:9896"
        }
    ],
    "tags": [
        {
            "name": "UserService"
        },
        {
            "name": "SocialService"
        },
        {
            "name": "FinancialService"
        },
        {
            "name": "AccountingService"
        },
        {
            "name": "WorkspaceService"
        }
    ],
    "paths": {
        "/user-microservice/api/v1/user-service/user": {
            "put": {
                "summary": "update a user account",
                "description": "This endpoint performs an updates operation on a user account based on the provided parametersThis update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)All update operations are atomic by nature hence we should not expect any form of divergent state",
                "operationId": "UpdateUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v1/user-service/user/email/{email}": {
            "get": {
                "summary": "Gets a user account by email",
                "description": "Queries and obtains a user account based on the email",
                "operationId": "GetUserByEmail",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserByEmailResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "email",
                        "description": "The email of the user of interest",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v1/user-service/user/email/{email}/exists": {
            "get": {
                "summary": "Checks that an email exists or not",
                "description": "Checks if an email exists or not",
                "operationId": "CheckEmailExists",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckEmailExistsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "email",
                        "description": "The email of the user of interest",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v1/user-service/user/health": {
            "get": {
                "summary": "health check",
                "description": "This endpoint performs a healc check on the service",
                "operationId": "HealthCheck",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v1/user-service/user/query-account-by-email-or-username": {
            "get": {
                "summary": "gets a user account by either email or username",
                "description": "This endpoint returns a user account by either provided email or username",
                "operationId": "GetUserByEmailOrUsername",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserByEmailOrUsernameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "email",
                        "description": "The email of the user of interest",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The username of the user of interest",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v1/user-service/user/query-id": {
            "get": {
                "summary": "get a user account id",
                "description": "This endpoint returns the user record id if the user record exists\nexample: /api/v1/user-service?email=testuser@gmail.com&&username=testuser",
                "operationId": "GetUserId",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "email",
                        "description": "The email of the user of interest",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The username of the user of interest",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v1/user-service/user/ready": {
            "get": {
                "summary": "readyness check",
                "description": "This endpoint performs a readiness check on the service",
                "operationId": "ReadynessCheck",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadynessCheckResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v1/user-service/user/username/{username}": {
            "get": {
                "summary": "Gets a user account by user name",
                "description": "Queries and obtains a user account based on the username",
                "operationId": "GetUserByUsername",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserByUsernameResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "username",
                        "description": "The username of the user of interest",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v1/user-service/user/username/{username}/exists": {
            "get": {
                "summary": "Checks that a username exists or not",
                "description": "Checks if a username exists or not",
                "operationId": "CheckUsernameExists",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckUsernameExistsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "username",
                        "description": "The username of the user of interest",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v1/user-service/user/verification/{userId}": {
            "post": {
                "summary": "user verification",
                "description": "This endpoint performs verification of a user account email",
                "operationId": "Verification",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerifyUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The account ID associated with the user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v1/user-service/user/webhook/password-reset": {
            "post": {
                "summary": "password reset",
                "description": "This endpoint performs password reset for a given user account",
                "operationId": "PasswordReset",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PasswordResetWebhookResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v1/user-service/user/{userId}": {
            "get": {
                "summary": "Gets a user account",
                "description": "Queries and obtains a user account based on the provided parameters",
                "operationId": "GetUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The account ID associated with the user\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "user-service-v1"
                ]
            },
            "delete": {
                "summary": "deletes a user account",
                "description": "This endpoint performs a delete operation on a user account based on the provided parametersThis deletion operation spans multiple services as user details are stored across a suite of our backend servicesThe operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the requestDivergent state is not expected to be encountered with this endpoint.",
                "operationId": "DeleteUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The account ID associated with the user to delete\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "user-service-v1"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user": {
            "post": {
                "summary": "create a user account",
                "description": "This endpoint performs an a creation operation of a user account based on the provided parametersThis operation is implemented as a distributed transactions as this operation spans multiple services",
                "operationId": "CreateUserV2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateUserV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserV2Request"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "user-service-v2"
                ]
            },
            "put": {
                "summary": "update a user account",
                "description": "This endpoint performs an updates operation on a user account based on the provided parametersThis update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)All update operations are atomic by nature hence we should not expect any form of divergent state",
                "operationId": "UpdateUserV2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUserV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserV2Request"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/account/query-by-email-or-username": {
            "get": {
                "summary": "Retrieve user account by email or username",
                "description": "Fetches a user account using the provided email or username.",
                "operationId": "GetUserByEmailOrUsernameV2",
                "responses": {
                    "200": {
                        "description": "Successful retrieval.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserByEmailOrUsernameV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "email",
                        "description": "The email of the user of interest",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The username of the user of interest",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/auth-zero/{auth0UserId}": {
            "get": {
                "summary": "Retrieve user account details by auth0 id and profile type",
                "description": "Fetches detailed information about a user account based on the specified authn ID.",
                "operationId": "GetUserByAuth0ID",
                "responses": {
                    "200": {
                        "description": "Successful retrieval of user account details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserByAuth0IDResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "auth0UserId",
                        "description": "The account ID associated with the user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "description": "Indicates the profile type to be queried.\nFor example: \"username:testuser\"",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/authn/{authnId}": {
            "get": {
                "summary": "Retrieve user account details by authn id",
                "description": "Fetches detailed information about a user account based on the specified authn ID.",
                "operationId": "GetUserByAuthnIDV2",
                "responses": {
                    "200": {
                        "description": "Successful retrieval of user account details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserByAuthnIDV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "authnId",
                        "description": "Specifies the user's authn account ID.\n\nValidations:\n- Must be greater than 0.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "description": "Indicates the profile type to be queried.\nFor example: \"username:testuser\"",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/business/settings/{userId}": {
            "get": {
                "summary": "Retrieve Business Account Settings",
                "description": "Fetches settings associated with a specified business account using the user ID.",
                "operationId": "RetrieveBusinessSettings",
                "responses": {
                    "200": {
                        "description": "A successful response containing the business settings.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBusinessSettingsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The account ID associated with the user (business)",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/canny/{userId}": {
            "get": {
                "summary": "Retrieves user sso token for canny",
                "description": "Fetches a user sso token for canny",
                "operationId": "GetCannyUserSSOToken",
                "responses": {
                    "200": {
                        "description": "Successful retrieval of user account sso token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCannyUserSSOTokenResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The account ID associated with the user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "description": "Indicates the profile type to be queried.\nFor example: \"username:testuser\"",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/email/{email}": {
            "get": {
                "summary": "Retrieve user details by email",
                "description": "Provides detailed information of a user based on the given email.",
                "operationId": "GetUserByEmailV2",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserByEmailV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "description": "the profile type of the given user we hope to query",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/email/{email}/exists": {
            "get": {
                "summary": "Checks that an email exists or not",
                "description": "Checks if an email exists or not",
                "operationId": "CheckEmailExistsV2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckEmailExistsV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "description": "the profile type of the given user we hope to query",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/query-id": {
            "get": {
                "summary": "get a user account id",
                "description": "This endpoint returns the user record id if the user record exists\nexample: /api/v1/user-service?email=testuser@gmail.com&&username=testuser",
                "operationId": "GetUserIdV2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserIdV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "email",
                        "description": "The email of the user of interest",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "username",
                        "description": "The username of the user of interest",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/role": {
            "post": {
                "summary": "Creates a new role",
                "description": "This endpoint adds a new role to the system. It requires role details such as name, type, and permissions.The creation process involves adding the role to the database and initializing its permissions.",
                "operationId": "CreateRole",
                "responses": {
                    "200": {
                        "description": "Role created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateRoleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "$ref": "#/components/requestBodies/Role"
                },
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/role/{id}": {
            "get": {
                "summary": "Retrieves a role",
                "description": "This endpoint fetches details of a specific role using the role ID.It retrieves the role's name, type, permissions, and audit history.",
                "operationId": "GetRole",
                "responses": {
                    "200": {
                        "description": "Role retrieval successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRoleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            },
            "delete": {
                "summary": "Deletes a role",
                "description": "This endpoint deletes a role from the system based on the provided role ID.The deletion process ensures that all related data and permissions are properly removed.",
                "operationId": "DeleteRole",
                "responses": {
                    "200": {
                        "description": "Role deleted successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteRoleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/roles": {
            "get": {
                "summary": "Lists all roles",
                "description": "This endpoint retrieves a list of all roles in the system. It supports pagination to handle large sets of data.Each role in the list includes details like name, type, and permissions.",
                "operationId": "ListRoles",
                "responses": {
                    "200": {
                        "description": "Roles list retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRolesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/team": {
            "post": {
                "summary": "Creates a new team",
                "description": "This endpoint adds a new team to the system. It requires team details such as name, description, and members.The creation process involves adding the team to the database and initializing its members.",
                "operationId": "CreateTeam",
                "responses": {
                    "200": {
                        "description": "Team created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateTeamResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTeamRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "user-service-v2"
                ]
            },
            "patch": {
                "summary": "Updates an existing team",
                "description": "This endpoint updates the details of an existing team. The team ID is used to identify the team to be updated.The update operation can modify the team's name, description, and members.",
                "operationId": "UpdateTeam",
                "responses": {
                    "200": {
                        "description": "Team updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateTeamResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Team"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/team/{teamId}": {
            "get": {
                "summary": "Retrieves a team",
                "description": "This endpoint fetches details of a specific team using the team ID.It retrieves the team's name, description, members, and audit history.",
                "operationId": "GetTeam",
                "responses": {
                    "200": {
                        "description": "Team retrieval successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTeamResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/team/{teamId}/add-new-user": {
            "post": {
                "summary": "Adds a user to a team",
                "description": "This endpoint adds a user to a team based on the provided team ID and user ID.The addition process ensures that the user is properly associated with the team.",
                "operationId": "AddUserToTeam",
                "responses": {
                    "200": {
                        "description": "User added to team successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddUserToTeamResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddUserToTeamBody"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/team/{teamId}/admin/{adminAuth0UserId}": {
            "delete": {
                "summary": "Deletes a team",
                "description": "This endpoint deletes a team from the system based on the provided team ID.The deletion process ensures that all related data and members are properly removed.",
                "operationId": "DeleteTeam",
                "responses": {
                    "200": {
                        "description": "Team deleted successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteTeamResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "adminAuth0UserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/team/{teamId}/remove-user": {
            "delete": {
                "summary": "Removes a user from a team",
                "description": "This endpoint removes a user from a team based on the provided team ID and user ID.The removal process ensures that the user is properly disassociated from the team.",
                "operationId": "RemoveUserFromTeam",
                "responses": {
                    "200": {
                        "description": "User removed from team successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RemoveUserFromTeamResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "adminAuth0UserId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userAuth0UserId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/username/{username}": {
            "get": {
                "summary": "Retrieve user details by username",
                "description": "Provides detailed information of a user based on the given username.",
                "operationId": "GetUserByUsernameV2",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserByUsernameV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "username",
                        "description": "The username of the user of interest",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "description": "the profile type of the given user we hope to query",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/username/{username}/exists": {
            "get": {
                "summary": "Checks that a username exists or not",
                "description": "Checks if a username exists or not",
                "operationId": "CheckUsernameExistsV2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckUsernameExistsV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "username",
                        "description": "The username of the user of interest",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "description": "the profile type of the given user we hope to query",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/verification/{userId}/profile-type/{profileType}": {
            "post": {
                "summary": "User Email Verification",
                "description": "Performs verification of a user account's email based on the provided user ID and profile type.",
                "operationId": "VerifyUserV2",
                "responses": {
                    "200": {
                        "description": "A successful response indicating the outcome of the verification.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VerifyUserV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The account ID associated with the user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ]
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/webhook/password-reset": {
            "post": {
                "summary": "Webhook for Password Reset",
                "description": "Handles password reset operations for a specified user account through a webhook.",
                "operationId": "PasswordResetWebhookV2",
                "responses": {
                    "200": {
                        "description": "A successful response indicating the outcome of the reset process.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PasswordResetWebhookV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user-service/user/{userId}": {
            "get": {
                "summary": "Retrieve user account details",
                "description": "Fetches detailed information about a user account based on the specified user ID.",
                "operationId": "GetUserV2",
                "responses": {
                    "200": {
                        "description": "Successful retrieval of user account details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "Specifies the user's account ID.\n\nValidations:\n- Must be greater than 0.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "description": "Indicates the profile type to be queried.\nFor example: \"username:testuser\"",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            },
            "delete": {
                "summary": "deletes a user account",
                "description": "This endpoint performs a delete operation on a user account based on the provided parametersThis deletion operation spans multiple services as user details are stored across a suite of our backend servicesThe operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the requestDivergent state is not expected to be encountered with this endpoint.",
                "operationId": "DeleteUserV2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteUserV2Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The account ID associated with the user to delete\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "description": "the profile type of the given user we hope to query",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PROFILE_TYPE_UNSPECIFIED",
                                "PROFILE_TYPE_USER",
                                "PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user/email/{email}/auth0/{auth0UserId}/exists": {
            "get": {
                "summary": "Checks that an email and auth0 user id exists or not",
                "description": "Checks if an email and auth0 user id exists or not",
                "operationId": "CheckEmailAndAuth0UserIdExists",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckEmailAndAuth0UserIdExistsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "email",
                        "description": "The email of the user of interest",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "auth0UserId",
                        "description": "The auth0 user id of the user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/user-microservice/api/v2/user/role": {
            "patch": {
                "summary": "Updates an existing role",
                "description": "This endpoint updates the details of an existing role. The role ID is used to identify the role to be updated.The update operation can modify the role's name, type, and permissions.",
                "operationId": "UpdateRole",
                "responses": {
                    "200": {
                        "description": "Role updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRoleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "$ref": "#/components/requestBodies/Role"
                },
                "tags": [
                    "user-service-v2"
                ]
            }
        },
        "/social-microservice/api/v1/community-profiles/page-size/{pageSize}/page-number/{pageNumber}": {
            "get": {
                "summary": "Get Community Profiles",
                "description": "This endpoint enables a client to get community profiles",
                "operationId": "GetCommunityProfiles",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCommunityProfilesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/community-profiles/{communityProfileId}/posts/blog": {
            "get": {
                "summary": "Get community blog posts",
                "description": "This endpoint enables a client to get community blog posts",
                "operationId": "GetCommunityBlogPosts",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCommunityBlogPostsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "communityProfileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/community-profiles/{communityProfileId}/timeline": {
            "get": {
                "summary": "Gets A Community Feed",
                "description": "This endpoint enables a client query a community feed",
                "operationId": "GetCommunityFeed",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCommunityFeedResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "communityProfileId",
                        "description": "The ID of the community we are trying to obtain the feed for | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "feedType",
                        "description": "The type of feed aiming to be obtained | type: string\n\n - FEED_TYPE_PERSONAL: UserFeed is a profile's personal feed\n - FEED_TYPE_NEWS: NewsFeed is a profile's timeline\n - FEED_TYPE_NOTIFICATION: NotificationFeed encompasses a profile's notification feed",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FEED_TYPE_UNSPECIFIED",
                                "FEED_TYPE_PERSONAL",
                                "FEED_TYPE_NEWS",
                                "FEED_TYPE_NOTIFICATION"
                            ],
                            "default": "FEED_TYPE_UNSPECIFIED"
                        }
                    },
                    {
                        "name": "accountType",
                        "description": "The type of account making the request to obtain the feed | type: string",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT_TYPE_UNSPECIFIED",
                                "ACCOUNT_TYPE_USER",
                                "ACCOUNT_TYPE_COMMUNITY"
                            ],
                            "default": "ACCOUNT_TYPE_UNSPECIFIED"
                        }
                    },
                    {
                        "name": "nextPageToken",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/community-profiles/{userId}": {
            "post": {
                "summary": "Create a community Profile",
                "description": "This endpoint enables a client to create a community profile",
                "operationId": "CreateCommunityProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateCommunityProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to create this community profile (NOTE: userID refers to\nthe ID from the vantage point of the user service. This ID is the single\nsource of truth for a given user across our suite of services) | type:\nuint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCommunityProfileBody"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/community/{communityProfileId}/topic/{topicName}/posts": {
            "get": {
                "summary": "Get all posts associated with a topic",
                "description": "This endpoint enables a client to get all posts tied to a topic",
                "operationId": "GetPostsByTopic",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPostsByTopicResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "communityProfileId",
                        "description": "the community profile to associate the topic to | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "topicName",
                        "description": "the name of a given topic | type: string",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/follow-requests/{followRecordId}/accept": {
            "post": {
                "summary": "Accepts a user's follow request",
                "description": "This endpoint enables a client to accept a follow request from a source a user profile",
                "operationId": "AcceptFollowProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AcceptFollowProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "followRecordId",
                        "description": "The id of the follow record | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/health": {
            "get": {
                "summary": "health check",
                "description": "This endpoint performs a healc check on the service",
                "operationId": "HealthCheck1",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckResponse1"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/post/{postId}/comment/{commentId}": {
            "delete": {
                "summary": "Delete A Comment",
                "description": "This endpoint enables a client to delete a comment",
                "operationId": "DeleteComment",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateCommentResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "postId",
                        "description": "The ID of the post trying to be deleted | type: string",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "description": "The ID of the comment trying to be delete | type: string",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "description": "The type of post being reacted to | type: string",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/post/{postId}/type/{postType}": {
            "put": {
                "summary": "Edits a post by id",
                "description": "This endpoint enables a client to edit a post by id",
                "operationId": "EditPost",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EditPostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "postId",
                        "description": "The ID of the post to be updated | type: string",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Post"
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/posts/blog/tag/{tag}": {
            "get": {
                "summary": "Get blog posts by tag",
                "description": "This endpoint enables a client to query a set of blog posts tied to a tag",
                "operationId": "GetBlogPostsByTag",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBlogPostsByTagResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "description": "The type of post being reacted to | type: string",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/ready": {
            "get": {
                "summary": "readyness check",
                "description": "This endpoint performs a readiness check on the service",
                "operationId": "ReadynessCheck1",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadynessCheckResponse1"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/social/community-profiles/{communityId}/requestor/{requestorProfileId}/profile-type/{requestorProfileType}": {
            "get": {
                "summary": "Get a community Profile",
                "description": "This endpoint enables a client to get a community profile",
                "operationId": "GetCommunityProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCommunityProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "communityId",
                        "description": "The communityID associated with the community being requested  | type:\nuint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "requestorProfileId",
                        "description": "The RequestorProfileID is an optional parameter used to check if the\nprofileID (requestor) making a request for the record actually follows the\nrecord",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "requestorProfileType",
                        "description": "The RequestorProfileType is an optional parameter which tells us what type\nof profile is the requestor",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT_TYPE_UNSPECIFIED",
                                "ACCOUNT_TYPE_USER",
                                "ACCOUNT_TYPE_COMMUNITY"
                            ]
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/user/{userId}/canny/email/{email}": {
            "get": {
                "summary": "Retrieves user sso token for canny",
                "description": "Fetches a user sso token for canny",
                "operationId": "GetCannyUserSSOToken1",
                "responses": {
                    "200": {
                        "description": "Successful retrieval of user account sso token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCannyUserSSOTokenResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/user/{userId}/category/{category}/posts/{postType}/limit/{limit}/offset/{offset}": {
            "get": {
                "summary": "Get all posts associated with a category",
                "description": "This endpoint enables a client to get all posts tied to a category",
                "operationId": "GetPostsByCategory",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPostsByCategoryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "category",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CATEGORY_UNSPECIFIED",
                                "CATEGORY_WORLD",
                                "CATEGORY_BUSINESS",
                                "CATEGORY_ECONOMICS",
                                "CATEGORY_FOREIGN_POLICY",
                                "CATEGORY_POLITICS",
                                "CATEGORY_TECHNOLOGY",
                                "CATEGORY_OTHER"
                            ]
                        }
                    },
                    {
                        "name": "postType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ]
                        }
                    },
                    {
                        "name": "limit",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users": {
            "post": {
                "summary": "creates a user profile",
                "description": "This endpoint enables a client to create a user profile",
                "operationId": "CreateUserProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateUserProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserProfileRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/admin/{adminUserId}/publication/{publicationId}": {
            "delete": {
                "summary": "Deletes a publication",
                "description": "This endpoint enables a client to delete a publication",
                "operationId": "DeletePublication",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeletePublicationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "adminUserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "publicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/admin/{adminUserId}/publication/{publicationId}/editor/{editorUserId}": {
            "delete": {
                "summary": "Deletes an editor to a publication",
                "description": "This endpoint enables a client to add an editor to a publication",
                "operationId": "DeletePublicationEditor",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeletePublicationEditorResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "adminUserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "publicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "editorUserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            },
            "put": {
                "summary": "Adds an editor to a publication",
                "description": "This endpoint enables a client to add an editor to a publication",
                "operationId": "AddPublicationEditor",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddPublicationEditorResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "adminUserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "publicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "editorUserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/bookmarks/{userId}": {
            "get": {
                "summary": "Get Bookmarked Posts",
                "description": "This endpoint enables a client to get all bookmarked posts of a given user",
                "operationId": "GetBookmarkedPosts",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBookmarkedPostsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/editor/{editorUserId}/publication/{publicationId}": {
            "post": {
                "summary": "Add a post to a publication",
                "description": "This endpoint enables a client to add a post to a publication",
                "operationId": "AddPostToPublication",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddPostToPublicationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "editorUserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "publicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Post2"
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/editor/{editorUserId}/publication/{publicationId}/post/{postId}": {
            "delete": {
                "summary": "Deletes a post from a publication",
                "description": "This endpoint enables a client to delete a post from a publication",
                "operationId": "DeletePostFromPublication",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeletePostFromPublicationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "editorUserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "publicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/page-size/{pageSize}/page-number/{pageNumber}": {
            "get": {
                "summary": "Gets a set of user profiles",
                "description": "This endpoint enables a client to get a number of user profiles in a paginated manner",
                "operationId": "GetUserProfiles",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserProfilesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/source/{sourceUserId}/block/target/{targetUserId}": {
            "post": {
                "summary": "blocks a user profile",
                "description": "This endpoint enables a client to block a user profile",
                "operationId": "BlockUserProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockUserProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "sourceUserId",
                        "description": "the user ID trying to block another user (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetUserId",
                        "description": "the user ID being blocked by another user (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/source/{sourceUserId}/follow/community-profiles/{targetCommunityProfileId}": {
            "post": {
                "summary": "Follows A Community Profile",
                "description": "This endpoint enables a client to follow a community profile",
                "operationId": "FollowCommunityProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FollowCommunityProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "sourceUserId",
                        "description": "the user ID trying to follow another user (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetCommunityProfileId",
                        "description": "the targetCommunityProfileID ID being followed by another user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/source/{sourceUserId}/follow/target/{targetUserId}": {
            "post": {
                "summary": "follow a user profile",
                "description": "This endpoint enables a client to follow a user profile",
                "operationId": "FollowProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FollowProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "sourceUserId",
                        "description": "the user ID trying to follow another user (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetUserId",
                        "description": "the user ID being followed by another user (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}": {
            "get": {
                "summary": "gets a user profile",
                "description": "This endpoint performs a query against the social service to obtain a user profile",
                "operationId": "GetUserProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The user ID associated with the profile we want to get | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "requestorProfileId",
                        "description": "The RequestorProfileID is an optional parameter used to check if the\nprofileID (requestor) making a request for the record actually follows the\nrecord",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "requestorProfileType",
                        "description": "The RequestorProfileType is an optional parameter which tells us what type\nof profile is the requestor",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT_TYPE_UNSPECIFIED",
                                "ACCOUNT_TYPE_USER",
                                "ACCOUNT_TYPE_COMMUNITY"
                            ],
                            "default": "ACCOUNT_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            },
            "delete": {
                "summary": "deletes a user profile",
                "description": "This endpoint enables a client to delete a user profile",
                "operationId": "DeleteUserProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteUserProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to delete this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            },
            "put": {
                "summary": "update a user profile",
                "description": "This endpoint performs an updates operation on a user profile based on the provided parametersThis update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)All update operations are atomic by nature hence we should not expect any form of divergent state",
                "operationId": "EditUserProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EditUserProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to update this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserProfile"
                            }
                        }
                    },
                    "description": "the profile payload | type: json_object",
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/communities-followed": {
            "get": {
                "summary": "Gets all the communities a user follows",
                "description": "This endpoint enables a client to get all the communities a user follows",
                "operationId": "GetCommunitiesUserFollows",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCommunitiesUserFollowsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID who's communities follow set we want to obtain (NOTE: userID\nrefers to the ID from the vantage point of the user service. This ID is the\nsingle source of truth for a given user across our suite of services) |\ntype: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "description": "the max number of communities to return | type: uint64",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/community-profiles/{communityProfileId}": {
            "delete": {
                "summary": "Delete Community Profile",
                "description": "This endpoint enables a client to delete a community profile",
                "operationId": "DeleteCommunityProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteCommunityProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to delete this community profile (NOTE: userID refers to\nthe ID from the vantage point of the user service. This ID is the single\nsource of truth for a given user across our suite of services) | type:\nuint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "communityProfileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            },
            "put": {
                "summary": "Edit a community Profile",
                "description": "This endpoint enables a client to update a community profile",
                "operationId": "EditCommunityProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EditCommunityProfileRequest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to update this community profile (NOTE: userID refers to\nthe ID from the vantage point of the user service. This ID is the single\nsource of truth for a given user across our suite of services) | type:\nuint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "communityProfileId",
                        "description": "The community profile ID of the community being updated | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommunityProfile"
                            }
                        }
                    },
                    "description": "The community profile being updated | type: json_object",
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/community/{communityProfileId}/topic": {
            "post": {
                "summary": "Create A Topic",
                "description": "This endpoint enables a client to create a topic",
                "operationId": "CreateTopic",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateTopicResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to whom the community is tied to (NOTE: userID refers to\nthe ID from the vantage point of the user service. This ID is the single\nsource of truth for a given user across our suite of services) | type:\nuint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "communityProfileId",
                        "description": "the community profile to associate the topic to | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Topic"
                            }
                        }
                    },
                    "description": "topic payload | type: json_object",
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/discover/limit/{limit}": {
            "get": {
                "summary": "Discover Profiles",
                "description": "This endpoint enables a client to discover a set of profiles he/she does not follow",
                "operationId": "DiscoverProfiles",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DiscoverProfilesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/follow/pending-requests": {
            "get": {
                "summary": "Get Pending Follow Requests",
                "description": "This endpoint enables a client to get all the pending follow requests",
                "operationId": "GetPendingFollows",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPendingFollowsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID who's pending request we want to obtain (NOTE: userID refers to\nthe ID from the vantage point of the user service. This ID is the single\nsource of truth for a given user across our suite of services) | type:\nuint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/poll": {
            "post": {
                "summary": "Create a poll",
                "description": "This endpoint enables a client to create a poll",
                "operationId": "CreatePoll",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatePollResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to create a post (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PollPost"
                            }
                        }
                    },
                    "description": "The post payload | type: json_object",
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/poll/{pollId}": {
            "post": {
                "summary": "Adds a user response to a given poll by a user",
                "description": "This endpoint enables a client to response to a poll",
                "operationId": "RespondToPoll",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RespondToPollResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pollId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RespondToPollBody"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/poll/{postId}": {
            "get": {
                "summary": "Get a poll",
                "description": "This endpoint enables a client to query a poll by id",
                "operationId": "GetPoll",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPollResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to delete this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "description": "The ID of the post attempted to be delete | type: string",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            },
            "delete": {
                "summary": "Delete a poll",
                "description": "This endpoint enables a client to delete a poll",
                "operationId": "DeletePoll",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeletePollResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to delete this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "description": "The ID of the post attempted to be delete | type: string",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/polls": {
            "get": {
                "summary": "Get all the polls of a given user",
                "description": "This endpoint enables a client to query all polls tied to a given user id",
                "operationId": "GetPolls",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPollsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to delete this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post": {
            "post": {
                "summary": "Create a post",
                "description": "This endpoint enables a client to create a post",
                "operationId": "CreatePost",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatePostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to create a post (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "communityProfileId",
                        "description": "The ID of the community profile attempting to create the post  | type:\nuint64",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "accountType",
                        "description": "The type of profile making the request | type: string",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT_TYPE_UNSPECIFIED",
                                "ACCOUNT_TYPE_USER",
                                "ACCOUNT_TYPE_COMMUNITY"
                            ],
                            "default": "ACCOUNT_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Post"
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/bookmark/{postId}": {
            "post": {
                "summary": "Bookmarks a post",
                "description": "This endpoint enables a client to bookmark a post",
                "operationId": "BookmarkPost",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BookmarkPostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/share/{parentPostId}/type/{parentPostType}": {
            "post": {
                "summary": "Share a post",
                "description": "This endpoint enables a client to share a post",
                "operationId": "SharePost",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharePostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "parentPostId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "parentPostType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string",
                                "required": [
                                    "content"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/thread/{parentPostId}/type/{postType}": {
            "post": {
                "summary": "Adds A Post To A Thread",
                "description": "This endpoint enables a client to add a post to a thread",
                "operationId": "AddPostToThread",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddPostToThreadResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "parentPostId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Post2"
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/thread/{parentPostId}/type/{postType}/target/{participantPostId}": {
            "delete": {
                "summary": "Deletes A Post From A Thread",
                "description": "This endpoint enables a client to delete a post from a thread",
                "operationId": "RemovePostFromThread",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RemovePostFromThreadResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "parentPostId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ]
                        }
                    },
                    {
                        "name": "participantPostId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/thread/{postId}": {
            "get": {
                "summary": "Gets A Post's Thread",
                "description": "This endpoint enables a client to query a post's thread",
                "operationId": "GetPostThread",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPostThreadResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/account-type/{accountType}/reaction/{reaction}": {
            "post": {
                "summary": "Reacts to a post",
                "description": "This endpoint enables a client to react to a post",
                "operationId": "ReactToPost",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReactToPostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT_TYPE_UNSPECIFIED",
                                "ACCOUNT_TYPE_USER",
                                "ACCOUNT_TYPE_COMMUNITY"
                            ]
                        }
                    },
                    {
                        "name": "reaction",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "REACTION_UNSPECIFIED",
                                "REACTION_LIKE",
                                "REACTION_LOVE",
                                "REACTION_HAHA",
                                "REACTION_WOW",
                                "REACTION_SAD",
                                "REACTION_ANGRY",
                                "REACTION_DISLIKE"
                            ]
                        }
                    },
                    {
                        "name": "postType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/bookmark": {
            "delete": {
                "summary": "Deletes A Bookmarked Post",
                "description": "This endpoint enables a client to delete a bookmarked post",
                "operationId": "RemoveBookmarkedPost",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RemoveBookmarkedPostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/comment": {
            "post": {
                "summary": "Create A Commnet",
                "description": "This endpoint enables a client to create a comment",
                "operationId": "CreateComment",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateCommentResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to create a comment (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "description": "The ID of the post to whom to add the comment | type: string",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "communityProfileId",
                        "description": "The ID of the community trying to create a comment | type: uint64",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "accountType",
                        "description": "The type of account making the request to create a comment | type: string",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT_TYPE_UNSPECIFIED",
                                "ACCOUNT_TYPE_USER",
                                "ACCOUNT_TYPE_COMMUNITY"
                            ],
                            "default": "ACCOUNT_TYPE_UNSPECIFIED"
                        }
                    },
                    {
                        "name": "postType",
                        "description": "The type of post being reacted to | type: string",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Comment"
                            }
                        }
                    },
                    "description": "The actual comment payload | type: json_object",
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/account-type/{accountType}/reaction/{reaction}": {
            "post": {
                "summary": "Reacts to a comment",
                "description": "This endpoint enables a client to react to a comment",
                "operationId": "ReactToComment",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReactToCommentResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT_TYPE_UNSPECIFIED",
                                "ACCOUNT_TYPE_USER",
                                "ACCOUNT_TYPE_COMMUNITY"
                            ]
                        }
                    },
                    {
                        "name": "reaction",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "REACTION_UNSPECIFIED",
                                "REACTION_LIKE",
                                "REACTION_LOVE",
                                "REACTION_HAHA",
                                "REACTION_WOW",
                                "REACTION_SAD",
                                "REACTION_ANGRY",
                                "REACTION_DISLIKE"
                            ]
                        }
                    },
                    {
                        "name": "postType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/quality": {
            "post": {
                "summary": "Add Comment Quality Score",
                "description": "This endpoint enables a client to add a quality score to a comment",
                "operationId": "AddCommentQualityScore",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddCommentQualityScoreResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "description": "The type of post being reacted to | type: string",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/AddCommentQualityScoreQualityscore"
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/replies": {
            "get": {
                "summary": "Get Comment Replies",
                "description": "This endpoint enables a client to get comment replies",
                "operationId": "GetCommentReplies",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCommentRepliesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply": {
            "post": {
                "summary": "Reply To A Comment",
                "description": "This endpoint enables a client to reply to a comment",
                "operationId": "CreateCommentReply",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateCommentReplyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateCommentReplyBody"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}": {
            "delete": {
                "summary": "Delete A Comment Reply",
                "description": "This endpoint enables a client to delete a comment reply",
                "operationId": "DeleteCommentReply",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteCommentReplyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "replyId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            },
            "put": {
                "summary": "Edit A Comment Reply",
                "description": "This endpoint enables a client to edit a comment reply",
                "operationId": "EditCommentReply",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EditCommentReplyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "replyId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditCommentReplyBody"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}/account-type/{accountType}/reaction/{reaction}": {
            "post": {
                "summary": "Reacts to a comment reply",
                "description": "This endpoint enables a client to react to a comment reply",
                "operationId": "ReactToCommentReply",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReactToCommentReplyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "replyId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT_TYPE_UNSPECIFIED",
                                "ACCOUNT_TYPE_USER",
                                "ACCOUNT_TYPE_COMMUNITY"
                            ]
                        }
                    },
                    {
                        "name": "reaction",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "REACTION_UNSPECIFIED",
                                "REACTION_LIKE",
                                "REACTION_LOVE",
                                "REACTION_HAHA",
                                "REACTION_WOW",
                                "REACTION_SAD",
                                "REACTION_ANGRY",
                                "REACTION_DISLIKE"
                            ]
                        }
                    },
                    {
                        "name": "postType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}/report": {
            "post": {
                "summary": "Report A Comment Reply",
                "description": "This endpoint enables a client to report a comment reply",
                "operationId": "ReportCommentReply",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportCommentReplyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "replyId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReportCommentReplyBody"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/report": {
            "post": {
                "summary": "Report A Comment",
                "description": "This endpoint enables a client to report a comment",
                "operationId": "ReportComment",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportCommentResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReportCommentBody"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/note": {
            "post": {
                "summary": "Creates and associates a note to a given post",
                "description": "This endpoint enables a client to create and associate a not to a post",
                "operationId": "CreateNote",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateNoteResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateNoteBody"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/note/{noteId}": {
            "delete": {
                "summary": "Delete a note",
                "description": "This endpoint enables a client to delete a note",
                "operationId": "DeleteNote",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteNoteResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "noteId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            },
            "put": {
                "summary": "Update a note",
                "description": "This endpoint enables a client to update a note",
                "operationId": "EditNote",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EditNoteResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "noteId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Note"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/quality": {
            "post": {
                "summary": "Adds a quality score to a post",
                "description": "This endpoint enables a client add a quality score to a post",
                "operationId": "AddPostQualityScore",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddPostQualityScoreResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "description": "The type of post being reacted to | type: string",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ],
                            "default": "POST_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/AddCommentQualityScoreQualityscore"
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/type/{postType}": {
            "get": {
                "summary": "Get a post",
                "description": "This endpoint enables a client to get a post",
                "operationId": "GetPost",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to obtain a post (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "description": "The ID of the post to obtain | type: string",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ]
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            },
            "delete": {
                "summary": "Delete a post",
                "description": "This endpoint enables a client to delete a post",
                "operationId": "DeletePost",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeletePostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to delete a post (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "description": "The ID of the post attempted to be delete | type: string",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ]
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/post/{postId}/type/{postType}/report": {
            "post": {
                "summary": "Report a post",
                "description": "This endpoint enables a client to report a post",
                "operationId": "ReportPost",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReportPostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "POST_TYPE_UNSPECIFIED",
                                "POST_TYPE_POST",
                                "POST_TYPE_REPOST",
                                "POST_TYPE_QUESTION",
                                "POST_TYPE_ACHIEVEMENT",
                                "POST_TYPE_ANNOUNCEMENT",
                                "POST_TYPE_POLL",
                                "POST_TYPE_ARTICLE",
                                "POST_TYPE_SHORT_STORY"
                            ]
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/posts": {
            "get": {
                "summary": "Get all the posts of a given user",
                "description": "This endpoint enables a client to query all posts tied to a given user id",
                "operationId": "GetPosts",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPostsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to delete this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/profile/{profileId}/account-type/{accountType}/following": {
            "get": {
                "summary": "Get Communities and users you are following",
                "description": "This endpoint enables a client to get all the accounts a given user follows",
                "operationId": "GetAccountsFollowing",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAccountsFollowingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "accountType",
                        "description": "the account type of the user whoses followers are being requested",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT_TYPE_UNSPECIFIED",
                                "ACCOUNT_TYPE_USER",
                                "ACCOUNT_TYPE_COMMUNITY"
                            ]
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/profile/{profileId}/followers": {
            "get": {
                "summary": "Get Users Following you",
                "description": "This endpoint enables a client to get all the followers following a given user",
                "operationId": "GetFollowers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetFollowersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/publication": {
            "post": {
                "summary": "Creates a publication",
                "description": "This endpoint enables a client to creare a publication",
                "operationId": "CreatePublication",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatePublicationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Publication"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/publication/{publicationId}": {
            "get": {
                "summary": "Gets a publication",
                "description": "This endpoint enables a client to get a publication",
                "operationId": "GetPublication",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPublicationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "publicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/publication/{publicationId}/bookmark": {
            "delete": {
                "summary": "Deletes A Bookmarked Publication",
                "description": "This endpoint enables a client to delete a bookmarked publication",
                "operationId": "RemoveBookmarkedPublication",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RemoveBookmarkedPostResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "publicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            },
            "post": {
                "summary": "Bookmarks a publication",
                "description": "This endpoint enables a client to bookmark a publication",
                "operationId": "BookmarkPublication",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BookmarkPublicationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "publicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/timeline": {
            "get": {
                "summary": "Gets A Userfeed",
                "description": "This endpoint enables a client query a user feed",
                "operationId": "GetUserFeed",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserFeedResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID trying to obtain a given feed (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "feedType",
                        "description": "The type of feed aiming to be obtained | type: string\n\n - FEED_TYPE_PERSONAL: UserFeed is a profile's personal feed\n - FEED_TYPE_NEWS: NewsFeed is a profile's timeline\n - FEED_TYPE_NOTIFICATION: NotificationFeed encompasses a profile's notification feed",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FEED_TYPE_UNSPECIFIED",
                                "FEED_TYPE_PERSONAL",
                                "FEED_TYPE_NEWS",
                                "FEED_TYPE_NOTIFICATION"
                            ],
                            "default": "FEED_TYPE_UNSPECIFIED"
                        }
                    },
                    {
                        "name": "accountType",
                        "description": "The type of account making the request to obtain the feed | type: string",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACCOUNT_TYPE_UNSPECIFIED",
                                "ACCOUNT_TYPE_USER",
                                "ACCOUNT_TYPE_COMMUNITY"
                            ],
                            "default": "ACCOUNT_TYPE_UNSPECIFIED"
                        }
                    },
                    {
                        "name": "nextPageToken",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/social-microservice/api/v1/users/{userId}/topics": {
            "get": {
                "summary": "Get Topics Of Communities User Follows",
                "description": "This endpoint enables a client to get topics of communities a user follows",
                "operationId": "GetTopicsOfCommunitiesUserFollows",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTopicsOfCommunitiesUserFollowsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the user ID whose communities topics follow set we want to obtain (NOTE:\nuserID refers to the ID from the vantage point of the user service. This ID\nis the single source of truth for a given user across our suite of\nservices) | type: uint64",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "social-service"
                ]
            }
        },
        "/financial-microservice/api/v1/account/{userId}/investment/{investmentAccountId}": {
            "get": {
                "summary": "get investment account by id",
                "description": "This endpoint returns the investment account if the investment account exists",
                "operationId": "GetInvestmentAccount",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetInvestmentAcccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "investmentAccountId",
                        "description": "The investment account id\nValidations:\n- investment_account_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/account/{userId}/liability/{liabilityAccountId}": {
            "get": {
                "summary": "get liability account by id",
                "description": "This endpoint returns the liability account if the liability account exists",
                "operationId": "GetLiabilityAccount",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetLiabilityAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "liabilityAccountId",
                        "description": "The liability account id\nValidations:\n- liability_account_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/account/{userId}/mortgage/{mortgageAccountId}": {
            "get": {
                "summary": "get mortgage account by id",
                "description": "This endpoint returns the mortgage account if the mortgage account exists",
                "operationId": "GetMortageAccount",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMortgageAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mortgageAccountId",
                        "description": "The mortage account id\nValidations:\n- mortage_account_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/account/{userId}/student-loan/{studentLoanAccountId}": {
            "get": {
                "summary": "get student loan account by id",
                "description": "This endpoint returns the student loan account if the student loan account exists",
                "operationId": "GetStudentLoanAccount",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetStudentLoanAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "studentLoanAccountId",
                        "description": "The student loan account id\nValidations:\n- student_loan_account_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/balance-history/account/{plaidAccountId}/pagenumber/{pageNumber}/pagesize/{pageSize}": {
            "get": {
                "summary": "Returns the account balance history for an account",
                "description": "This API could accept account_id as input parameters and return the account balance history for that account.",
                "operationId": "GetAccountBalanceHistory",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAccountBalanceHistoryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "plaidAccountId",
                        "description": "Account ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/balance-history/user/{userId}/pagenumber/{pageNumber}/pagesize/{pageSize}": {
            "get": {
                "summary": "Returns the account balance history for a user",
                "description": "This API could accept user_id as input parameters and return the account balance history for that user.",
                "operationId": "GetUserAccountBalanceHistory",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserAccountBalanceHistoryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "User ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/category-monthly-expenditure/user/{userId}": {
            "get": {
                "summary": "Returns the monthly category expenditure for a user",
                "description": "This API could accept user_id as an input parameter and return the monthly category expenditure for that user.",
                "operationId": "GetUserCategoryMonthlyExpenditure",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserCategoryMonthlyExpenditureResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "User ID",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "personalFinanceCategoryPrimary",
                        "description": "Personal finance category",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "description": "Month in the format of YYYYMM",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/category-monthly-income/user/{userId}": {
            "get": {
                "summary": "Get monthly income by user for a specific category",
                "operationId": "GetUserCategoryMonthlyIncome",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserCategoryMonthlyIncomeResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "personalFinanceCategoryPrimary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/category-monthly-transaction-count/user/{userId}": {
            "get": {
                "summary": "Get monthly transaction count by user, month, and category",
                "operationId": "GetCategoryMonthlyTransactionCount",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCategoryMonthlyTransactionCountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "has to be present and defined",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "description": "optional",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "personalFinanceCategoryPrimary",
                        "description": "optional",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/debt-to-income-ratio/user/{userId}": {
            "get": {
                "summary": "Get Debt-to-Income ratio by user and month",
                "operationId": "GetDebtToIncomeRatio",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDebtToIncomeRatioResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "description": "optional",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/expenses/user/{userId}": {
            "get": {
                "summary": "Get Expense Metrics by user, month and category",
                "operationId": "GetExpenseMetrics",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetExpenseMetricsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "description": "optonal",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "personalFinanceCategoryPrimary",
                        "description": "optional",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/finance-profile/user/{userId}": {
            "get": {
                "summary": "Get Financial Profile by user and month",
                "operationId": "GetFinancialProfile",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetFinancialProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "description": "optional",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/income-expense-ratio/user/{userId}": {
            "get": {
                "summary": "Get Income Expense Ratio by user and month",
                "operationId": "GetIncomeExpenseRatio",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetIncomeExpenseRatioResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "description": "optional",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/income/user/{userId}": {
            "get": {
                "summary": "Get Income Metrics by user, month and category",
                "operationId": "GetIncomeMetrics",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetIncomeMetricsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "description": "optional",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "personalFinanceCategoryPrimary",
                        "description": "optional",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/melody-financial-context/user/{userId}": {
            "get": {
                "summary": "Get Melody Financial Context",
                "operationId": "GetMelodyFinancialContext",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMelodyFinancialContextResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/merchant-monthly-expenditure/user/{userId}": {
            "get": {
                "summary": "Get Merchant Monthly Expenditure by user, month and merchant name",
                "operationId": "GetMerchantMonthlyExpenditure",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMerchantMonthlyExpenditureResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "description": "optional",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "merchantName",
                        "description": "optional",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/monthly-balance/user/{userId}": {
            "get": {
                "summary": "Get Monthly Balance by user and month",
                "operationId": "GetMonthlyBalance",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMonthlyBalanceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "description": "optional",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/monthly-expenditure/user/{userId}": {
            "get": {
                "summary": "Get Monthly Expenditure by user and month",
                "operationId": "GetMonthlyExpenditure",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMonthlyExpenditureResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/monthly-income/user/{userId}": {
            "get": {
                "summary": "Get Monthly Income by user and month",
                "operationId": "GetMonthlyIncome",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMonthlyIncomeResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/monthly-savings/{userId}": {
            "get": {
                "summary": "Get Monthly Savings by user and month",
                "operationId": "GetMonthlySavings",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMonthlySavingsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/monthly-total-quantity-by-security-and-user/user/{userId}": {
            "get": {
                "summary": "Get Monthly Total Quantity of Security by user, month and security",
                "operationId": "GetMonthlyTotalQuantityBySecurityAndUser",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMonthlyTotalQuantityBySecurityAndUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "securityId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/monthly-transaction-count/user/{userId}": {
            "get": {
                "summary": "Get Monthly Transaction Count by user and month",
                "operationId": "GetMonthlyTransactionCount",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMonthlyTransactionCountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/payment-channel-expenditure/user/{userId}": {
            "get": {
                "summary": "Get Payment Channel Monthly Expenditure by user, month, and payment channel",
                "operationId": "GetPaymentChannelMonthlyExpenditure",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPaymentChannelMonthlyExpenditureResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "paymentChannel",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/total-investment/user/{userId}": {
            "get": {
                "summary": "Get Total Investment by user and security",
                "operationId": "GetTotalInvestmentBySecurity",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTotalInvestmentBySecurityResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "securityId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/analytics/transaction-aggregates/{userId}": {
            "get": {
                "summary": "Returns the aggregated transactions for a user and month",
                "description": "This API could accept user_id and month as input parameters and return the aggregated transactions for that user and month.",
                "operationId": "TransactionAggregates",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTransactionAggregatesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "personalFinanceCategoryPrimary",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "locationCity",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentChannel",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "merchantName",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "description": "Number of items to return per page.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/async-task/{workflowId}/run/{runId}": {
            "get": {
                "summary": "polls the status of an async task",
                "description": "This endpoint polls the status of an async task",
                "operationId": "PollAsyncTaskExecutionStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PollAsyncTaskExecutionStatusResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "workflowId",
                        "description": "The task id\nValidations:\n- workflow id cannot be empty",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runId",
                        "description": "The run id\nValidations:\n- run id cannot be empty",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/bank-account": {
            "put": {
                "summary": "update a bank account for a given user profile",
                "description": "This endpoint updates a bank account if the user record id and bank account id exists",
                "operationId": "UpdateBankAccount",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateBankAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBankAccountRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/bank-account/profile": {
            "post": {
                "summary": "create a bank account for a given user profile",
                "description": "This endpoint creates a bank account for a given user profile",
                "operationId": "CreateBankAccount",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateBankAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBankAccountRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/bank-account/{bankAccountId}": {
            "get": {
                "summary": "get a bank account for a given user profile",
                "description": "This endpoint returns the bank account if the user record id and bank account id exists\nexample: /api/v1/bank-account?user_id=xxxxxx&&bank_account_id=xxxxxxx",
                "operationId": "GetBankAccount",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBankAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "bankAccountId",
                        "description": "The bank account id\nValidations:\n- bank_account_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            },
            "delete": {
                "summary": "deletes a bank account for a given user profile",
                "description": "This endpoint performs a delete operation on a user profile based on the provided parametersThis deletion operation spans multiple services (plaid) as user details are stored across a suite of our backend servicesThe operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the requestDivergent state is not expected to be encountered with this endpoint.",
                "operationId": "DeleteUserProfile1",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteBankAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "bankAccountId",
                        "description": "The bank account id\nValidations:\n- bank_account_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "userId",
                        "description": "The account ID associated with the user\nValidations:\n- user_id must be greater than 0",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/budget": {
            "get": {
                "summary": "get all budgets",
                "description": "This endpoint returns all budgets",
                "operationId": "GetAllBudgets",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAllBudgetsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "pocketId",
                        "description": "The pocket account id\nValidations:\n- pocket_account_id must be greater than 0",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "smartGoalId",
                        "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "milestoneId",
                        "description": "The milestone id\nValidations:\n- milestone_id must be greater than 0",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            },
            "post": {
                "summary": "create a budget",
                "description": "This endpoint creates a budget",
                "operationId": "CreateBudget",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateBudgetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBudgetRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            },
            "put": {
                "summary": "updates a budget",
                "description": "This endpoint updates a budget",
                "operationId": "UpdatesBudget",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateBudgetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBudgetRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/budget/{budgetId}": {
            "get": {
                "summary": "get budget by id",
                "description": "This endpoint returns the budget if the budget exists",
                "operationId": "GetBudget",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBudgetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "budgetId",
                        "description": "The budget id\nValidations:\n- budget_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            },
            "delete": {
                "summary": "delete a budget",
                "description": "This endpoint deletes a budget",
                "operationId": "DeleteBudget",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteBudgetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "budgetId",
                        "description": "The budget id\nValidations:\n- budget_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/copilot/quota/exceeded/{userId}": {
            "get": {
                "summary": "Checks if the question quota has been exceeded",
                "description": "This endpoint checks if a user has exceeded his/her copilot question quota",
                "operationId": "CheckIfQuotaExceeded",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckIfQuotaExceededResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "the account id associated with the user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/copilot/quota/question": {
            "post": {
                "summary": "Ask a question to copilot",
                "description": "This endpoint checks if a user can ask his/her copilot a question",
                "operationId": "AskCopilotQuestion",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecordAskCopilotQuestionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecordAskCopilotQuestionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/financial-profile/business/note": {
            "post": {
                "summary": "Adds a note to a business account",
                "description": "This endpoint adds a note to a business account",
                "operationId": "AddNoteToFinancialUserProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddNoteToFinancialUserProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddNoteToFinancialUserProfileRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/financial-profile/business/{businessAccountUserId}/{profileType}/note": {
            "get": {
                "summary": "Gets notes from a business account",
                "description": "This endpoint gets notes from a business account",
                "operationId": "GetNotesFromFinancialUserProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetNotesFromFinancialUserProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "businessAccountUserId",
                        "description": "The business account id\nValidations:\n- business_account_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ]
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/forecast/{smartGoalId}": {
            "get": {
                "summary": "get forecast by id",
                "description": "This endpoint returns the forecast if the forecast exists",
                "operationId": "GetForecast",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetForecastResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "smartGoalId",
                        "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/health": {
            "get": {
                "summary": "health check",
                "description": "This endpoint performs a healc check on the service",
                "operationId": "HealthCheck2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/historical-account-balance/user/{userId}/plaid-account-id/{plaidAccountId}": {
            "get": {
                "summary": "gets account balance of an account",
                "description": "This endpoint returns the historical balance for a given account",
                "operationId": "GetAccountBalance",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetHistoricalAccountBalanceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "plaidAccountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/link": {
            "post": {
                "summary": "create link",
                "description": "This endpoint creates a link",
                "operationId": "CreateLink",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateManualLinkResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateManualLinkRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/link/{linkId}": {
            "get": {
                "summary": "get link by id",
                "description": "This endpoint returns the link if the link exists",
                "operationId": "GetLink",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetLinkResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "linkId",
                        "description": "The link id\nValidations:\n- link_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "userId",
                        "description": "The user id\nValidations:\n- user_id must be greater than 0",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/link/{linkId}/user/{userId}": {
            "delete": {
                "summary": "delete link by id",
                "description": "This endpoint deletes the link if the link exists",
                "operationId": "DeleteLink",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteLinkResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "linkId",
                        "description": "The link id\nValidations:\n- link_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "userId",
                        "description": "The user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/links/{userId}": {
            "get": {
                "summary": "get links",
                "description": "This endpoint returns the links",
                "operationId": "GetLinks",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetLinksResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/milestone": {
            "post": {
                "summary": "create a milestone",
                "description": "This endpoint creates a milestone",
                "operationId": "CreateMilestone",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateMilestoneResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMilestoneRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            },
            "put": {
                "summary": "updates a milestone",
                "description": "This endpoint updates a milestone",
                "operationId": "UpdatesMilestone",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateMilestoneResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMilestoneRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/milestone/smart-goal/{smartGoalId}": {
            "get": {
                "summary": "get milestones by smart goal id",
                "description": "This endpoint returns the milestones if the smart goal exists",
                "operationId": "GetMilestones",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMilestonesBySmartGoalIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "smartGoalId",
                        "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/milestone/{milestoneId}": {
            "get": {
                "summary": "get milestone by id",
                "description": "This endpoint returns the milestone if the milestone exists",
                "operationId": "GetMilestone",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMilestoneResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "milestoneId",
                        "description": "The milestone id\nValidations:\n- milestone_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            },
            "delete": {
                "summary": "delete a milestone",
                "description": "This endpoint deletes a milestone",
                "operationId": "DeleteMilestone",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteMilestoneResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "milestoneId",
                        "description": "The milestone id\nValidations:\n- milestone_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/plaid/exchange-token": {
            "post": {
                "summary": "exchange plaid token",
                "description": "This endpoint exchanges a plaid link token for a plaid access token",
                "operationId": "ExchangePlaidToken",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlaidExchangeTokenResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlaidExchangeTokenRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/plaid/initiate-token-exchange": {
            "post": {
                "summary": "initiate plaid setup",
                "description": "This endpoint initiates a plaid link token creation",
                "operationId": "InitiatePlaidSetup",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlaidInitiateTokenExchangeResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlaidInitiateTokenExchangeRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/plaid/initiate-token-update": {
            "post": {
                "summary": "initiate plaid link token update",
                "description": "This endpoint initiates a plaid link token update",
                "operationId": "InitiatePlaidTokenUpdate",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlaidInitiateTokenUpdateResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlaidInitiateTokenUpdateRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/pocket": {
            "put": {
                "summary": "updates a pocket",
                "description": "This endpoint updates a pocket",
                "operationId": "UpdatePocket",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdatePocketResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePocketRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/pocket/bank-account": {
            "post": {
                "summary": "adds a default set of pockets to a specific bank account of interest",
                "description": "This endpoint adds a default pocket to a specific bank account of interest",
                "operationId": "AddDefaultPocketsToBankAccount",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddDefaultPocketsToBankAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddDefaultPocketsToBankAccountRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/pocket/{pocketId}": {
            "get": {
                "summary": "get a pocket",
                "description": "This endpoint returns the pocket if the pocket exists\nexample: /api/v1/pocket/xxxxxxx",
                "operationId": "GetPocket",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetPocketResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "pocketId",
                        "description": "The pocket account id\nValidations:\n- pocket_account_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            },
            "delete": {
                "summary": "deletes a pocket",
                "description": "This endpoint deletes a pocket",
                "operationId": "DeletePocket",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeletePocketResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "pocketId",
                        "description": "The pocket id\nValidations:\n- pocket_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/profile": {
            "post": {
                "summary": "create a user profile",
                "description": "This endpoint performs an a creation operation of a user profile based on the provided parametersThis operation is implemented as a distributed transactions as this operation can span multiple services",
                "operationId": "CreateUserProfile1",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateUserProfileResponse1"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserProfileRequest1"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            },
            "put": {
                "summary": "update a user profile",
                "description": "This endpoint performs an updates operation on a user profile based on the provided parameters",
                "operationId": "UpdateUserProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUserProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserProfileRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/profile/{userId}": {
            "get": {
                "summary": "Gets a user profile",
                "description": "Queries and obtains a user profile based on the provided parameters",
                "operationId": "GetUserProfile1",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserProfileResponse1"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The account ID associated with the user.\nNOTE: This user_id is the simfiny backend platform wide user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    },
                    {
                        "name": "bypassCache",
                        "description": "bypass_cache is a flag to bypass the cache and fetch the data from the source\nthis is very valuable when we want to get the latest data from the source",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            },
            "delete": {
                "summary": "deletes a user profile",
                "description": "This endpoint performs a delete operation on a user profile based on the provided parameters",
                "operationId": "DeleteUserProfile2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteUserProfileResponse1"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The account ID associated with the user.\nNOTE: This user_id is the simfiny backend platform wide user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/ready": {
            "get": {
                "summary": "readyness check",
                "description": "This endpoint performs a readiness check on the service",
                "operationId": "ReadynessCheck2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadynessCheckResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/smart-goal": {
            "post": {
                "summary": "create a smart goal",
                "description": "This endpoint creates a smart goal",
                "operationId": "CreateSmartGoal",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateSmartGoalResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSmartGoalRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            },
            "put": {
                "summary": "update a smart goal",
                "description": "This endpoint updates a smart goal",
                "operationId": "UpdateSmartGoal",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateSmartGoalResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSmartGoalRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/smart-goal/note": {
            "post": {
                "summary": "adds a note to a smart goal",
                "description": "This endpoint adds a note to a smart goal",
                "operationId": "AddNoteToSmartGoal",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddNoteToSmartGoalResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddNoteToSmartGoalRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            },
            "put": {
                "summary": "updates a note to a smart goal",
                "description": "This endpoint updates a note to a smart goal",
                "operationId": "UpdateNoteToSmartGoal",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateNoteToSmartGoalResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateNoteToSmartGoalRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/smart-goal/note/{noteId}": {
            "get": {
                "summary": "gets a note from a smart goal",
                "description": "This endpoint gets a note from a smart goal",
                "operationId": "GetNoteFromSmartGoal",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetNoteFromSmartGoalResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "noteId",
                        "description": "The note id\nValidations:\n- note_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            },
            "delete": {
                "summary": "deletes a note from a smart goal",
                "description": "This endpoint deletes a note from a smart goal",
                "operationId": "DeleteNoteFromSmartGoal",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteNoteFromSmartGoalResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "noteId",
                        "description": "The note id\nValidations:\n- note_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "smartGoalId",
                        "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/smart-goal/pocket/{pocketId}": {
            "get": {
                "summary": "get smart goals by pocket id",
                "description": "This endpoint returns the smart goals if the pocket exists",
                "operationId": "GetSmartGoalsByPocketId",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSmartGoalsByPocketIdResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "pocketId",
                        "description": "The pocket account id\nValidations:\n- pocket_account_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/smart-goal/{smartGoalId}": {
            "delete": {
                "summary": "delete a smart goal",
                "description": "This endpoint deletes a smart goal",
                "operationId": "DeleteSmartGoal",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteSmartGoalResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "smartGoalId",
                        "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/smart-goal/{smartGoalId}/note": {
            "get": {
                "summary": "gets notes from a smart goal",
                "description": "This endpoint gets notes from a smart goal",
                "operationId": "GetNotesFromSmartGoal",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetNotesFromSmartGoalResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "smartGoalId",
                        "description": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/stripe/subscription": {
            "post": {
                "summary": "Creates a new subscription for a given customer against stripe",
                "description": "This endpoint enabled a user to create a new subscription against stripe",
                "operationId": "CreateSubscription",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateSubscriptionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSubscriptionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/sync/trigger": {
            "post": {
                "summary": "Triggers a sync",
                "description": "This endpoint triggers a sync",
                "operationId": "TriggerSync",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TriggerSyncResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TriggerSyncRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions": {
            "get": {
                "summary": "lists a set of transactions against a given account of interest",
                "description": "This endpoint gets a list of transactions against a given account of interest",
                "operationId": "ListTransactions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListTransactionsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    },
                    {
                        "name": "financialAccountType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED",
                                "FINANCIAL_ACCOUNT_TYPE_BANK",
                                "FINANCIAL_ACCOUNT_TYPE_INVESTMENT",
                                "FINANCIAL_ACCOUNT_TYPE_CREDIT",
                                "FINANCIAL_ACCOUNT_TYPE_MORTGAGE",
                                "FINANCIAL_ACCOUNT_TYPE_STUDENT_LOAN"
                            ],
                            "default": "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/all_accounts": {
            "get": {
                "summary": "lists a set of transactions across all connected accounts",
                "description": "This endpoint gets a list of transactions across all connected accounts",
                "operationId": "ListTransactions1",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListTransactionsAcrossAllAccountsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/recurring": {
            "put": {
                "summary": "update a transaction",
                "description": "This endpoint updates a transaction",
                "operationId": "UpdateTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateRecurringTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateRecurringTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/recurring-transactions/{userId}": {
            "get": {
                "summary": "get recurring transactions",
                "description": "This endpoint returns the recurring transactions for a given user id",
                "operationId": "GetRecurringTransactionsForUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRecurringTransactionsForUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/recurring/bulk": {
            "put": {
                "summary": "update a transaction",
                "description": "This endpoint updates a set of transactions",
                "operationId": "BulkUpdateRecurringTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkUpdateRecurringTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkUpdateRecurringTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/recurring/note": {
            "post": {
                "summary": "adds a note to a transaction",
                "description": "This endpoint adds a note to a transaction",
                "operationId": "AddNoteToRecurringTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddNoteToRecurringTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddNoteToRecurringTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            },
            "put": {
                "summary": "Updates a note to a transaction",
                "description": "This endpoint Updates a note to a transaction",
                "operationId": "UpdateNoteToRecurringTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateNoteToRecurringTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateNoteToRecurringTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/recurring/{transactionId}": {
            "get": {
                "summary": "lists a set of transactions against a given account of interest",
                "description": "This endpoint gets a specific transaction based on the transaction id",
                "operationId": "GetRecurringTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSingleRecurringTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "transactionId",
                        "description": "the transaction of interest we aim to obtain",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            },
            "delete": {
                "summary": "deletes a transaction by id",
                "description": "This endpoint deletes a specific transaction based on the transaction id",
                "operationId": "DeleteTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteRecurringTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "transactionId",
                        "description": "the transaction of interest we aim to delete",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/recurring/{transactionId}/note/{noteId}": {
            "delete": {
                "summary": "deletes a note from a transaction",
                "description": "This endpoint deletes a note from a transaction",
                "operationId": "DeleteNoteFromRecurringTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteNoteFromRecurringTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "transactionId",
                        "description": "The transaction id\nValidations:\n- transaction_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "noteId",
                        "description": "The note id\nValidations:\n- note_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/recurring/{transactionId}/notes": {
            "get": {
                "summary": "lists notes from a transaction",
                "description": "This endpoint lists notes from a transaction",
                "operationId": "ListRecurringTransactionNotes",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecurringTransactionNotesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "transactionId",
                        "description": "The transaction id\nValidations:\n- transaction_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/recurrings": {
            "get": {
                "summary": "lists a set of transactions against a given account of interest",
                "description": "This endpoint gets a list of transactions against a given account of interest",
                "operationId": "ListRecurringTransactionsForUserAndAccount",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListRecurringTransactionsForUserAndAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    },
                    {
                        "name": "financialAccountType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED",
                                "FINANCIAL_ACCOUNT_TYPE_BANK",
                                "FINANCIAL_ACCOUNT_TYPE_INVESTMENT",
                                "FINANCIAL_ACCOUNT_TYPE_CREDIT",
                                "FINANCIAL_ACCOUNT_TYPE_MORTGAGE",
                                "FINANCIAL_ACCOUNT_TYPE_STUDENT_LOAN"
                            ],
                            "default": "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/single-transaction": {
            "put": {
                "summary": "update a transaction",
                "description": "This endpoint updates a transaction",
                "operationId": "UpdateSingleTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateSingleTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSingleTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/transaction/bulk": {
            "put": {
                "summary": "update a transaction",
                "description": "This endpoint updates a set of transactions",
                "operationId": "BulkUpdateTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkUpdateTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkUpdateTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/transaction/note": {
            "post": {
                "summary": "adds a note to a transaction",
                "description": "This endpoint adds a note to a transaction",
                "operationId": "AddNoteToTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddNoteToTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddNoteToTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            },
            "put": {
                "summary": "Updates a note to a transaction",
                "description": "This endpoint Updates a note to a transaction",
                "operationId": "UpdateNoteToTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateNoteToTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateNoteToTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/transaction/search": {
            "post": {
                "summary": "searches transactions",
                "description": "This endpoint searches transactions based on a search query and returns a list of transactions that match the search query",
                "operationId": "SearchTransactions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SearchTransactionsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchTransactionsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/transaction/split": {
            "post": {
                "summary": "splits a transaction",
                "description": "This endpoint splits a transaction into multiple transactions",
                "operationId": "SplitTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SplitTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SplitTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/transaction/unsplit": {
            "post": {
                "summary": "unsplit a transaction",
                "description": "This endpoint unsplit a transaction that was split previously into multiple transactions",
                "operationId": "UnsplitTransactions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnSplitTransactionsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UnSplitTransactionsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/transaction/{transactionId}": {
            "get": {
                "summary": "lists a set of transactions against a given account of interest",
                "description": "This endpoint gets a specific transaction based on the transaction id",
                "operationId": "GetTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "transactionId",
                        "description": "the transaction of interest we aim to obtain",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            },
            "delete": {
                "summary": "deletes a transaction by id",
                "description": "This endpoint deletes a specific transaction based on the transaction id",
                "operationId": "DeleteTransaction1",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "transactionId",
                        "description": "the transaction of interest we aim to delete",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/transaction/{transactionId}/note/{noteId}": {
            "get": {
                "summary": "gets a note from a transaction",
                "description": "This endpoint gets a note from a transaction",
                "operationId": "GetNoteFromTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetNoteFromTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "transactionId",
                        "description": "The transaction id\nValidations:\n- transaction_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "noteId",
                        "description": "The note id\nValidations:\n- note_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            },
            "delete": {
                "summary": "deletes a note from a transaction",
                "description": "This endpoint deletes a note from a transaction",
                "operationId": "DeleteNoteFromTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteNoteFromTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "transactionId",
                        "description": "The transaction id\nValidations:\n- transaction_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "noteId",
                        "description": "The note id\nValidations:\n- note_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/transaction/{transactionId}/notes": {
            "get": {
                "summary": "lists notes from a transaction",
                "description": "This endpoint lists notes from a transaction",
                "operationId": "ListTransactionNotes",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListTransactionNotesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "transactionId",
                        "description": "The transaction id\nValidations:\n- transaction_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/transaction/{transactionId}/split": {
            "get": {
                "summary": "gets a split transaction",
                "description": "This endpoint gets a split transaction that was split previously into multiple transactions",
                "operationId": "GetSplitTransaction",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSplitTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "transactionId",
                        "description": "The transaction id\nValidations:\n- transaction_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/user/{userId}/plaid-account-id/{plaidAccountId}/pageNumber/{pageNumber}/pageSize/{pageSize}": {
            "get": {
                "summary": "get transactions tied to a bank account and account id",
                "description": "This endpoint returns the transactions for a given user id and a business account id",
                "operationId": "GetTransactions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTransactionsForBankAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "plaidAccountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/transactions/{userId}/pageNumber/{pageNumber}/pageSize/{pageSize}": {
            "get": {
                "summary": "get transactions",
                "description": "This endpoint returns the transactions for a given user id",
                "operationId": "GetTransactions1",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTransactionsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/users/{userId}/accounts/{plaidAccountId}/transactions/month": {
            "get": {
                "summary": "Get transactions for the past month",
                "description": "This endpoint returns the transactions for a given user id over the past month\nexample: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions/month",
                "operationId": "GetTransactionsForPastMonth",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTransactionsForPastMonthResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "plaidAccountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "Current page number",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "limit",
                        "description": "Number of transactions per page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    },
                    {
                        "name": "financialAccountType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED",
                                "FINANCIAL_ACCOUNT_TYPE_BANK",
                                "FINANCIAL_ACCOUNT_TYPE_INVESTMENT",
                                "FINANCIAL_ACCOUNT_TYPE_CREDIT",
                                "FINANCIAL_ACCOUNT_TYPE_MORTGAGE",
                                "FINANCIAL_ACCOUNT_TYPE_STUDENT_LOAN"
                            ],
                            "default": "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/users/{userId}/accounts/{plaidAccountId}/transactions/range": {
            "get": {
                "summary": "get transactions by time",
                "description": "This endpoint returns the transactions for a given user id and time\nexample: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions?start_time={start_time}&end_time={end_time}",
                "operationId": "GetTransactionsByTime",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTransactionsBetweenTimeRangesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "description": "The user id\nValidations:\n- user_id must be greater than 0",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "plaidAccountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startDate",
                        "description": "start date",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "endDate",
                        "description": "end date",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "page",
                        "description": "Current page number",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "limit",
                        "description": "Number of transactions per page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    },
                    {
                        "name": "financialAccountType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED",
                                "FINANCIAL_ACCOUNT_TYPE_BANK",
                                "FINANCIAL_ACCOUNT_TYPE_INVESTMENT",
                                "FINANCIAL_ACCOUNT_TYPE_CREDIT",
                                "FINANCIAL_ACCOUNT_TYPE_MORTGAGE",
                                "FINANCIAL_ACCOUNT_TYPE_STUDENT_LOAN"
                            ],
                            "default": "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/financial-microservice/api/v1/users/{userId}/accounts/{plaidAccountId}/transactions/week": {
            "get": {
                "summary": "get transactions for the past week",
                "description": "This endpoint returns the transactions for a given user id and time\nexample: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions/week",
                "operationId": "GetTransactionsForPastWeek",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTransactionsForPastWeekResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status1"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "plaidAccountId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "description": "Current page number",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "limit",
                        "description": "Number of transactions per page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "profileType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                                "FINANCIAL_USER_PROFILE_TYPE_USER",
                                "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                            ],
                            "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
                        }
                    },
                    {
                        "name": "financialAccountType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED",
                                "FINANCIAL_ACCOUNT_TYPE_BANK",
                                "FINANCIAL_ACCOUNT_TYPE_INVESTMENT",
                                "FINANCIAL_ACCOUNT_TYPE_CREDIT",
                                "FINANCIAL_ACCOUNT_TYPE_MORTGAGE",
                                "FINANCIAL_ACCOUNT_TYPE_STUDENT_LOAN"
                            ],
                            "default": "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED"
                        }
                    }
                ],
                "tags": [
                    "financial-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/async-task/{workflowId}/run/{workflowRunId}": {
            "get": {
                "summary": "polls the status of an async task",
                "description": "This endpoint polls the status of an async task",
                "operationId": "GetWorkflowExecutionStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetWorkflowExecutionStatusResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "workflowId",
                        "description": "The task id\nValidations:\n- workflow id cannot be empty",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workflowRunId",
                        "description": "The run id\nValidations:\n- run id cannot be empty",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/balance-sheets": {
            "post": {
                "summary": "Gets Balance Sheets",
                "description": "Queries balance sheets for a business.",
                "operationId": "ReadBalanceSheets",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadBalanceSheetsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReadBalanceSheetsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/business-transactions": {
            "post": {
                "summary": "Gets Business Transactions",
                "description": "Queries transactions for a business.",
                "operationId": "ReadBusinessTransactions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadBusinessTransactionsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReadBusinessTransactionsRequest"
                            }
                        }
                    },
                    "description": "Request for reading business transactions with pagination and time filtering.",
                    "required": true
                },
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/cashflow-statements": {
            "post": {
                "summary": "Gets Cashfloe Sheets",
                "description": "Queries cashflow sheets for a business.",
                "operationId": "ReadCashFlowStatements",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadCashFlowStatementsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReadCashFlowStatementsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/chart-of-accounts": {
            "post": {
                "summary": "Gets Chart of Accounts",
                "description": "Queries chart of accounts for a business.",
                "operationId": "ReadBusinessChartOfAccounts",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadBusinessChartOfAccountsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReadBusinessChartOfAccountsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/health": {
            "get": {
                "summary": "Health Check",
                "description": "Performs a health check on the service.",
                "operationId": "HealthCheck3",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthCheckResponse2"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/income-statements": {
            "post": {
                "summary": "Gets Cashfloe Sheets",
                "description": "Queries income sheets for a business.",
                "operationId": "ReadIncomeStatements",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadIncomeStatementsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReadIncomeStatementsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/merge/exchange-token": {
            "post": {
                "summary": "Exchange Link Token",
                "description": "Exchanges a public link token for an account token.",
                "operationId": "ExchangePublicLinkTokenForAccountTokenResponse",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExchangePublicLinkTokenForAccountTokenResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExchangePublicLinkTokenForAccountTokenRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/merge/initiate-token-exchange": {
            "post": {
                "summary": "Get Link Token",
                "description": "Provides a link token to initialize a Link session for the user.",
                "operationId": "GetLinkToken",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMergeLinkTokenResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GetMergeLinkTokenRequest"
                            }
                        }
                    },
                    "description": "Defines a message named GetMergeLinkTokenRequest.",
                    "required": true
                },
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/profile": {
            "post": {
                "summary": "Create Payroll Profile",
                "description": "Creates a payroll profile.",
                "operationId": "CreatePayrollProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateAccountingProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAccountingProfileRequest"
                            }
                        }
                    },
                    "description": "Defines a message named CreateAccountingProfileRequest.",
                    "required": true
                },
                "tags": [
                    "accounting-service"
                ]
            },
            "put": {
                "summary": "Update Payroll Profile",
                "description": "Updates a payroll profile.",
                "operationId": "UpdatePayrollProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateAccountingProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAccountingProfileRequest"
                            }
                        }
                    },
                    "description": "Defines a message named UpdateAccountingProfileRequest.",
                    "required": true
                },
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/profile/{authZeroUserId}": {
            "get": {
                "summary": "Get Business Account Profile",
                "description": "Retrieves a business account profile.",
                "operationId": "ReadAccountingProfileResponse",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadAccountingProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "authZeroUserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "linkedAccountingAccountId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "accounting-service"
                ]
            },
            "delete": {
                "summary": "Delete Payroll Profile",
                "description": "Deletes a business payroll profile.",
                "operationId": "DeleteProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteAccountingProfileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "authZeroUserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/accounting-microservice/api/v1/ready": {
            "get": {
                "summary": "Readiness Check",
                "description": "Performs a readiness check on the service.",
                "operationId": "ReadinessCheck",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReadynessCheckResponse2"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse1"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "accounting-service"
                ]
            }
        },
        "/workspace-microservice/api/v1/accounts": {
            "post": {
                "summary": "Create a new account",
                "description": "This endpoint creates a new user account",
                "operationId": "CreateAccount",
                "responses": {
                    "200": {
                        "description": "Account creation successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAccountRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "workspace-service"
                ]
            }
        },
        "/workspace-microservice/api/v1/accounts/{authZeroUserId}": {
            "get": {
                "summary": "Get account by ID",
                "description": "This endpoint retrieves account details by ID",
                "operationId": "GetAccount",
                "responses": {
                    "200": {
                        "description": "Account retrieval successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "authZeroUserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createIfNotExists",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "tags": [
                    "workspace-service"
                ]
            },
            "delete": {
                "summary": "Delete an account",
                "description": "This endpoint deletes an account by ID",
                "operationId": "DeleteAccount",
                "responses": {
                    "200": {
                        "description": "Account deletion successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteAccountResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "authZeroUserId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "workspace-service"
                ]
            }
        },
        "/workspace-microservice/api/v1/files": {
            "put": {
                "summary": "Update a file",
                "description": "This endpoint updates a file by ID",
                "operationId": "UpdateFile",
                "responses": {
                    "200": {
                        "description": "File update successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateFileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateFileRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "workspace-service"
                ]
            }
        },
        "/workspace-microservice/api/v1/files/{fileId}": {
            "delete": {
                "summary": "Delete a file",
                "description": "This endpoint deletes a file by ID",
                "operationId": "DeleteFile",
                "responses": {
                    "200": {
                        "description": "File deletion successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteFileResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "fileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "authZeroUserId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "folderId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "workspace-service"
                ]
            }
        },
        "/workspace-microservice/api/v1/folders": {
            "get": {
                "summary": "List folders",
                "description": "This endpoint lists all folders",
                "operationId": "ListFolder",
                "responses": {
                    "200": {
                        "description": "Folder list retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListFolderResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "authZeroUserId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "folderId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "workspace-service"
                ]
            },
            "post": {
                "summary": "Create a folder",
                "description": "This endpoint creates a new folder",
                "operationId": "CreateFolder",
                "responses": {
                    "200": {
                        "description": "Folder creation successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateFolderResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateFolderRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "workspace-service"
                ]
            },
            "put": {
                "summary": "Update a folder",
                "description": "This endpoint updates a folder by ID",
                "operationId": "UpdateFolder",
                "responses": {
                    "200": {
                        "description": "Folder update successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateFolderResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateFolderRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "workspace-service"
                ]
            }
        },
        "/workspace-microservice/api/v1/folders/{folderId}": {
            "delete": {
                "summary": "Delete a folder",
                "description": "This endpoint deletes a folder by ID",
                "operationId": "DeleteFolder",
                "responses": {
                    "200": {
                        "description": "Folder deletion successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteFolderResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "folderId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "authZeroUserId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workspaceId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    }
                ],
                "tags": [
                    "workspace-service"
                ]
            }
        },
        "/workspace-microservice/api/v1/workspaces": {
            "get": {
                "summary": "List workspaces",
                "description": "This endpoint lists all workspaces",
                "operationId": "ListWorkspace",
                "responses": {
                    "200": {
                        "description": "Workspace list retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListWorkspaceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "authZeroUserId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "workspace-service"
                ]
            },
            "post": {
                "summary": "Create a workspace",
                "description": "This endpoint creates a new workspace",
                "operationId": "CreateWorkspace",
                "responses": {
                    "200": {
                        "description": "Workspace creation successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateWorkspaceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateWorkspaceRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "workspace-service"
                ]
            },
            "put": {
                "summary": "Update a workspace",
                "description": "This endpoint updates a workspace by ID",
                "operationId": "UpdateWorkspace",
                "responses": {
                    "200": {
                        "description": "Workspace update successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateWorkspaceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateWorkspaceRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "workspace-service"
                ]
            }
        },
        "/workspace-microservice/api/v1/workspaces/{workspaceId}": {
            "delete": {
                "summary": "Delete a workspace",
                "description": "This endpoint deletes a workspace by ID",
                "operationId": "DeleteWorkspace",
                "responses": {
                    "200": {
                        "description": "Workspace deletion successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteWorkspaceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Request failed due to invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Request failed due to incorrect path.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PathUnknownErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Request failed due to internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InternalErrorMessageResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "workspaceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uint64"
                        }
                    },
                    {
                        "name": "authZeroUserId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "workspace-service"
                ]
            }
        },
        "/workspace-microservice/rest-api/v1/file/upload": {
            "post": {
                "description": "This endpoint allows for the uploading of a file to the server. Upon successful upload,",
                "tags": [
                    "workspace-service-rest"
                ],
                "summary": "Uploads a file to the server",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "workspaceId": {
                                        "description": "Identifier of the workspace where the file will be uploaded",
                                        "type": "string"
                                    },
                                    "folderId": {
                                        "description": "Identifier of the folder within the workspace where the file will be stored",
                                        "type": "string"
                                    },
                                    "filename": {
                                        "description": "The name of the file to be saved (optional)",
                                        "type": "string"
                                    },
                                    "userId": {
                                        "description": "Identifier of the user uploading the file",
                                        "type": "string"
                                    },
                                    "attachment": {
                                        "description": "The file to be uploaded",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "required": [
                                    "workspaceId",
                                    "folderId",
                                    "userId",
                                    "attachment"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "On successful upload, returns the URL to the saved file and its metadata, including file name, size, type, and the upload timestamp.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/workspaceservicehttp.FileUploadResponse"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AddUserToTeamBody": {
                "type": "object",
                "properties": {
                    "adminAuth0UserId": {
                        "type": "string"
                    },
                    "userAuth0UserId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/ProfileType"
                    }
                },
                "title": "Add User to Team Request and Response"
            },
            "AddUserToTeamResponse": {
                "type": "object",
                "properties": {
                    "team": {
                        "$ref": "#/components/schemas/Team"
                    }
                }
            },
            "Address": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "address id"
                    },
                    "address": {
                        "type": "string",
                        "example": "1234 5th Ave",
                        "title": "the address field\nValidations:\n- must be at least 5 character long (meaning cannot be empty)"
                    },
                    "unit": {
                        "type": "string",
                        "example": "Apt 1",
                        "title": "the unit if the address is an apartment\nValidations:\n- must be at least 1 character long (meaning cannot be empty)"
                    },
                    "zipcode": {
                        "type": "string",
                        "example": "12345",
                        "title": "the address zipcode\nValidations: \n- must be exactly 5 characters this is to ensure the client inputs the proper zip code"
                    },
                    "city": {
                        "type": "string",
                        "example": "New York",
                        "title": "the city\nValidations:\n- must be at least 3 characters long (meaning cannot be empty)"
                    },
                    "state": {
                        "type": "string",
                        "example": "New York",
                        "title": "the state/municipality\nValidations\n- must be at least 2 characters long"
                    },
                    "longitude": {
                        "type": "string",
                        "example": "-73.987654",
                        "title": "longitude\nValidations: None - can be empty"
                    },
                    "lattitude": {
                        "type": "string",
                        "example": "40.123456",
                        "title": "latittude\nValidations: None - can be empty"
                    }
                },
                "title": "Address: represents an account's address"
            },
            "Any": {
                "type": "object",
                "properties": {
                    "@type": {
                        "type": "string"
                    }
                },
                "additionalProperties": {}
            },
            "ApplicationTheme": {
                "type": "string",
                "enum": [
                    "APPLICATION_THEME_UNSPECIFIED",
                    "APPLICATION_THEME_LIGHT",
                    "APPLICATION_THEME_DARK"
                ],
                "default": "APPLICATION_THEME_UNSPECIFIED",
                "description": "Display and interaction preferences."
            },
            "AuditAction": {
                "type": "string",
                "enum": [
                    "AUDIT_ACTION_UNSPECIFIED",
                    "AUDIT_ACTION_CREATED",
                    "AUDIT_ACTION_UPDATED",
                    "AUDIT_ACTION_DELETED"
                ],
                "default": "AUDIT_ACTION_UNSPECIFIED",
                "description": "AuditAction defines the types of actions that can be audited."
            },
            "BusinessAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "description": "Unique identifier for the business account."
                    },
                    "email": {
                        "type": "string",
                        "example": "example@gmail.com",
                        "description": "Email associated with the business account."
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "bio": {
                        "type": "string",
                        "example": "sample description",
                        "description": "Short description of the business account. Maximum of 200 characters."
                    },
                    "headline": {
                        "type": "string",
                        "example": "sample headline",
                        "description": "Headline for the profile of the business account."
                    },
                    "phoneNumber": {
                        "type": "string",
                        "example": "6513424124",
                        "description": "Phone number associated with the business account."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tags"
                        },
                        "description": "Tags associated with the business account. Between 1 and 10 tags are allowed."
                    },
                    "authnAccountId": {
                        "type": "string",
                        "format": "uint64",
                        "description": "Identifier for the associated authentication service account."
                    },
                    "isActive": {
                        "type": "boolean",
                        "example": true,
                        "description": "Indicates whether the business account is active."
                    },
                    "username": {
                        "type": "string",
                        "example": "testuser9696",
                        "description": "Username for the business account. Must be at least 10 characters long."
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "example": false,
                        "description": "Indicates whether the business account is private."
                    },
                    "isEmailVerified": {
                        "type": "boolean",
                        "example": false,
                        "description": "Indicates whether the email associated with the business account has been verified."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp indicating when the business account was created."
                    },
                    "verifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp indicating when the email for the business account was verified."
                    },
                    "companyEstablishedDate": {
                        "type": "string",
                        "description": "Date when the company associated with the business account was established."
                    },
                    "companyIndustryType": {
                        "type": "string",
                        "example": "fintech",
                        "description": "Industry type of the company associated with the business account."
                    },
                    "companyWebsiteUrl": {
                        "type": "string",
                        "description": "Website URL of the company associated with the business account."
                    },
                    "companyDescription": {
                        "type": "string",
                        "example": "We help businesses succeed",
                        "description": "Description of the company associated with the business account."
                    },
                    "companyName": {
                        "type": "string",
                        "example": "Solomon AI",
                        "description": "Name of the company associated with the business account."
                    },
                    "settings": {
                        "$ref": "#/components/schemas/Settings"
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/ProfileType"
                    },
                    "profileImageUrl": {
                        "type": "string",
                        "description": "Profile image associated with the user account."
                    },
                    "auth0UserId": {
                        "type": "string",
                        "title": "auth0 user id associated with the business account"
                    },
                    "algoliaUserId": {
                        "type": "string",
                        "title": "Algolia user id"
                    }
                },
                "description": "BusinessAccount represents a business account within the context of solomon-ai."
            },
            "CheckEmailAndAuth0UserIdExistsResponse": {
                "type": "object",
                "properties": {
                    "userAccount": {
                        "$ref": "#/components/schemas/UserAccount"
                    },
                    "businessAccount": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    },
                    "exists": {
                        "type": "boolean"
                    }
                }
            },
            "CheckEmailExistsResponse": {
                "type": "object",
                "properties": {
                    "exists": {
                        "type": "boolean"
                    }
                }
            },
            "CheckEmailExistsV2Response": {
                "type": "object",
                "properties": {
                    "exists": {
                        "type": "boolean"
                    }
                }
            },
            "CheckUsernameExistsResponse": {
                "type": "object",
                "properties": {
                    "exists": {
                        "type": "boolean"
                    }
                }
            },
            "CheckUsernameExistsV2Response": {
                "type": "object",
                "properties": {
                    "exists": {
                        "type": "boolean"
                    }
                }
            },
            "CreateRoleResponse": {
                "type": "object",
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/Role"
                    }
                }
            },
            "CreateTeamRequest": {
                "type": "object",
                "properties": {
                    "adminAuth0UserId": {
                        "type": "string"
                    },
                    "teamName": {
                        "type": "string",
                        "example": "team_name:team1"
                    },
                    "teamDescription": {
                        "type": "string",
                        "example": "team_description:team1"
                    }
                },
                "title": "Create Team Request and Response"
            },
            "CreateTeamResponse": {
                "type": "object",
                "properties": {
                    "team": {
                        "$ref": "#/components/schemas/Team"
                    }
                }
            },
            "CreateUserV2Request": {
                "type": "object",
                "properties": {
                    "userAccount": {
                        "$ref": "#/components/schemas/UserAccount"
                    },
                    "businessAccount": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    },
                    "communityIdsToFollow": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "title": "set of community IDs to follow \nValidations:\n- at least 0 and at most 20 community ids supported at one time"
                    },
                    "profileImageUrl": {
                        "type": "string",
                        "example": "lksdjhfgsdhfghdsgfhgdh.com",
                        "title": "The profile image of the user\nValidations:\n- must be a valid URI"
                    },
                    "auth0UserId": {
                        "type": "string",
                        "example": "lksdjhfgsdhfghdsgfhgdh.com",
                        "title": "The auth0 user id of the user"
                    }
                },
                "title": "CreateUserV2Request: Represents the request object invoked against the user\nservice to create a user account",
                "required": [
                    "profileImageUrl",
                    "auth0UserId"
                ]
            },
            "CreateUserV2Response": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "format": "uint64"
                    }
                },
                "title": "CreateUserResponse: Represents the response object returned as a response to\nthe `create-user` request"
            },
            "DeleteRoleResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "DeleteTeamResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "DeleteUserResponse": {
                "type": "object",
                "properties": {
                    "accountDeleted": {
                        "type": "boolean"
                    }
                },
                "title": "DeleteUserResponse: Represents the object returned as a response to\n`delete-user` request"
            },
            "DeleteUserV2Response": {
                "type": "object",
                "properties": {
                    "accountDeleted": {
                        "type": "boolean"
                    }
                },
                "title": "DeleteUserResponse: Represents the object returned as a response to\n`delete-user` request"
            },
            "DigitalWorkerSettings": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "description": "Unique identifier for the toolchain configuration."
                    },
                    "workerName": {
                        "type": "string"
                    },
                    "workerVersion": {
                        "type": "string"
                    },
                    "enableLogging": {
                        "type": "boolean"
                    }
                },
                "description": "DigitalWorkerToolChainConfiguration defines the overall settings for a digital worker."
            },
            "ErrorCode": {
                "type": "string",
                "enum": [
                    "no_error",
                    "validation_error",
                    "authorization_model_not_found",
                    "authorization_model_resolution_too_complex",
                    "invalid_write_input",
                    "cannot_allow_duplicate_tuples_in_one_request",
                    "cannot_allow_duplicate_types_in_one_request",
                    "cannot_allow_multiple_references_to_one_relation",
                    "invalid_continuation_token",
                    "invalid_tuple_set",
                    "invalid_check_input",
                    "invalid_expand_input",
                    "unsupported_user_set",
                    "invalid_object_format",
                    "write_failed_due_to_invalid_input",
                    "authorization_model_assertions_not_found",
                    "latest_authorization_model_not_found",
                    "type_not_found",
                    "relation_not_found",
                    "empty_relation_definition",
                    "invalid_user",
                    "invalid_tuple",
                    "unknown_relation",
                    "store_id_invalid_length",
                    "assertions_too_many_items",
                    "id_too_long",
                    "authorization_model_id_too_long",
                    "tuple_key_value_not_specified",
                    "tuple_keys_too_many_or_too_few_items",
                    "page_size_invalid",
                    "param_missing_value",
                    "difference_base_missing_value",
                    "subtract_base_missing_value",
                    "object_too_long",
                    "relation_too_long",
                    "type_definitions_too_few_items",
                    "type_invalid_length",
                    "type_invalid_pattern",
                    "relations_too_few_items",
                    "relations_too_long",
                    "relations_invalid_pattern",
                    "object_invalid_pattern",
                    "query_string_type_continuation_token_mismatch",
                    "exceeded_entity_limit",
                    "invalid_contextual_tuple",
                    "duplicate_contextual_tuple",
                    "invalid_authorization_model",
                    "unsupported_schema_version"
                ],
                "default": "no_error"
            },
            "FinancialPreferences": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "address id"
                    },
                    "currencyPreference": {
                        "type": "string"
                    },
                    "financialYearStart": {
                        "type": "string"
                    },
                    "taxPercentage": {
                        "type": "number",
                        "format": "double"
                    },
                    "taxCode": {
                        "type": "string"
                    }
                }
            },
            "GetBusinessSettingsResponse": {
                "type": "object",
                "properties": {
                    "settings": {
                        "$ref": "#/components/schemas/Settings"
                    }
                }
            },
            "GetCannyUserSSOTokenResponse": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string"
                    }
                }
            },
            "GetRoleResponse": {
                "type": "object",
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/Role"
                    }
                }
            },
            "GetTeamResponse": {
                "type": "object",
                "properties": {
                    "team": {
                        "$ref": "#/components/schemas/Team"
                    }
                }
            },
            "GetUserByAuth0IDResponse": {
                "type": "object",
                "properties": {
                    "userAccount": {
                        "$ref": "#/components/schemas/UserAccount"
                    },
                    "businessAccount": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    }
                }
            },
            "GetUserByAuthnIDV2Response": {
                "type": "object",
                "properties": {
                    "userAccount": {
                        "$ref": "#/components/schemas/UserAccount"
                    },
                    "businessAccount": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    }
                },
                "description": "Represents the response object for fetching user details by authn id."
            },
            "GetUserByEmailOrUsernameResponse": {
                "type": "object",
                "properties": {
                    "account": {
                        "$ref": "#/components/schemas/UserAccount"
                    }
                }
            },
            "GetUserByEmailOrUsernameV2Response": {
                "type": "object",
                "properties": {
                    "userAccount": {
                        "$ref": "#/components/schemas/UserAccount"
                    },
                    "businessAccount": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    },
                    "ssoToken": {
                        "type": "string"
                    }
                }
            },
            "GetUserByEmailResponse": {
                "type": "object",
                "properties": {
                    "account": {
                        "$ref": "#/components/schemas/UserAccount"
                    }
                }
            },
            "GetUserByEmailV2Response": {
                "type": "object",
                "properties": {
                    "userAccount": {
                        "$ref": "#/components/schemas/UserAccount"
                    },
                    "businessAccount": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    }
                }
            },
            "GetUserByUsernameResponse": {
                "type": "object",
                "properties": {
                    "account": {
                        "$ref": "#/components/schemas/UserAccount"
                    }
                }
            },
            "GetUserByUsernameV2Response": {
                "type": "object",
                "properties": {
                    "userAccount": {
                        "$ref": "#/components/schemas/UserAccount"
                    },
                    "businessAccount": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    },
                    "ssoToken": {
                        "type": "string"
                    }
                }
            },
            "GetUserIdResponse": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The account ID associated with the user"
                    }
                },
                "title": "GetUserIdResponse: Represents the response object returned as a product of\ncalling the `get-user-id` request"
            },
            "GetUserIdV2Response": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The account ID associated with the user"
                    }
                },
                "title": "GetUserIdResponse: Represents the response object returned as a product of\ncalling the `get-user-id` request"
            },
            "GetUserResponse": {
                "type": "object",
                "properties": {
                    "account": {
                        "$ref": "#/components/schemas/UserAccount"
                    }
                },
                "title": "GetUserResponse: Represents the object returned as a response to `get-user`\nrequest"
            },
            "GetUserV2Response": {
                "type": "object",
                "properties": {
                    "userAccount": {
                        "$ref": "#/components/schemas/UserAccount"
                    },
                    "businessAccount": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    }
                },
                "description": "Represents the response object for fetching user details."
            },
            "HealthCheckResponse": {
                "type": "object",
                "properties": {
                    "healthy": {
                        "type": "boolean"
                    }
                }
            },
            "InternalErrorCode": {
                "type": "string",
                "enum": [
                    "no_internal_error",
                    "internal_error",
                    "cancelled",
                    "deadline_exceeded",
                    "already_exists",
                    "resource_exhausted",
                    "failed_precondition",
                    "aborted",
                    "out_of_range",
                    "unavailable",
                    "data_loss"
                ],
                "default": "no_internal_error"
            },
            "InternalErrorMessageResponse": {
                "type": "object",
                "example": {
                    "code": "internal_error",
                    "message": "Internal Server Error"
                },
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/InternalErrorCode"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "LikedDashboardPanels": {
                "type": "string",
                "enum": [
                    "LIKED_DASHBOARD_PANELS_TRANSACTIONS_UNSPECIFIED",
                    "LIKED_DASHBOARD_PANELS_TRANSACTIONS_OVERVIEW",
                    "LIKED_DASHBOARD_PANELS_INVESTMENT_SUMMARY",
                    "LIKED_DASHBOARD_PANELS_MONTHLY_SPENDING_REPORT",
                    "LIKED_DASHBOARD_PANELS_SAVINGS_TRACKER",
                    "LIKED_DASHBOARD_PANELS_CREDIT_SCORE_MONITOR"
                ],
                "default": "LIKED_DASHBOARD_PANELS_TRANSACTIONS_UNSPECIFIED"
            },
            "ListRolesResponse": {
                "type": "object",
                "properties": {
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "NotFoundErrorCode": {
                "type": "string",
                "enum": [
                    "no_not_found_error",
                    "undefined_endpoint",
                    "store_id_not_found",
                    "unimplemented"
                ],
                "default": "no_not_found_error"
            },
            "NotificationSettings": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "address id"
                    },
                    "notificationType": {
                        "$ref": "#/components/schemas/NotificationType"
                    },
                    "alerts": {
                        "type": "boolean",
                        "title": "True if user wants to be alerted for anomalies"
                    }
                }
            },
            "NotificationType": {
                "type": "string",
                "enum": [
                    "NOTIFICATION_TYPE_UNSPECIFIED",
                    "NOTIFICATION_TYPE_EMAIL",
                    "NOTIFICATION_TYPE_SMS",
                    "NOTIFICATION_TYPE_IN_APP",
                    "NOTIFICATION_TYPE_SLACK"
                ],
                "default": "NOTIFICATION_TYPE_UNSPECIFIED",
                "title": "- NOTIFICATION_TYPE_EMAIL: email based notification\n - NOTIFICATION_TYPE_SMS: sms based notification\n - NOTIFICATION_TYPE_IN_APP: app based notification\n - NOTIFICATION_TYPE_SLACK: slack based notification"
            },
            "PasswordResetWebhookResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "PasswordResetWebhookV2Response": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "PathUnknownErrorMessageResponse": {
                "type": "object",
                "example": {
                    "code": "undefined_endpoint",
                    "message": "Endpoint not enabled"
                },
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/NotFoundErrorCode"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "ProfileType": {
                "type": "string",
                "enum": [
                    "PROFILE_TYPE_UNSPECIFIED",
                    "PROFILE_TYPE_USER",
                    "PROFILE_TYPE_BUSINESS"
                ],
                "default": "PROFILE_TYPE_UNSPECIFIED",
                "title": "ProfileType: represents the type of account tied to a given profile"
            },
            "ReadynessCheckResponse": {
                "type": "object",
                "properties": {
                    "healthy": {
                        "type": "boolean"
                    }
                }
            },
            "RemoveUserFromTeamResponse": {
                "type": "object",
                "properties": {
                    "team": {
                        "$ref": "#/components/schemas/Team"
                    }
                }
            },
            "RiskToleranceSettings": {
                "type": "string",
                "enum": [
                    "RISK_TOLERANCE_SETTINGS_UNSPECIFIED",
                    "RISK_TOLERANCE_SETTINGS_LOW",
                    "RISK_TOLERANCE_SETTINGS_MEDIUM",
                    "RISK_TOLERANCE_SETTINGS_HIGH"
                ],
                "default": "RISK_TOLERANCE_SETTINGS_UNSPECIFIED",
                "description": "Risk Tolerance Investment preferences."
            },
            "Role": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "int64",
                        "description": "Unique identifier for the role."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the role."
                    },
                    "type": {
                        "$ref": "#/components/schemas/RoleType"
                    },
                    "canCreateUsers": {
                        "type": "boolean",
                        "description": "Permissions related to user management."
                    },
                    "canReadUsers": {
                        "type": "boolean"
                    },
                    "canUpdateUsers": {
                        "type": "boolean"
                    },
                    "canDeleteUsers": {
                        "type": "boolean"
                    },
                    "canCreateProjects": {
                        "type": "boolean",
                        "description": "Permissions related to project management."
                    },
                    "canReadProjects": {
                        "type": "boolean"
                    },
                    "canUpdateProjects": {
                        "type": "boolean"
                    },
                    "canDeleteProjects": {
                        "type": "boolean"
                    },
                    "canCreateReports": {
                        "type": "boolean",
                        "description": "Permissions related to report management."
                    },
                    "canReadReports": {
                        "type": "boolean"
                    },
                    "canUpdateReports": {
                        "type": "boolean"
                    },
                    "canDeleteReports": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Add more permissions as necessary for other modules or features.\nTimestamps for tracking creation and modification times."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "auditLog": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RoleAuditEvents"
                        },
                        "description": "Audit log for this role."
                    },
                    "team": {
                        "$ref": "#/components/schemas/Team"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserAccount"
                    },
                    "business": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    }
                },
                "description": "Role defines the role of a user in the system with specific permissions."
            },
            "RoleAuditEvents": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "int64"
                    },
                    "action": {
                        "$ref": "#/components/schemas/AuditAction"
                    },
                    "performedBy": {
                        "type": "string",
                        "title": "Identifier of the user who performed the action"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Time of the event"
                    },
                    "affectedFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specific fields that were changed (if applicable)",
                        "title": "Additional fields for enhanced auditing:"
                    },
                    "previousValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Values of those fields before the change"
                    },
                    "clientIp": {
                        "type": "string",
                        "title": "IP address of the client that initiated the change"
                    },
                    "userAgent": {
                        "type": "string",
                        "title": "User agent string of the client"
                    },
                    "context": {
                        "type": "string",
                        "title": "Additional context about the change (e.g., reason for change)"
                    }
                },
                "description": "RoleAuditEvents defines the audit record for any changes made to a role."
            },
            "RoleType": {
                "type": "string",
                "enum": [
                    "ROLE_TYPE_UNSPECIFIED",
                    "ROLE_TYPE_SUPER_ADMIN",
                    "ROLE_TYPE_TEAM_ADMIN",
                    "ROLE_TYPE_REGULAR"
                ],
                "default": "ROLE_TYPE_UNSPECIFIED",
                "description": "RoleType defines the different types of roles."
            },
            "Settings": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "address id"
                    },
                    "appTheme": {
                        "$ref": "#/components/schemas/ApplicationTheme"
                    },
                    "notificationSettings": {
                        "$ref": "#/components/schemas/NotificationSettings"
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "Language preference."
                    },
                    "riskTolerance": {
                        "$ref": "#/components/schemas/RiskToleranceSettings"
                    },
                    "likedDashboardPanels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LikedDashboardPanels"
                        },
                        "description": "Dashboard customization, e.g., specific widgets or reports."
                    },
                    "digitalWorkerSettings": {
                        "$ref": "#/components/schemas/DigitalWorkerSettings"
                    },
                    "financialPreferences": {
                        "$ref": "#/components/schemas/FinancialPreferences"
                    }
                },
                "description": "User settings for the fintech application."
            },
            "Status": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "message": {
                        "type": "string"
                    },
                    "details": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Any"
                        }
                    }
                }
            },
            "Tags": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "tag id"
                    },
                    "tagName": {
                        "type": "string",
                        "example": "testtagname",
                        "title": "name of tag\nvalidations: \n- cannot be empty\n- must be at least 3 characters long"
                    },
                    "tagDescription": {
                        "type": "string",
                        "example": "testtagdescription",
                        "title": "description of tag\nvalidations: \n- cannot be empty\n- must be at least 10 characters long"
                    },
                    "metadata": {
                        "type": "array",
                        "example": [
                            "testmetadata1",
                            "testmetadata2"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "title": "metadata associated with tag\nvalidations:\n- must provide between 1 and 10 metadata tags"
                    }
                },
                "title": "Tags: represents metadata tags associated to an account"
            },
            "Team": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "description": "Unique identifier for the team."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the team."
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the team."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tags"
                        },
                        "description": "Tags associated with the team."
                    },
                    "teamAdmin": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    },
                    "memberUsersAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserAccount"
                        },
                        "description": "Members of the team."
                    },
                    "memberBusinessAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessAccount"
                        },
                        "description": "Member business accounts of the team."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp for when the team was created."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp for when the team was last updated."
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    }
                },
                "description": "Team: represents a team within the context of solomon-ai."
            },
            "UpdateRoleResponse": {
                "type": "object",
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/Role"
                    }
                }
            },
            "UpdateTeamResponse": {
                "type": "object",
                "properties": {
                    "team": {
                        "$ref": "#/components/schemas/Team"
                    }
                }
            },
            "UpdateUserRequest": {
                "type": "object",
                "properties": {
                    "account": {
                        "$ref": "#/components/schemas/UserAccount"
                    }
                },
                "title": "UpdateUserRequest: Represents the request object invoked against the user\nservice to update a given user account",
                "required": [
                    "account"
                ]
            },
            "UpdateUserResponse": {
                "type": "object",
                "properties": {
                    "accountUpdated": {
                        "type": "boolean"
                    },
                    "account": {
                        "$ref": "#/components/schemas/UserAccount"
                    }
                },
                "title": "UpdateUserResponse: Represents the response object returned as a response to\nthe `update-user` request"
            },
            "UpdateUserV2Request": {
                "type": "object",
                "properties": {
                    "userAccount": {
                        "$ref": "#/components/schemas/UserAccount"
                    },
                    "businessAccount": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    }
                }
            },
            "UpdateUserV2Response": {
                "type": "object",
                "properties": {
                    "accountUpdated": {
                        "type": "boolean"
                    },
                    "userAccount": {
                        "$ref": "#/components/schemas/UserAccount"
                    },
                    "businessAccount": {
                        "$ref": "#/components/schemas/BusinessAccount"
                    }
                }
            },
            "UserAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "description": "Unique identifier for the account."
                    },
                    "email": {
                        "type": "string",
                        "example": "sample@example.com",
                        "description": "Email associated with the user account."
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "bio": {
                        "type": "string",
                        "description": "Brief description about the user, up to 200 characters."
                    },
                    "headline": {
                        "type": "string",
                        "description": "Short headline for the user's profile."
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "Phone number associated with the account."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tags"
                        },
                        "description": "Tags associated with the user account, between 1 and 10."
                    },
                    "authnAccountId": {
                        "type": "string",
                        "format": "uint64",
                        "description": "ID for the authentication service linked to this account."
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Indicates if the account is currently active."
                    },
                    "firstname": {
                        "type": "string",
                        "description": "User's first name."
                    },
                    "lastname": {
                        "type": "string",
                        "description": "User's last name."
                    },
                    "username": {
                        "type": "string",
                        "example": "testuser9696",
                        "description": "Username associated with the account, minimum of 10 characters."
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "Indicates if the account is set to private."
                    },
                    "isEmailVerified": {
                        "type": "boolean",
                        "description": "Indicates if the user's email has been verified."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp for when the account was created."
                    },
                    "verifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp for when the email was verified."
                    },
                    "settings": {
                        "$ref": "#/components/schemas/Settings"
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/ProfileType"
                    },
                    "profileImageUrl": {
                        "type": "string",
                        "description": "Profile image associated with the user account."
                    },
                    "auth0UserId": {
                        "type": "string",
                        "title": "Auth0 user id"
                    },
                    "algoliaUserId": {
                        "type": "string",
                        "title": "Algolia user id"
                    }
                },
                "description": "@brief Represents a user account in the context of simfinni."
            },
            "ValidationErrorMessageResponse": {
                "type": "object",
                "example": {
                    "code": "validation_error",
                    "message": "Generic validation error"
                },
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/ErrorCode"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "VerifyUserResponse": {
                "type": "object",
                "properties": {
                    "accountVerified": {
                        "type": "boolean"
                    }
                }
            },
            "VerifyUserV2Response": {
                "type": "object",
                "properties": {
                    "accountVerified": {
                        "type": "boolean"
                    }
                }
            },
            "AcceptFollowProfileResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                },
                "title": "AcceptFollowProfileRequestResponse: Represent the object returned as a\nresponse to the accept follow profile request"
            },
            "AccountType": {
                "type": "string",
                "enum": [
                    "ACCOUNT_TYPE_UNSPECIFIED",
                    "ACCOUNT_TYPE_USER",
                    "ACCOUNT_TYPE_COMMUNITY"
                ],
                "default": "ACCOUNT_TYPE_UNSPECIFIED",
                "title": "AccountType used to differ the type of profile an operation\nis being performed against"
            },
            "Actor": {
                "type": "object",
                "properties": {
                    "userProfile": {
                        "$ref": "#/components/schemas/UserProfile"
                    },
                    "community": {
                        "$ref": "#/components/schemas/CommunityProfile"
                    },
                    "actorType": {
                        "$ref": "#/components/schemas/AccountType"
                    }
                },
                "title": "Actor references the profile performing an operation",
                "required": [
                    "userProfile",
                    "community",
                    "actorType"
                ]
            },
            "AddCommentQualityScoreResponse": {
                "type": "object",
                "properties": {
                    "comment": {
                        "$ref": "#/components/schemas/Comment"
                    }
                }
            },
            "AddPostQualityScoreResponse": {
                "type": "object",
                "properties": {
                    "regularPost": {
                        "$ref": "#/components/schemas/Post"
                    },
                    "sharedPost": {
                        "$ref": "#/components/schemas/SharedPost"
                    },
                    "pollPost": {
                        "$ref": "#/components/schemas/PollPost"
                    }
                }
            },
            "AddPostToPublicationResponse": {
                "type": "object",
                "properties": {
                    "publication": {
                        "$ref": "#/components/schemas/Publication"
                    }
                }
            },
            "AddPostToThreadResponse": {
                "type": "object",
                "properties": {
                    "regularPost": {
                        "$ref": "#/components/schemas/Post"
                    },
                    "sharedPost": {
                        "$ref": "#/components/schemas/SharedPost"
                    },
                    "pollPost": {
                        "$ref": "#/components/schemas/PollPost"
                    }
                }
            },
            "AddPublicationEditorResponse": {
                "type": "object",
                "properties": {
                    "publication": {
                        "$ref": "#/components/schemas/Publication"
                    }
                }
            },
            "BaseTimeline": {
                "type": "object",
                "properties": {
                    "activities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FeedActivity"
                        }
                    }
                }
            },
            "BlockUserProfileResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                },
                "title": "BlockUserProfileResponse: Represents the object returned as a response to the\nblock user request"
            },
            "Bookmark": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "the id of the blocked record"
                    },
                    "postIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "publications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Publication"
                        }
                    }
                }
            },
            "BookmarkPostResponse": {
                "type": "object",
                "properties": {
                    "bookmark": {
                        "$ref": "#/components/schemas/Bookmark"
                    }
                }
            },
            "BookmarkPublicationResponse": {
                "type": "object",
                "properties": {
                    "bookmark": {
                        "$ref": "#/components/schemas/Bookmark"
                    }
                }
            },
            "Category": {
                "type": "string",
                "enum": [
                    "CATEGORY_UNSPECIFIED",
                    "CATEGORY_WORLD",
                    "CATEGORY_BUSINESS",
                    "CATEGORY_ECONOMICS",
                    "CATEGORY_FOREIGN_POLICY",
                    "CATEGORY_POLITICS",
                    "CATEGORY_TECHNOLOGY",
                    "CATEGORY_OTHER"
                ],
                "default": "CATEGORY_UNSPECIFIED"
            },
            "Comment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Comment ID\n@gotag: bson:\"_id,omitempty\""
                    },
                    "backendPlatformUserId": {
                        "type": "string",
                        "title": "Platform wide ID of the user creating the comment\n@gotag: bson:\"backendPlatformUserId\""
                    },
                    "profileId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "ID of either the user profile or the community profile creating the comment\n@gotag: bson:\"profileId\""
                    },
                    "media": {
                        "$ref": "#/components/schemas/Media"
                    },
                    "mentions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Profiles mentioned in the comment\n@gotag: bson:\"mentions\""
                    },
                    "hashtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Hashtags defined in the comment\n@gotag: bson:\"hashtags\""
                    },
                    "createdAt": {
                        "type": "string",
                        "title": "Time when the comment was created\n@gotag: bson:\"createdAt\""
                    },
                    "content": {
                        "type": "string",
                        "title": "Content defining the comment\n@gotag: bson:\"content\""
                    },
                    "replies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommentReply"
                        },
                        "title": "Responses to a given comment\n@gotag: bson:\"replies\""
                    },
                    "extra": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "title": "Blob of extra content tied to the comment\n@gotag: bson:\"extra\""
                    },
                    "authorUsername": {
                        "type": "string",
                        "example": "test-user",
                        "title": "Username of the person making the comment\n@gotag: bson:\"authorUsername\"",
                        "minLength": 1
                    },
                    "authorProfileImage": {
                        "type": "string",
                        "example": "test-user",
                        "title": "Profile image of the person making this comment\n@gotag: bson:\"authorProfileImage\"",
                        "minLength": 1
                    },
                    "affinityScore": {
                        "type": "string",
                        "format": "uint64",
                        "title": "AffinityScore is the average rating users on the platform associate with a\npiece of content. It is taken as the weighted average across all reactions\nfor the particular post\n@gotag: bson:\"affinityScore\""
                    },
                    "qualityScore": {
                        "type": "string",
                        "format": "uint64",
                        "title": "QualityScore is the quality of the given piece of content.\nIt is taken as the weighted average across all reactions for the particular\npost\n@gotag: bson:\"qualityScore\""
                    },
                    "userIdToAffinityScoreMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "title": "UserIDToAffinityScoreMap witholds a mapping of all user profiles who left\nan affinity score\n@gotag: bson:\"userIdToAffinityScoreMap\""
                    },
                    "userIdToReportsMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "title": "ReportCount details the number of reports were associated with a post\nA report is used as a signal to disclose the post's content are in\nviolation of platform rules\n@gotag: bson:\"userIdToReportsMap\""
                    },
                    "authorAccountType": {
                        "$ref": "#/components/schemas/AccountType"
                    },
                    "userIdToReactionMap": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Reaction"
                        },
                        "title": "a map of user ids to reactions left by users\n@gotag: bson:\"userIdToReactionMap\""
                    },
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Note"
                        },
                        "title": "the set of notes associated to this piece of content\n@gotag: bson:\"notes\""
                    }
                },
                "required": [
                    "authorUsername",
                    "authorProfileImage"
                ]
            },
            "CommentReply": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Response ID\n@gotag: bson:\"_id,omitempty\""
                    },
                    "backendPlatformUserId": {
                        "type": "string",
                        "title": "ID of the user creating the comment response\n@gotag: bson:\"backendPlatformUserId\""
                    },
                    "profileId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "ID of either the user profile or the community profile creating the comment response\n@gotag: bson:\"profileId\""
                    },
                    "media": {
                        "$ref": "#/components/schemas/Media"
                    },
                    "mentions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Profiles mentioned in the comment\n@gotag: bson:\"mentions\""
                    },
                    "hashtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Hashtags defined in the comment\n@gotag: bson:\"hashtags\""
                    },
                    "createdAt": {
                        "type": "string",
                        "title": "Time when the comment was created\n@gotag: bson:\"createdAt\""
                    },
                    "content": {
                        "type": "string",
                        "title": "Content defining the comment\n@gotag: bson:\"content\""
                    },
                    "extra": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "title": "Blob of extra content tied to the comment response\n@gotag: bson:\"extra\""
                    },
                    "authorUsername": {
                        "type": "string",
                        "example": "test-user",
                        "title": "Username of the person making the comment\n@gotag: bson:\"authorUsername\"",
                        "minLength": 1
                    },
                    "authorProfileImage": {
                        "type": "string",
                        "example": "test-user",
                        "title": "Profile image of the person making this comment\n@gotag: bson:\"authorProfileImage\"",
                        "minLength": 1
                    },
                    "affinityScore": {
                        "type": "string",
                        "format": "uint64",
                        "title": "AffinityScore is the average rating users on the platform associate with a\npiece of content. It is taken as the weighted average across all reactions\nfor the particular post\n@gotag: bson:\"affinityScore\""
                    },
                    "qualityScore": {
                        "type": "string",
                        "format": "uint64",
                        "title": "QualityScore is the quality of the given piece of content.\nIt is taken as the weighted average across all reactions for the particular\npost\n@gotag: bson:\"qualityScore\""
                    },
                    "userIdToAffinityScoreMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "title": "UserIDToAffinityScoreMap witholds a mapping of all user profiles who left\nan affinity score\n@gotag: bson:\"userIdToAffinityScoreMap\""
                    },
                    "authorAccountType": {
                        "$ref": "#/components/schemas/AccountType"
                    },
                    "userIdToReactionMap": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Reaction"
                        },
                        "title": "a map of user ids to reactions left by users\n@gotag: bson:\"userIdToReactionMap\""
                    },
                    "userIdToReportsMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "title": "the report count for this comment reply\n@gotag: bson:\"userIdToReportsMap\""
                    }
                },
                "required": [
                    "authorUsername",
                    "authorProfileImage"
                ]
            },
            "CommunityProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "Community profile ID"
                    },
                    "name": {
                        "type": "string",
                        "example": "test-community",
                        "title": "Community name is the name tied to the community profile\ncommunity name must be at least 5 characters long"
                    },
                    "description": {
                        "type": "string",
                        "example": "community description useful for generating a test community that we can test against. a community is really cool and ideal",
                        "title": "Desscription defines additional info about the community\ncommunity description must be at least 5 characters long"
                    },
                    "private": {
                        "type": "boolean",
                        "title": "Private defines wether only approved followers can see what this profile\nposts"
                    },
                    "visible": {
                        "type": "boolean",
                        "title": "Visible defines wether just about anyone can find this group"
                    },
                    "followers": {
                        "type": "string",
                        "format": "int64",
                        "title": "Followers outlines the number of followers this user profile has"
                    },
                    "communityRules": {
                        "type": "string",
                        "example": "community rules useful for generating a test community that we can test against. a community is really cool and ideal",
                        "title": "Defines rules community members must abide by\ncommunity rules must be at least 5 characters long"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Topic"
                        },
                        "title": "Defines topics assoociated with the community of interest\nmust create at least 1 topic"
                    },
                    "notificationFeedTimelineId": {
                        "type": "string",
                        "example": "asndlkhaskhdhasgdahsf-feed-id",
                        "title": "Notification timeline Id. Notification for anything a user/group is\nfollowing"
                    },
                    "personalFeedTimelineId": {
                        "type": "string",
                        "example": "asndlkhaskhdhasgdahsf-feed-id",
                        "title": "Personal timeline ID Has activities for a user that can be followed"
                    },
                    "newsFeedTimelineId": {
                        "type": "string",
                        "example": "asndlkhaskhdhasgdahsf-feed-id",
                        "title": "Newsfeed timeline ID Displays all followed and group activities the user\nfollows"
                    },
                    "profileImageUrl": {
                        "type": "string",
                        "example": "asndlkhaskhdhasgdahsf.jpg",
                        "title": "ProfileImageUrl witholds the url of a given profile image"
                    },
                    "algoliaId": {
                        "type": "string",
                        "example": "asndlkhaskhdhasgdahsf-feed-id",
                        "title": "The id of the algolia record referencing this community"
                    }
                },
                "title": "CommunityProfile: The profile object tied to a given community",
                "required": [
                    "name",
                    "description",
                    "private",
                    "visible",
                    "followers",
                    "communityRules",
                    "notificationFeedTimelineId",
                    "personalFeedTimelineId",
                    "newsFeedTimelineId",
                    "profileImageUrl",
                    "algoliaId"
                ]
            },
            "ContentInsights": {
                "type": "object",
                "properties": {
                    "sentenceCount": {
                        "type": "string",
                        "format": "uint64",
                        "example": 10
                    },
                    "wordCount": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "language": {
                        "type": "string"
                    },
                    "languageConfidence": {
                        "type": "number",
                        "format": "float"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Entities"
                        }
                    },
                    "sentiment": {
                        "$ref": "#/components/schemas/Sentiment"
                    }
                }
            },
            "CreateCommentReplyBody": {
                "type": "object",
                "properties": {
                    "reply": {
                        "$ref": "#/components/schemas/CommentReply"
                    },
                    "postType": {
                        "$ref": "#/components/schemas/PostType"
                    }
                },
                "required": [
                    "postType"
                ]
            },
            "CreateCommentReplyResponse": {
                "type": "object",
                "properties": {
                    "comment": {
                        "$ref": "#/components/schemas/Comment"
                    }
                }
            },
            "CreateCommentResponse": {
                "type": "object",
                "properties": {
                    "regularPost": {
                        "$ref": "#/components/schemas/Post"
                    },
                    "sharedPost": {
                        "$ref": "#/components/schemas/SharedPost"
                    },
                    "pollPost": {
                        "$ref": "#/components/schemas/PollPost"
                    }
                },
                "title": "CreateCommentResponse: Represent the object returned as a\nresponse to the create comment request"
            },
            "CreateCommunityProfileBody": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/CommunityProfile"
                    }
                },
                "title": "CreateCommunityProfileRequest: Represents the request object invoked against\nthe social service to create a community profile account",
                "required": [
                    "profile"
                ]
            },
            "CreateCommunityProfileResponse": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/CommunityProfile"
                    }
                },
                "title": "CreateCommunityProfileResponse: Represents the response object returned as a\nresponse to the `create-community` request"
            },
            "CreateNoteBody": {
                "type": "object",
                "properties": {
                    "postType": {
                        "$ref": "#/components/schemas/PostType"
                    },
                    "note": {
                        "$ref": "#/components/schemas/Note"
                    }
                },
                "required": [
                    "postType"
                ]
            },
            "CreateNoteResponse": {
                "type": "object",
                "properties": {
                    "regularPost": {
                        "$ref": "#/components/schemas/Post"
                    },
                    "sharedPost": {
                        "$ref": "#/components/schemas/SharedPost"
                    },
                    "pollPost": {
                        "$ref": "#/components/schemas/PollPost"
                    }
                }
            },
            "CreatePollResponse": {
                "type": "object",
                "properties": {
                    "pollId": {
                        "type": "string"
                    }
                }
            },
            "CreatePostResponse": {
                "type": "object",
                "properties": {
                    "post": {
                        "$ref": "#/components/schemas/Post"
                    }
                },
                "title": "CreatePostResponse: Represent the object returned as a\nresponse to the create post request"
            },
            "CreatePublicationResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    }
                }
            },
            "CreateTopicResponse": {
                "type": "object",
                "properties": {
                    "topicId": {
                        "type": "string",
                        "format": "uint64"
                    }
                },
                "title": "CreateTopicResponse: Represent the object returned as a response to the\ncreate topic request"
            },
            "CreateUserProfileRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "title": "the user ID trying to create this user profile (NOTE: userID refers to the\nID from the vantage point of the user service. This ID is the single source\nof truth for a given user across our suite of services) | type: uint64"
                    },
                    "idsOfCommunitiesToFollow": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "title": "the set of ids of community profiles to follow"
                    },
                    "username": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserTags"
                        }
                    },
                    "isPrivate": {
                        "type": "boolean"
                    },
                    "profileImageUrl": {
                        "type": "string"
                    }
                },
                "title": "CreateUserProfileRequest: Represents the request object invoked against the\nsocial service to create a user profile account",
                "required": [
                    "userId",
                    "username",
                    "tags",
                    "profileImageUrl"
                ]
            },
            "CreateUserProfileResponse": {
                "type": "object",
                "properties": {
                    "virtualProfileId": {
                        "type": "string",
                        "format": "uint64"
                    }
                },
                "title": "CreateUserProfileResponse: Represents the response object returned as a\nresponse to the `create-user` request"
            },
            "DeleteCommentReplyResponse": {
                "type": "object",
                "properties": {
                    "comment": {
                        "$ref": "#/components/schemas/Comment"
                    }
                }
            },
            "DeleteCommentResponse": {
                "type": "object",
                "properties": {
                    "sucess": {
                        "type": "boolean"
                    }
                },
                "title": "DeleteCommentResponse: Represent the object returned as a\nresponse to the delete comment request"
            },
            "DeleteCommunityProfileResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                },
                "title": "DeleteCommunityProfileResponse: Represent the response object returned as a response\nto the `delete profile` and `delete-community` request"
            },
            "DeleteNoteResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "DeletePollResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "DeletePostFromPublicationResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "DeletePostResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                },
                "title": "DeletePostResponse: Represent the object returned as a\nresponse to the delete post request"
            },
            "DeletePublicationEditorResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "DeletePublicationResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "DeleteUserProfileResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                },
                "title": "DeleteUserProfileResponse: Represent the response object returned as a response\nto the `delete profile` and `delete-community` request"
            },
            "DiscoverProfilesResponse": {
                "type": "object",
                "properties": {
                    "communityProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommunityProfile"
                        }
                    },
                    "userProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserProfile"
                        }
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Topic"
                        }
                    }
                }
            },
            "EditCommentReplyBody": {
                "type": "object",
                "properties": {
                    "reply": {
                        "$ref": "#/components/schemas/CommentReply"
                    },
                    "postType": {
                        "$ref": "#/components/schemas/PostType"
                    }
                },
                "required": [
                    "postType"
                ]
            },
            "EditCommentReplyResponse": {
                "type": "object",
                "properties": {
                    "reply": {
                        "$ref": "#/components/schemas/CommentReply"
                    }
                }
            },
            "EditCommunityProfileRequest": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/CommunityProfile"
                    },
                    "userId": {
                        "type": "string",
                        "title": "the user ID trying to update this community profile (NOTE: userID refers to\nthe ID from the vantage point of the user service. This ID is the single\nsource of truth for a given user across our suite of services) | type:\nuint64"
                    },
                    "communityProfileId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The community profile ID of the community being updated | type: uint64"
                    }
                },
                "title": "EditCommunityProfileRequest: Represents the request object invoked against\nthe social service to update a community profile account",
                "required": [
                    "profile",
                    "userId",
                    "communityProfileId"
                ]
            },
            "EditCommunityProfileResponse": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/CommunityProfile"
                    }
                },
                "title": "UpdateCommunityProfileResponse: Represents the object returned as a response\nto `update-commmunity-profile` request"
            },
            "EditNoteResponse": {
                "type": "object",
                "properties": {
                    "regularPost": {
                        "$ref": "#/components/schemas/Post"
                    },
                    "sharedPost": {
                        "$ref": "#/components/schemas/SharedPost"
                    },
                    "pollPost": {
                        "$ref": "#/components/schemas/PollPost"
                    }
                }
            },
            "EditPostResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                },
                "title": "EditPostResponse: Represent the object returned as a\nresponse to the update post request"
            },
            "EditUserProfileResponse": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/UserProfile"
                    }
                },
                "title": "EditUserProfileResponse: Represents the object returned as a response to\n`update-user-profile` request"
            },
            "Entities": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    }
                }
            },
            "FeedActivity": {
                "type": "object",
                "properties": {
                    "actor": {
                        "$ref": "#/components/schemas/Actor"
                    },
                    "verb": {
                        "$ref": "#/components/schemas/PostType"
                    },
                    "regularPost": {
                        "$ref": "#/components/schemas/Post"
                    },
                    "sharedPost": {
                        "$ref": "#/components/schemas/SharedPost"
                    },
                    "pollPost": {
                        "$ref": "#/components/schemas/PollPost"
                    },
                    "foreignId": {
                        "type": "string",
                        "title": "ForeignID is used as a reference identifier between our datastore\nand getstream"
                    },
                    "target": {
                        "type": "string",
                        "description": "Object\tDescribes the target of the activity. The precise meaning of the\nactivity's target is dependent on the activities verb, but will often be\nthe object the English preposition \"to\". For instance, in the activity,\n\"John saved a movie to his wishlist\", the target of the activity is\n\"wishlist\"."
                    },
                    "time": {
                        "type": "string",
                        "title": "Time is the time this activity was created at"
                    },
                    "origin": {
                        "type": "string"
                    },
                    "to": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The TO field allows you to specify a list of feeds to which the activity\nshould be copied. One way to think about it is as the CC functionality of\nemail."
                    },
                    "score": {
                        "type": "string",
                        "format": "uint64",
                        "title": "Score associated to an activity"
                    },
                    "extra": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "title": "Extra encompasses any additional activity metadata"
                    },
                    "getstreamActivityId": {
                        "type": "string",
                        "title": "The ID of the activity from the context of getstream"
                    }
                },
                "title": "FeedActivity references an actvitiy present in a given user's timeline",
                "required": [
                    "actor",
                    "getstreamActivityId"
                ]
            },
            "FeedType": {
                "type": "string",
                "enum": [
                    "FEED_TYPE_UNSPECIFIED",
                    "FEED_TYPE_PERSONAL",
                    "FEED_TYPE_NEWS",
                    "FEED_TYPE_NOTIFICATION"
                ],
                "default": "FEED_TYPE_UNSPECIFIED",
                "description": "FeedType encompasses the various types of feeds a profile can have\n(in conjuction) with getstream.\n\n - FEED_TYPE_PERSONAL: UserFeed is a profile's personal feed\n - FEED_TYPE_NEWS: NewsFeed is a profile's timeline\n - FEED_TYPE_NOTIFICATION: NotificationFeed encompasses a profile's notification feed"
            },
            "FollowCommunityProfileResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                },
                "title": "FollowProfileResponse: Represent the object returned as a response to the\nfollow profile user request"
            },
            "FollowProfileResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                },
                "title": "FollowProfileResponse: Represent the object returned as a response to the\nfollow profile user request"
            },
            "GetAccountsFollowingResponse": {
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserProfile"
                        }
                    },
                    "communities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommunityProfile"
                        }
                    }
                }
            },
            "GetBlogPostsByTagResponse": {
                "type": "object",
                "properties": {
                    "posts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Post"
                        }
                    }
                }
            },
            "GetBookmarkedPostsResponse": {
                "type": "object",
                "properties": {
                    "posts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Post"
                        }
                    }
                }
            },
            "GetCommentRepliesResponse": {
                "type": "object",
                "properties": {
                    "replies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommentReply"
                        }
                    }
                }
            },
            "GetCommunitiesUserFollowsResponse": {
                "type": "object",
                "properties": {
                    "communities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommunityProfile"
                        }
                    }
                },
                "title": "GetCommunitiesUserFollowsResponse: Represent the response object invoked\nagainst the social service to get all the communities a given user follows"
            },
            "GetCommunityBlogPostsResponse": {
                "type": "object",
                "properties": {
                    "posts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Post"
                        }
                    }
                }
            },
            "GetCommunityFeedResponse": {
                "type": "object",
                "properties": {
                    "baseTimeline": {
                        "$ref": "#/components/schemas/BaseTimeline"
                    },
                    "notificationTimeline": {
                        "$ref": "#/components/schemas/NotificationTimeline"
                    },
                    "nextPageToken": {
                        "type": "string"
                    }
                },
                "title": "GetCommunityFeedResponse: Represent the object returned as a\nresponse to the get community feed request"
            },
            "GetCommunityProfileResponse": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/CommunityProfile"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/SocialRelationshipMetadata"
                    }
                },
                "title": "GetCommunityProfileResponse: Represents the object returned as a response to\n`get-commmunity-profile` request"
            },
            "GetCommunityProfilesResponse": {
                "type": "object",
                "properties": {
                    "nextPageNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "profiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CommunityProfile"
                        }
                    }
                }
            },
            "GetFollowersResponse": {
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserProfile"
                        }
                    }
                }
            },
            "GetPendingFollowsResponse": {
                "type": "object",
                "properties": {
                    "requests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PendingFollowRequest"
                        }
                    }
                },
                "title": "GetPendingFollowRequestsResponse: Represent the response object invoked\nagainst the social service to get all pending follow requests tied to a user"
            },
            "GetPollResponse": {
                "type": "object",
                "properties": {
                    "poll": {
                        "$ref": "#/components/schemas/PollPost"
                    }
                }
            },
            "GetPollsResponse": {
                "type": "object",
                "properties": {
                    "polls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PollPost"
                        }
                    }
                }
            },
            "GetPostResponse": {
                "type": "object",
                "properties": {
                    "post": {
                        "$ref": "#/components/schemas/Post"
                    }
                },
                "title": "GetPostResponse: Represent the object returned as a\nresponse to the get post request"
            },
            "GetPostThreadResponse": {
                "type": "object",
                "properties": {
                    "posts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Post"
                        }
                    }
                }
            },
            "GetPostsByCategoryResponse": {
                "type": "object",
                "properties": {
                    "posts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Post"
                        }
                    },
                    "nextOffset": {
                        "type": "string",
                        "format": "uint64"
                    }
                }
            },
            "GetPostsByTopicResponse": {
                "type": "object",
                "properties": {
                    "posts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Post"
                        }
                    }
                },
                "title": "GetPostsByTopicResponse: Represent the object returned as a\nresponse to the get posts by topic request"
            },
            "GetPostsResponse": {
                "type": "object",
                "properties": {
                    "posts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Post"
                        }
                    }
                }
            },
            "GetPublicationResponse": {
                "type": "object",
                "properties": {
                    "publication": {
                        "$ref": "#/components/schemas/Publication"
                    }
                }
            },
            "GetTopicsOfCommunitiesUserFollowsResponse": {
                "type": "object",
                "properties": {
                    "topic": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Topic"
                        }
                    }
                },
                "title": "GetTopicsOfCommunitiesUserFollowsResponse: Represent the response object\ninvoked against the social service to get all the communities a given user\nfollows"
            },
            "GetUserFeedResponse": {
                "type": "object",
                "properties": {
                    "baseTimeline": {
                        "$ref": "#/components/schemas/BaseTimeline"
                    },
                    "notificationTimeline": {
                        "$ref": "#/components/schemas/NotificationTimeline"
                    },
                    "nextPageToken": {
                        "type": "string"
                    }
                },
                "title": "GetUserFeedResponse: Represent the object returned as a\nresponse to the get user feed request"
            },
            "GetUserProfileResponse": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/UserProfile"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/SocialRelationshipMetadata"
                    }
                },
                "title": "GetUserProfileResponse: Represents the object returned as a response to\n`get-user-profile` request"
            },
            "GetUserProfilesResponse": {
                "type": "object",
                "properties": {
                    "nextPageNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "profiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserProfile"
                        }
                    }
                }
            },
            "HealthCheckResponse1": {
                "type": "object",
                "properties": {
                    "healthy": {
                        "type": "boolean"
                    }
                },
                "title": "ServiceHealthResponse: Represent the object returned as a response to the\nservice health api invocation"
            },
            "Media": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "link": {
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/MediaMetadata"
                    }
                }
            },
            "MediaCrop": {
                "type": "string",
                "enum": [
                    "MEDIA_CROP_UNSPECIFIED",
                    "MEDIA_CROP_TOP",
                    "MEDIA_CROP_BOTTOM",
                    "MEDIA_CROP_LEFT",
                    "MEDIA_CROP_RIGHT",
                    "MEDIA_CROP_CENTER"
                ],
                "default": "MEDIA_CROP_UNSPECIFIED"
            },
            "MediaMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "resize": {
                        "$ref": "#/components/schemas/MediaResize"
                    },
                    "crop": {
                        "$ref": "#/components/schemas/MediaCrop"
                    },
                    "imageWidth": {
                        "type": "string",
                        "format": "int64"
                    },
                    "imageHeight": {
                        "type": "string",
                        "format": "int64"
                    },
                    "type": {
                        "$ref": "#/components/schemas/MediaType"
                    }
                }
            },
            "MediaResize": {
                "type": "string",
                "enum": [
                    "MEDIA_RESIZE_UNSPECIFIED",
                    "MEDIA_RESIZE_CLIP",
                    "MEDIA_RESIZE_CROP",
                    "MEDIA_RESIZE_SCALE"
                ],
                "default": "MEDIA_RESIZE_UNSPECIFIED"
            },
            "MediaType": {
                "type": "string",
                "enum": [
                    "MEDIA_TYPE_UNSPECIFIED",
                    "MEDIA_TYPE_IMAGE",
                    "MEDIA_TYPE_VIDEO"
                ],
                "default": "MEDIA_TYPE_UNSPECIFIED"
            },
            "Note": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Note ID\n@gotag: bson:\"_id,omitempty\""
                    },
                    "backendPlatformUserId": {
                        "type": "string",
                        "title": "Platform wide ID of the user creating the note\n@gotag: bson:\"backendPlatformUserId\""
                    },
                    "profileId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "ID of either the user profile or the community profile creating the note\n@gotag: bson:\"profileId\""
                    },
                    "media": {
                        "$ref": "#/components/schemas/Media"
                    },
                    "mentions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Profiles mentioned in the note - NOTE: only the creator of the article whom this\nnote is attached to and the mentioned members will be notified. Additionally, this note\nwill only be viewable by those folks\n@gotag: bson:\"mentions\""
                    },
                    "hashtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Hashtags defined in the note\n@gotag: bson:\"hashtags\""
                    },
                    "createdAt": {
                        "type": "string",
                        "title": "Time when the note was created\n@gotag: bson:\"createdAt\""
                    },
                    "content": {
                        "type": "string",
                        "title": "Content defining the note\n@gotag: bson:\"content\""
                    },
                    "authorAccountType": {
                        "$ref": "#/components/schemas/AccountType"
                    },
                    "authorUserName": {
                        "type": "string",
                        "title": "Username of the person making the note\n@gotag: bson:\"authorUserName\""
                    },
                    "authorProfileImage": {
                        "type": "string",
                        "title": "Profile image of the person making this note\n@gotag: bson:\"authorProfileImage\""
                    }
                },
                "title": "A note is a response a user can leave on another user's piece of content. Notes can\nonly be seen by the user who created the content (private) and should serve as some form of\nintimate feedback protocol",
                "required": [
                    "content",
                    "authorUserName",
                    "authorProfileImage"
                ]
            },
            "NotificationActivity": {
                "type": "object",
                "properties": {
                    "actorName": {
                        "type": "string"
                    },
                    "foreignId": {
                        "type": "string"
                    },
                    "activityId": {
                        "type": "string"
                    },
                    "verb": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string"
                    },
                    "target": {
                        "type": "string"
                    },
                    "origin": {
                        "type": "string"
                    },
                    "object": {
                        "type": "string"
                    }
                }
            },
            "NotificationFeedGroup": {
                "type": "object",
                "properties": {
                    "activityCount": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "actorCount": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "group": {
                        "type": "string"
                    },
                    "feedGroupId": {
                        "type": "string"
                    },
                    "isRead": {
                        "type": "boolean"
                    },
                    "isSeen": {
                        "type": "boolean"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "verb": {
                        "type": "string"
                    },
                    "activities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationActivity"
                        }
                    }
                }
            },
            "NotificationTimeline": {
                "type": "object",
                "properties": {
                    "activities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NotificationFeedGroup"
                        }
                    }
                }
            },
            "PendingFollowRequest": {
                "type": "object",
                "properties": {
                    "followRequestId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The ID of the follow request"
                    },
                    "followerRequestionToFollow": {
                        "$ref": "#/components/schemas/UserProfile"
                    },
                    "createdAt": {
                        "type": "string",
                        "title": "The time the follow request originated"
                    }
                },
                "title": "PendingFollowRequest defines the record describing the given pending follow\nrelationship",
                "required": [
                    "followerRequestionToFollow",
                    "createdAt"
                ]
            },
            "PollPost": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Post ID\n@gotag: bson:\"_id,omitempty\""
                    },
                    "createdAt": {
                        "type": "string",
                        "title": "Time post was created at\n@gotag: bson:\"createdAt\""
                    },
                    "action": {
                        "$ref": "#/components/schemas/PostType"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content is the content the post witholds\nContent is a string of text that is at least 5 characters long\n@gotag: bson:\"content\""
                    },
                    "mentions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Profiles mentioned in the post\n@gotag: bson:\"mentions\""
                    },
                    "hashtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Hashtags defined in the post\n@gotag: bson:\"hashtags\""
                    },
                    "media": {
                        "$ref": "#/components/schemas/Media"
                    },
                    "extra": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "title": "Blob of extra content tied to the post\n@gotag: bson:\"extra\""
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        },
                        "title": "Comments tied to the post\n@gotag: bson:\"comments\""
                    },
                    "backendPlatformUserId": {
                        "type": "string",
                        "title": "ID of the user creating the post\n@gotag: bson:\"backendPlatformUserId\""
                    },
                    "profileId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "ID of the profile creating the post\n@gotag: bson:\"profileId\""
                    },
                    "title": {
                        "type": "string",
                        "title": "Title of the post\n@gotag: bson:\"title\""
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Tags associated with the post\n@gotag: bson:\"tags\""
                    },
                    "topicName": {
                        "type": "string",
                        "title": "The topic to which this post is currently associated to. For non-community\nprofiles, posts are not associated to any topic. However for the commmunity\ncase, posts are associated to topic\n@gotag: bson:\"topicName\""
                    },
                    "authorUsername": {
                        "type": "string",
                        "title": "Username of the person making the comment\n@gotag: bson:\"authorUsername\""
                    },
                    "authorProfileImage": {
                        "type": "string",
                        "title": "Profile image of the person making this comment\n@gotag: bson:\"authorProfileImage\""
                    },
                    "affinityScore": {
                        "type": "string",
                        "format": "uint64",
                        "title": "AffinityScore is the average rating users on the platform associate with a\npiece of content. It is taken as the weighted average across all reactions\nfor the particular post\n@gotag: bson:\"affinityScore\""
                    },
                    "qualityScore": {
                        "type": "string",
                        "format": "uint64",
                        "title": "QualityScore is the quality of the given piece of content.\nIt is taken as the weighted average across all reactions for the particular\npost\n@gotag: bson:\"qualityScore\""
                    },
                    "userIdToAffinityScoreMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "title": "UserIDToAffinityScoreMap witholds a mapping of all user profiles who left\nan affinity score\n@gotag: bson:\"userIdToAffinityScoreMap\""
                    },
                    "insights": {
                        "$ref": "#/components/schemas/ContentInsights"
                    },
                    "userIdToReportsMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "title": "ReportCount details the number of reports were associated with a post\nA report is used as a signal to disclose the post's content are in\nviolation of platform rules\n@gotag: bson:\"userIdToReportsMap\""
                    },
                    "backgroundImageUrl": {
                        "type": "string",
                        "title": "BackgroundImageUrl signifies an image to associate to a post object.\nSuch urls are only associated when a post is an article or short story\n@gotag: bson:\"backgroundImageUrl\""
                    },
                    "authorAccountType": {
                        "$ref": "#/components/schemas/AccountType"
                    },
                    "userIdToPollResponsesMap": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/PollResponse"
                        },
                        "title": "A hash map of user ids to poll responses left by users\n@gotag: bson:\"userIdToPollResponseMap\""
                    },
                    "pollOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "the set of options the poll witholds\n@gotag: bson:\"pollOptions\""
                    },
                    "pollDistribution": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "number",
                            "format": "double"
                        },
                        "title": "the distribution of poll responses (in percentage form)\n@gotag: bson:\"pollDistribution\""
                    },
                    "pollEndDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "the end date of the given poll\n@gotag: bson:\"pollEndDate\""
                    },
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Note"
                        },
                        "title": "the set of notes associated to this piece of content\n@gotag: bson:\"notes\""
                    },
                    "thread": {
                        "$ref": "#/components/schemas/Thread"
                    },
                    "threadParticipantType": {
                        "$ref": "#/components/schemas/ThreadParticipantType"
                    },
                    "userIdToReactionMap": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Reaction"
                        },
                        "title": "a map of user ids to reactions left by users\n@gotag: bson:\"userIdToReactionMap\""
                    },
                    "category": {
                        "$ref": "#/components/schemas/Category"
                    }
                },
                "required": [
                    "action",
                    "content",
                    "pollOptions"
                ]
            },
            "PollResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "the id of the poll response\n@gotag: bson:\"_id,omitempty\""
                    },
                    "userId": {
                        "type": "string",
                        "title": "the user id who left the poll response\n@gotag: bson:\"userId\""
                    },
                    "responseValue": {
                        "type": "string",
                        "title": "the actual poll response left by the user\n@gotag: bson:\"responseValue\""
                    },
                    "responseIdx": {
                        "type": "string",
                        "format": "uint64",
                        "title": "the index of the given response\n@gotag: bson:\"responseIdx\""
                    }
                }
            },
            "Post": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Post ID\n@gotag: bson:\"_id,omitempty\""
                    },
                    "createdAt": {
                        "type": "string",
                        "title": "Time post was created at\n@gotag: bson:\"createdAt\""
                    },
                    "action": {
                        "$ref": "#/components/schemas/PostType"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content is the content the post witholds\nContent is a string of text that is at least 5 characters long\n@gotag: bson:\"content\""
                    },
                    "mentions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Profiles mentioned in the post\n@gotag: bson:\"mentions\""
                    },
                    "hashtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Hashtags defined in the post\n@gotag: bson:\"hashtags\""
                    },
                    "media": {
                        "$ref": "#/components/schemas/Media"
                    },
                    "extra": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "title": "Blob of extra content tied to the post\n@gotag: bson:\"extra\""
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        },
                        "title": "Comments tied to the post\n@gotag: bson:\"comments\""
                    },
                    "backendPlatformUserId": {
                        "type": "string",
                        "title": "ID of the user creating the post\n@gotag: bson:\"backendPlatformUserId\""
                    },
                    "profileId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "@gotag: bson:\"profileId\""
                    },
                    "title": {
                        "type": "string",
                        "title": "@gotag: bson:\"title\""
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "@gotag: bson:\"tags\""
                    },
                    "topicName": {
                        "type": "string",
                        "title": "The topic to which this post is currently associated to. For non-community\nprofiles, posts are not associated to any topic. However for the commmunity\ncase, posts are associated to topic\n@gotag: bson:\"topicName\""
                    },
                    "authorUsername": {
                        "type": "string",
                        "title": "Username of the person making the comment\n@gotag: bson:\"authorUsername\""
                    },
                    "authorProfileImage": {
                        "type": "string",
                        "title": "Profile image of the person making this comment\n@gotag: bson:\"authorProfileImage\""
                    },
                    "affinityScore": {
                        "type": "string",
                        "format": "uint64",
                        "title": "AffinityScore is the average rating users on the platform associate with a\npiece of content. It is taken as the weighted average across all reactions\nfor the particular post\n@gotag: bson:\"affinityScore\""
                    },
                    "qualityScore": {
                        "type": "string",
                        "format": "uint64",
                        "title": "QualityScore is the quality of the given piece of content.\n@gotag: bson:\"qualityScore\""
                    },
                    "userIdToAffinityScoreMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "title": "UserIDToAffinityScoreMap witholds a mapping of all user profiles who left\nan affinity score\n@gotag: bson:\"userIdToAffinityScoreMap\""
                    },
                    "insights": {
                        "$ref": "#/components/schemas/ContentInsights"
                    },
                    "userIdToReportsMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "title": "ReportCount details the number of reports were associated with a post\nA report is used as a signal to disclose the post's content are in\nviolation of platform rules\n@gotag: bson:\"userIdToReportsMap\""
                    },
                    "readingTime": {
                        "type": "string",
                        "title": "ReadingTime outlines the number of minutes it would take to read the\ncontents of this post\n@gotag: bson:\"readingTime\""
                    },
                    "backgroundImageUrl": {
                        "type": "string",
                        "title": "BackgroundImageUrl signifies an image to associate to a post object.\nSuch urls are only associated when a post is an article or short story\n@gotag: bson:\"backgroundImageUrl\""
                    },
                    "authorAccountType": {
                        "$ref": "#/components/schemas/AccountType"
                    },
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Note"
                        },
                        "title": "the set of notes associated to this piece of content\n@gotag: bson:\"notes\""
                    },
                    "thread": {
                        "$ref": "#/components/schemas/Thread"
                    },
                    "threadParticipantType": {
                        "$ref": "#/components/schemas/ThreadParticipantType"
                    },
                    "userIdToReactionMap": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Reaction"
                        },
                        "title": "a map of user ids to reactions left by users\n@gotag: bson:\"userIdToReactionMap\""
                    },
                    "aiGeneratedQuestionResponse": {
                        "type": "string",
                        "title": "if the post is a question, this field will hold the response to the question by the ai\n@gotag: bson:\"aiGeneratedQuestionResponse\""
                    },
                    "category": {
                        "$ref": "#/components/schemas/Category"
                    }
                },
                "title": "Posts: Critical to activities and define the content sent over by users and\ncommunities",
                "required": [
                    "action",
                    "content"
                ]
            },
            "PostType": {
                "type": "string",
                "enum": [
                    "POST_TYPE_UNSPECIFIED",
                    "POST_TYPE_POST",
                    "POST_TYPE_REPOST",
                    "POST_TYPE_QUESTION",
                    "POST_TYPE_ACHIEVEMENT",
                    "POST_TYPE_ANNOUNCEMENT",
                    "POST_TYPE_POLL",
                    "POST_TYPE_ARTICLE",
                    "POST_TYPE_SHORT_STORY"
                ],
                "default": "POST_TYPE_UNSPECIFIED",
                "title": "PostType defines the type of content present in a post"
            },
            "Publication": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "postIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "stories are post that can be submitted only by the publication editors"
                    },
                    "admin": {
                        "$ref": "#/components/schemas/UserProfile"
                    },
                    "adminBackendPlatformUserId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "editors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserProfile"
                        }
                    },
                    "subjects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/PublicationType"
                    },
                    "publicationName": {
                        "type": "string"
                    }
                },
                "description": "Use Case\n- An online magazine, a publication with a fixed publication staff that posts stories around a specific topic\n- A community publication, a publication that accepts stories published around Medium\n- A company blog, a publication that is created specifically to share company news\n- A collection of individual stories by a single author that are parts of a larger whole",
                "title": "A Publication is a collections of stories based around a common theme. Anyone can create them\nAs the creator of a publication, you're an editor by default, which means you have the ability to\na) add writers to your publication,\nb) edit and publish the stories that are submitted by your writers, and\nc) review the metrics for all of the stories that are part of your publication.\nAs the publication's creator, you'll also have the ability\nto appoint new editors (so they can do all of that stuff I just mentioned)",
                "required": [
                    "adminBackendPlatformUserId",
                    "tags",
                    "subjects",
                    "type",
                    "publicationName"
                ]
            },
            "PublicationType": {
                "type": "string",
                "enum": [
                    "PUBLICATION_TYPE_UNSPECIFIED",
                    "PUBLICATION_TYPE_MAGAZINE",
                    "PUBLICATION_TYPE_PLATFORM",
                    "PUBLICATION_TYPE_BLOG",
                    "PUBLICATION_TYPE_SUBJECTS"
                ],
                "default": "PUBLICATION_TYPE_UNSPECIFIED",
                "title": "- PUBLICATION_TYPE_MAGAZINE: a publication with a fixed publication staff that posts stories around a specific topic\n - PUBLICATION_TYPE_PLATFORM: a publication that accepts stories published around solomon\n - PUBLICATION_TYPE_BLOG: A community blog, a publication that is created specifically to share subset (community) news\n - PUBLICATION_TYPE_SUBJECTS: A collection of individual stories by a set of authors that are part of a whole"
            },
            "ReactToCommentReplyResponse": {
                "type": "object",
                "properties": {
                    "reply": {
                        "$ref": "#/components/schemas/CommentReply"
                    }
                }
            },
            "ReactToCommentResponse": {
                "type": "object",
                "properties": {
                    "comment": {
                        "$ref": "#/components/schemas/Comment"
                    }
                }
            },
            "ReactToPostResponse": {
                "type": "object",
                "properties": {
                    "regularPost": {
                        "$ref": "#/components/schemas/Post"
                    },
                    "sharedPost": {
                        "$ref": "#/components/schemas/SharedPost"
                    },
                    "pollPost": {
                        "$ref": "#/components/schemas/PollPost"
                    }
                }
            },
            "Reaction": {
                "type": "string",
                "enum": [
                    "REACTION_UNSPECIFIED",
                    "REACTION_LIKE",
                    "REACTION_LOVE",
                    "REACTION_HAHA",
                    "REACTION_WOW",
                    "REACTION_SAD",
                    "REACTION_ANGRY",
                    "REACTION_DISLIKE"
                ],
                "default": "REACTION_UNSPECIFIED"
            },
            "ReadynessCheckResponse1": {
                "type": "object",
                "properties": {
                    "ready": {
                        "type": "boolean"
                    }
                },
                "title": "ReadynessCheckResponse Represents a request invoked against the social service for the\nreadyness check response"
            },
            "RemoveBookmarkedPostResponse": {
                "type": "object",
                "properties": {
                    "bookmark": {
                        "$ref": "#/components/schemas/Bookmark"
                    }
                }
            },
            "RemoveBookmarkedPublicationResponse": {
                "type": "object",
                "properties": {
                    "bookmark": {
                        "$ref": "#/components/schemas/Bookmark"
                    }
                }
            },
            "RemovePostFromThreadResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "ReportCommentBody": {
                "type": "object",
                "properties": {
                    "postType": {
                        "$ref": "#/components/schemas/PostType"
                    }
                },
                "title": "ReportCommentRequest: Represents the request object invoked against the\nsocial service to report a comment",
                "required": [
                    "postType"
                ]
            },
            "ReportCommentReplyBody": {
                "type": "object",
                "properties": {
                    "postType": {
                        "$ref": "#/components/schemas/PostType"
                    }
                },
                "required": [
                    "postType"
                ]
            },
            "ReportCommentReplyResponse": {
                "type": "object",
                "properties": {
                    "reply": {
                        "$ref": "#/components/schemas/CommentReply"
                    }
                }
            },
            "ReportCommentResponse": {
                "type": "object",
                "properties": {
                    "comment": {
                        "$ref": "#/components/schemas/Comment"
                    }
                }
            },
            "ReportPostResponse": {
                "type": "object",
                "properties": {
                    "post": {
                        "$ref": "#/components/schemas/Post"
                    }
                },
                "title": "ReportPostResponse: Represent the object returned as a\nresponse to the report post request"
            },
            "RespondToPollBody": {
                "type": "object",
                "properties": {
                    "pollOption": {
                        "type": "string",
                        "title": "the poll option the user is responding with"
                    },
                    "pollOptionIdx": {
                        "type": "string",
                        "format": "uint64",
                        "title": "the index of the poll option the user is responding with"
                    }
                },
                "required": [
                    "pollOption",
                    "pollOptionIdx"
                ]
            },
            "RespondToPollResponse": {
                "type": "object",
                "properties": {
                    "poll": {
                        "$ref": "#/components/schemas/PollPost"
                    }
                }
            },
            "Sentiment": {
                "type": "object",
                "properties": {
                    "negative": {
                        "type": "number",
                        "format": "float",
                        "example": 30
                    },
                    "neutral": {
                        "type": "number",
                        "format": "float",
                        "example": 50
                    },
                    "positive": {
                        "type": "number",
                        "format": "float",
                        "example": 89
                    },
                    "compound": {
                        "type": "number",
                        "format": "float",
                        "example": 93
                    }
                }
            },
            "SharePostResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "SharedPost": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "RePost ID\n@gotag: bson:\"_id,omitempty\""
                    },
                    "originalPostId": {
                        "type": "string",
                        "example": "test-user",
                        "title": "Original Post ID\n@gotag: bson:\"originalPostId\"",
                        "minLength": 1
                    },
                    "originalAuthorUsername": {
                        "type": "string",
                        "title": "The username of the original author\n@gotag: bson:\"originalAuthorUsername\""
                    },
                    "createdAt": {
                        "type": "string",
                        "title": "Time post was created at\n@gotag: bson:\"createdAt\""
                    },
                    "content": {
                        "type": "string",
                        "title": "Content is the content the post witholds\nContent is a string of text that is at least 5 characters long\n@gotag: bson:\"content\""
                    },
                    "mentions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Profiles mentioned in the post\n@gotag: bson:\"mentions\""
                    },
                    "hashtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Hashtags defined in the post\n@gotag: bson:\"hashtags\""
                    },
                    "extra": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "title": "Blob of extra content tied to the post\n@gotag: bson:\"extra\""
                    },
                    "comments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        },
                        "title": "Comments tied to the post\n@gotag: bson:\"comments\""
                    },
                    "backendPlatformUserId": {
                        "type": "string",
                        "title": "ID of the user resharing the post\n@gotag: bson:\"backendPlatformUserId\""
                    },
                    "profileId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "ID of the profile resharing the post\n@gotag: bson:\"profileId\""
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Tags associated with the post\n@gotag: bson:\"tags\""
                    },
                    "authorUsername": {
                        "type": "string",
                        "title": "Username of the person making the comment\n@gotag: bson:\"authorUsername\""
                    },
                    "affinityScore": {
                        "type": "string",
                        "format": "uint64",
                        "title": "AffinityScore is the average rating users on the platform associate with a\npiece of content. It is taken as the weighted average across all reactions\nfor the particular post\n@gotag: bson:\"affinityScore\""
                    },
                    "qualityScore": {
                        "type": "string",
                        "format": "uint64",
                        "title": "QualityScore is the quality of the given piece of content.\nIt is taken as the weighted average across all reactions for the particular\npost\n@gotag: bson:\"qualityScore\""
                    },
                    "userIdToAffinityScoreMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "title": "UserIDToAffinityScoreMap witholds a mapping of all user profiles who left\nan affinity score\n@gotag: bson:\"userIdToAffinityScoreMap\""
                    },
                    "userIdToReportsMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "format": "uint64"
                        },
                        "description": "AccountType is the account type of the creator of this piece of\n content",
                        "title": "ReportCount details the number of reports were associated with a post\nA report is used as a signal to disclose the post's content are in\nviolation of platform rules\n@gotag: bson:\"userIdToReportsMap\""
                    },
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Note"
                        },
                        "title": "the set of notes associated to this piece of content\n@gotag: bson:\"notes\""
                    },
                    "thread": {
                        "$ref": "#/components/schemas/Thread"
                    },
                    "authorAccountType": {
                        "$ref": "#/components/schemas/AccountType"
                    },
                    "userIdToReactionMap": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Reaction"
                        },
                        "title": "a map of user ids to reactions left by users\n@gotag: bson:\"userIdToReactionMap\""
                    },
                    "action": {
                        "$ref": "#/components/schemas/PostType"
                    },
                    "originalPostUserProfileId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The profile Id of the user who owned the original post\n@gotag: bson:\"originalPostUserProfileId\""
                    },
                    "originalPostUserbackendPlaformId": {
                        "type": "string",
                        "title": "The backend wide user id of the profile who owned the original post\n@gotag: bson:\"originalPostUserbackendPlaformId\""
                    },
                    "originalPostAction": {
                        "$ref": "#/components/schemas/PostType"
                    },
                    "category": {
                        "$ref": "#/components/schemas/Category"
                    }
                },
                "title": "SharedPost: Posts reshared by other profiles\nTODO: need to expose api endpoints to interact with shared posts",
                "required": [
                    "originalPostId",
                    "content",
                    "action",
                    "originalPostAction"
                ]
            },
            "SocialProfileMetadata": {
                "type": "object",
                "properties": {
                    "profileType": {
                        "$ref": "#/components/schemas/AccountType"
                    },
                    "profileId": {
                        "type": "string",
                        "format": "uint64"
                    }
                }
            },
            "SocialRelationshipMetadata": {
                "type": "object",
                "properties": {
                    "sourceProfile": {
                        "$ref": "#/components/schemas/SocialProfileMetadata"
                    },
                    "targetProfile": {
                        "$ref": "#/components/schemas/SocialProfileMetadata"
                    },
                    "following": {
                        "type": "boolean"
                    },
                    "followingSince": {
                        "type": "string"
                    }
                },
                "required": [
                    "sourceProfile",
                    "targetProfile"
                ]
            },
            "Thread": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Thread ID\n@gotag: bson:\"_id,omitempty\""
                    },
                    "postIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "a list of post ids associated to this thread\n@gotag: bson:\"postIds\""
                    },
                    "parentPostId": {
                        "type": "string",
                        "title": "the id of the parent post\n@gotag: bson:\"parentPostId\""
                    },
                    "createdAt": {
                        "type": "string",
                        "title": "@gotag: bson:\"createdAt\""
                    },
                    "updatedAt": {
                        "type": "string",
                        "title": "@gotag: bson:\"updatedAt\""
                    }
                }
            },
            "ThreadParticipantType": {
                "type": "string",
                "enum": [
                    "THREAD_PARTICIPANT_TYPE_UNSPECIFIED",
                    "THREAD_PARTICIPANT_TYPE_PARENT",
                    "THREAD_PARTICIPANT_TYPE_PARTICIPANT"
                ],
                "default": "THREAD_PARTICIPANT_TYPE_UNSPECIFIED"
            },
            "Topic": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "the id of the topic"
                    },
                    "topicName": {
                        "type": "string",
                        "example": "test-tagname",
                        "title": "the name of the topic"
                    },
                    "description": {
                        "type": "string",
                        "example": "test-description sakjlDKJGSAHGHFDHSGJHFGAHDFJKGSHAJDLgAKSGDHAS CSVDJKSADASKJHDASFDGJKJLHSAHGFJDSAHD kjskhdgfhgdhfgkhsdfdsdfdssdfsdf",
                        "title": "the description of the topic"
                    },
                    "imageUrl": {
                        "type": "string",
                        "example": "test-tagname",
                        "title": "the url of the topic image\nthe image url is required",
                        "minLength": 1
                    }
                },
                "title": "Topic: topic that can be associated to a record",
                "required": [
                    "topicName",
                    "description",
                    "imageUrl"
                ]
            },
            "UserProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "User profile ID"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserTags"
                        },
                        "title": "Tags are interests"
                    },
                    "name": {
                        "type": "string",
                        "example": "test-user",
                        "title": "Profile name is the name tied to the user profile\nuser name must be at least 5 characters long"
                    },
                    "private": {
                        "type": "boolean",
                        "title": "Private defines wether only approved followers can see what this profile\nposts"
                    },
                    "followers": {
                        "type": "string",
                        "format": "int64",
                        "title": "Followers outlines the number of followers this user profile has"
                    },
                    "following": {
                        "type": "string",
                        "format": "int64",
                        "title": "Number of people account is following"
                    },
                    "notificationFeedTimelineId": {
                        "type": "string",
                        "example": "asndlkhaskhdhasgdahsf-feed-id",
                        "title": "Notification timeline Id. Notification for anything a user/group is\nfollowing"
                    },
                    "personalFeedTimelineId": {
                        "type": "string",
                        "example": "asndlkhaskhdhasgdahsf-feed-id",
                        "title": "Personal timeline ID Has activities for a user that can be followed"
                    },
                    "newsFeedTimelineId": {
                        "type": "string",
                        "example": "asndlkhaskhdhasgdahsf-feed-id",
                        "title": "Newsfeed timeline ID Displays all followed and group activities the user\nfollows"
                    },
                    "profileImageUrl": {
                        "type": "string",
                        "example": "asndlkhaskhdhasgdahsf.jpg",
                        "title": "ProfileImageUrl witholds the url of a given profile image"
                    },
                    "bookmarks": {
                        "$ref": "#/components/schemas/Bookmark"
                    },
                    "algoliaId": {
                        "type": "string",
                        "example": "asndlkhaskhdhasgdahsf-feed-id",
                        "title": "The id of the algolia record referencing this user"
                    }
                },
                "title": "UserProfile: The profile object tied to a given user",
                "required": [
                    "tags",
                    "name",
                    "private",
                    "followers",
                    "following",
                    "notificationFeedTimelineId",
                    "personalFeedTimelineId",
                    "newsFeedTimelineId",
                    "profileImageUrl",
                    "bookmarks",
                    "algoliaId"
                ]
            },
            "UserTags": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "the id of the tag record"
                    },
                    "tagName": {
                        "type": "string",
                        "example": "test-tagname",
                        "title": "the name of the tag ... tag must be at least 5 characters long"
                    },
                    "description": {
                        "type": "string",
                        "example": "test-description sakjlDKJGSAHGHFDHSGJHFGAHDFJKGSHAJDLgAKSGDHAS CSVDJKSADASKJHDASFDGJKJLHSAHGFJDSAHD kjskhdgfhgdhfgkhsdfdsdfdssdfsdf",
                        "title": "the description of the tag ... tag must be at least 5 characters long"
                    }
                },
                "title": "Tags: tags that can be associated to a record",
                "required": [
                    "tagName",
                    "description"
                ]
            },
            "AccountBalanceHistory": {
                "type": "object",
                "properties": {
                    "time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "accountId": {
                        "type": "string"
                    },
                    "isoCurrencyCode": {
                        "type": "string"
                    },
                    "balance": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "sign": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "id": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "Account Balance History\nThis message is used to represent the balance history of an account."
            },
            "ActionableInsight": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "detailedAction": {
                        "type": "string",
                        "title": "for each user we generate a detailed actionable insights for them to see"
                    },
                    "summarizedAction": {
                        "type": "string",
                        "title": "for each user we generate a summarized insight targeted at optimizing a certain condition"
                    },
                    "generatedTime": {
                        "type": "string",
                        "format": "date-time",
                        "title": "the time the insight was generated"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "associated tags with the generated insights"
                    }
                },
                "title": "An actionable insight serves as a basic insight users \ncan leverage and act upon and is typically generated based off of their financial contexts"
            },
            "AddDefaultPocketsToBankAccountRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "title": "The user id\nValidations:\n- user_id must be greater than 0"
                    },
                    "plaidAccountId": {
                        "type": "string",
                        "title": "The bank account id\nValidations:\n- account_id must be greater than 0"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    },
                    "financialAccountType": {
                        "$ref": "#/components/schemas/FinancialAccountType"
                    }
                },
                "required": [
                    "userId",
                    "plaidAccountId",
                    "profileType",
                    "financialAccountType"
                ]
            },
            "AddDefaultPocketsToBankAccountResponse": {
                "type": "object",
                "properties": {
                    "bankAccount": {
                        "$ref": "#/components/schemas/BankAccount"
                    },
                    "creditAccount": {
                        "$ref": "#/components/schemas/CreditAccount"
                    }
                }
            },
            "AddNoteToFinancialUserProfileRequest": {
                "type": "object",
                "properties": {
                    "businessAccountId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The business account id\nValidations:\n- business_account_id must be greater than 0"
                    },
                    "note": {
                        "$ref": "#/components/schemas/SmartNote"
                    },
                    "userId": {
                        "type": "string",
                        "title": "The user id of the user adding the note\nValidations:\n- user_id must be greater than 0"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "required": [
                    "businessAccountId",
                    "note",
                    "userId",
                    "profileType"
                ]
            },
            "AddNoteToFinancialUserProfileResponse": {
                "type": "object",
                "properties": {
                    "businessAccount": {
                        "$ref": "#/components/schemas/FinancialUserProfile"
                    }
                }
            },
            "AddNoteToRecurringTransactionRequest": {
                "type": "object",
                "properties": {
                    "transactionId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The transaction id\nValidations:\n- transaction_id must be greater than 0"
                    },
                    "note": {
                        "$ref": "#/components/schemas/SmartNote"
                    }
                },
                "title": "AddNoteToTransactionRequest adds a note to a transaction",
                "required": [
                    "transactionId",
                    "note"
                ]
            },
            "AddNoteToRecurringTransactionResponse": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountRecurringTransaction"
                    }
                },
                "title": "AddNoteToRecurringTransactionResponse is the responsed obtained after we add a note to a transaction"
            },
            "AddNoteToSmartGoalRequest": {
                "type": "object",
                "properties": {
                    "smartGoalId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0"
                    },
                    "note": {
                        "$ref": "#/components/schemas/SmartNote"
                    }
                },
                "required": [
                    "smartGoalId",
                    "note"
                ]
            },
            "AddNoteToSmartGoalResponse": {
                "type": "object",
                "properties": {
                    "goal": {
                        "$ref": "#/components/schemas/SmartGoal"
                    }
                }
            },
            "AddNoteToTransactionRequest": {
                "type": "object",
                "properties": {
                    "transactionId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The transaction id\nValidations:\n- transaction_id must be greater than 0"
                    },
                    "note": {
                        "$ref": "#/components/schemas/SmartNote"
                    }
                },
                "title": "AddNoteToTransactionRequest adds a note to a transaction",
                "required": [
                    "transactionId",
                    "note"
                ]
            },
            "AddNoteToTransactionResponse": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountTransaction"
                    }
                },
                "title": "AddNoteToTransactionResponse is the responsed obtained after we add a note to a transaction"
            },
            "Any1": {
                "type": "object",
                "properties": {
                    "@type": {
                        "type": "string",
                        "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
                    }
                },
                "additionalProperties": {},
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
            },
            "Apr": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "percentage": {
                        "type": "number",
                        "format": "double"
                    },
                    "type": {
                        "type": "string"
                    },
                    "balanceSubjectToApr": {
                        "type": "number",
                        "format": "double"
                    },
                    "interestChargeAmount": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "BankAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/BankAccountType"
                    },
                    "balance": {
                        "type": "number",
                        "format": "float",
                        "title": "the bank account balance"
                    },
                    "currency": {
                        "type": "string",
                        "title": "the bank account currency"
                    },
                    "currentFunds": {
                        "type": "number",
                        "format": "double"
                    },
                    "balanceLimit": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "pockets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Pocket"
                        },
                        "title": "the set of \"virtualized accounts this user witholds\"\nNOTE: these pockets are automatically created by the system\nwhen a user connects a bank account"
                    },
                    "plaidAccountId": {
                        "type": "string"
                    },
                    "subtype": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BankAccountStatus"
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountTransaction"
                        },
                        "title": "the set of transactions tied to this account"
                    },
                    "recurringTransactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountRecurringTransaction"
                        },
                        "title": "the set of subscriptions tied to this account"
                    }
                },
                "required": [
                    "type",
                    "balance",
                    "currency",
                    "currentFunds"
                ]
            },
            "BankAccountStatus": {
                "type": "string",
                "enum": [
                    "BANK_ACCOUNT_STATUS_UNSPECIFIED",
                    "BANK_ACCOUNT_STATUS_ACTIVE",
                    "BANK_ACCOUNT_STATUS_INACTIVE"
                ],
                "default": "BANK_ACCOUNT_STATUS_UNSPECIFIED"
            },
            "BankAccountType": {
                "type": "string",
                "enum": [
                    "BANK_ACCOUNT_TYPE_UNSPECIFIED",
                    "BANK_ACCOUNT_TYPE_PLAID",
                    "BANK_ACCOUNT_TYPE_MANUAL"
                ],
                "default": "BANK_ACCOUNT_TYPE_UNSPECIFIED"
            },
            "Budget": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "name": {
                        "type": "string",
                        "example": "Buy a car",
                        "title": "The name of the budget",
                        "minLength": 10
                    },
                    "description": {
                        "type": "string"
                    },
                    "startDate": {
                        "type": "string",
                        "title": "the time the goal was created"
                    },
                    "endDate": {
                        "type": "string",
                        "title": "the time the goal was updated"
                    },
                    "category": {
                        "$ref": "#/components/schemas/Category1"
                    }
                },
                "description": "The Budgets table stores information about each budget created by the user,\nincluding the name of the budget, the start and end dates, and the user ID."
            },
            "BulkUpdateRecurringTransactionRequest": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountRecurringTransaction"
                        },
                        "title": "The transactions to update\nValidations:\n- cannot be nil hence required"
                    }
                },
                "title": "BulkUpdateRecurringTransactionRequest is the bulk update transaction request",
                "required": [
                    "transactions"
                ]
            },
            "BulkUpdateRecurringTransactionResponse": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountRecurringTransaction"
                        },
                        "title": "The transactions that were successfully updated"
                    }
                },
                "title": "BulkUpdateRecurringTransactionResponse is the bulk update transaction response"
            },
            "BulkUpdateTransactionRequest": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountTransaction"
                        },
                        "title": "The transactions to update\nValidations:\n- cannot be nil hence required"
                    }
                },
                "title": "BulkUpdateTransactionRequest is the bulk update transaction request",
                "required": [
                    "transactions"
                ]
            },
            "BulkUpdateTransactionResponse": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountTransaction"
                        },
                        "title": "The transactions that were successfully updated"
                    }
                },
                "title": "BulkUpdateTransactionResponse is the bulk update transaction response"
            },
            "Category1": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "name": {
                        "type": "string",
                        "example": "Housing",
                        "title": "The name of the category",
                        "minLength": 3
                    },
                    "description": {
                        "type": "string",
                        "example": "Housing is a category primarily for housing",
                        "title": "The description of the category",
                        "minLength": 10
                    },
                    "subcategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "the sub categories of the category"
                    }
                },
                "description": "The Categories table stores information about the different categories of expenses or income,\nsuch as \"Housing\", \"Food\", \"Transportation\", and \"Entertainment\". Each category has one or more\nsubcategories, which are stored in the Subcategories table.\n\nFor example, the \"Housing\" category might have subcategories for \"Rent\", \"Utilities\", and \"Home Maintenance\"."
            },
            "CategoryMetricsFinancialSubProfile": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "personalFinanceCategoryPrimary": {
                        "type": "string"
                    },
                    "transactionCount": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "spentLastWeek": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastTwoWeeks": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastMonth": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastSixMonths": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastYear": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastTwoYears": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "CategoryMetricsFinancialSubProfile\nThis message is used to represent the financial sub profile of a category."
            },
            "CategoryMonthlyExpenditure": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "personalFinanceCategoryPrimary": {
                        "type": "string"
                    },
                    "totalSpending": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "CategoryMonthlyExpenditure represents the monthly expenditure of a category.\nThis message is used to represent the monthly expenditure of a category."
            },
            "CategoryMonthlyIncome": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "personalFinanceCategoryPrimary": {
                        "type": "string"
                    },
                    "totalIncome": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "CategoryMonthlyIncome\nThis message is used to represent the monthly income of a category."
            },
            "CategoryMonthlyTransactionCount": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "personalFinanceCategoryPrimary": {
                        "type": "string"
                    },
                    "transactionCount": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "CategoryMonthlyTransactionCount\nThis message is used to represent the monthly transaction count of a category."
            },
            "CheckIfQuotaExceededResponse": {
                "type": "object",
                "properties": {
                    "exceeded": {
                        "type": "boolean"
                    }
                }
            },
            "CreateBankAccountRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "title": "The account ID associated with the user\nValidations:\n- user_id must be greater than 0"
                    },
                    "bankAccount": {
                        "$ref": "#/components/schemas/BankAccount"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    },
                    "linkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The linkId to associate this bank account with"
                    }
                },
                "title": "CreateBankAccountRequest: Represents the request object invoked against the financial\nservice to create a bank account for a given user",
                "required": [
                    "userId",
                    "bankAccount",
                    "profileType",
                    "linkId"
                ]
            },
            "CreateBankAccountResponse": {
                "type": "object",
                "properties": {
                    "bankAccountId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The bank account id"
                    }
                },
                "title": "CreateBankAccountResponse: Represents the response object returned as a response to\nthe `create bank account` request"
            },
            "CreateBudgetRequest": {
                "type": "object",
                "properties": {
                    "milestroneId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The milestone to associate this budget with"
                    },
                    "budget": {
                        "$ref": "#/components/schemas/Budget"
                    }
                },
                "required": [
                    "milestroneId",
                    "budget"
                ]
            },
            "CreateBudgetResponse": {
                "type": "object",
                "properties": {
                    "budgetId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The budget id"
                    }
                }
            },
            "CreateManualLinkRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "title": "The user id\nValidations:\n- user_id must be greater than 0"
                    },
                    "manualAccountLink": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "required": [
                    "userId",
                    "manualAccountLink",
                    "profileType"
                ]
            },
            "CreateManualLinkResponse": {
                "type": "object",
                "properties": {
                    "linkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The link's id"
                    }
                }
            },
            "CreateMilestoneRequest": {
                "type": "object",
                "properties": {
                    "smartGoalId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The smart goal id\nValidations:\n- smart_goal_id must be greater than 0"
                    },
                    "milestone": {
                        "$ref": "#/components/schemas/Milestone"
                    }
                },
                "required": [
                    "smartGoalId",
                    "milestone"
                ]
            },
            "CreateMilestoneResponse": {
                "type": "object",
                "properties": {
                    "milestoneId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The milestone id"
                    }
                }
            },
            "CreateSmartGoalRequest": {
                "type": "object",
                "properties": {
                    "pocketId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The pocket account id\nValidations:\n- pocket_account_id must be greater than 0"
                    },
                    "smartGoal": {
                        "$ref": "#/components/schemas/SmartGoal"
                    }
                },
                "required": [
                    "pocketId",
                    "smartGoal"
                ]
            },
            "CreateSmartGoalResponse": {
                "type": "object",
                "properties": {
                    "smartGoalId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The smart goal id"
                    }
                }
            },
            "CreateSubscriptionRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string"
                    },
                    "priceId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "required": [
                    "userId",
                    "priceId",
                    "profileType"
                ]
            },
            "CreateSubscriptionResponse": {
                "type": "object",
                "properties": {
                    "subscriptionId": {
                        "type": "string"
                    },
                    "paymentIntentClientSecret": {
                        "type": "string"
                    }
                }
            },
            "CreateUserProfileRequest1": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/FinancialUserProfile"
                    },
                    "email": {
                        "type": "string",
                        "title": "the email of the account to create"
                    }
                },
                "title": "CreateUserProfileRequest: Represents the request object invoked against the user\nservice to create a user profile",
                "required": [
                    "profile",
                    "email"
                ]
            },
            "CreateUserProfileResponse1": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string"
                    }
                },
                "title": "CreateUserProfileResponse: Represents the response object returned as a response to\nthe `create user profile` request"
            },
            "CreditAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "title": "the bank account type"
                    },
                    "balance": {
                        "type": "number",
                        "format": "float",
                        "title": "the bank account balance"
                    },
                    "currentFunds": {
                        "type": "number",
                        "format": "double",
                        "title": "current funds on the account"
                    },
                    "balanceLimit": {
                        "type": "string",
                        "format": "uint64",
                        "title": "balance limit"
                    },
                    "plaidAccountId": {
                        "type": "string",
                        "title": "plaid account id mapped to this bank account"
                    },
                    "subtype": {
                        "type": "string",
                        "title": "accoint subtype"
                    },
                    "isOverdue": {
                        "type": "boolean",
                        "title": "wether the account is overdue"
                    },
                    "lastPaymentAmount": {
                        "type": "number",
                        "format": "double",
                        "title": "the last payment amount"
                    },
                    "lastPaymentDate": {
                        "type": "string",
                        "title": "the last payment date"
                    },
                    "lastStatementIssueDate": {
                        "type": "string",
                        "title": "the last statement issue date"
                    },
                    "minimumAmountDueDate": {
                        "type": "number",
                        "format": "double",
                        "title": "the minimum amount due date"
                    },
                    "nextPaymentDate": {
                        "type": "string",
                        "title": "the next payment date"
                    },
                    "aprs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Apr"
                        },
                        "title": "the aprs"
                    },
                    "lastStatementBalance": {
                        "type": "number",
                        "format": "double",
                        "title": "the last statement balance"
                    },
                    "minimumPaymentAmount": {
                        "type": "number",
                        "format": "double",
                        "title": "the minimum payment amount"
                    },
                    "nextPaymentDueDate": {
                        "type": "string",
                        "title": "the next payment due date"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BankAccountStatus"
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountTransaction"
                        },
                        "title": "the set of transactions tied to this account"
                    },
                    "recurringTransactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountRecurringTransaction"
                        },
                        "title": "the set of subscriptions tied to this account"
                    },
                    "pockets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Pocket"
                        },
                        "title": "set of pockets tied to this account"
                    }
                }
            },
            "DebtToIncomeRatio": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "ratio": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "DebtToIncomeRatio\nThis message is used to represent the debt to income ratio of a user."
            },
            "DeleteBankAccountResponse": {
                "type": "object",
                "properties": {
                    "deleted": {
                        "type": "boolean",
                        "example": "true",
                        "title": "The bank account id"
                    }
                }
            },
            "DeleteBudgetResponse": {
                "type": "object",
                "properties": {
                    "deleted": {
                        "type": "boolean",
                        "title": "The budget id"
                    }
                }
            },
            "DeleteLinkResponse": {
                "type": "object",
                "properties": {
                    "linkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The link's id"
                    }
                }
            },
            "DeleteMilestoneResponse": {
                "type": "object",
                "properties": {
                    "deleted": {
                        "type": "boolean",
                        "title": "The milestone id"
                    }
                }
            },
            "DeleteNoteFromRecurringTransactionResponse": {
                "type": "object",
                "properties": {
                    "deleted": {
                        "type": "boolean",
                        "title": "The transaction id"
                    }
                }
            },
            "DeleteNoteFromSmartGoalResponse": {
                "type": "object",
                "properties": {
                    "deleted": {
                        "type": "boolean",
                        "title": "The smart goal id"
                    }
                }
            },
            "DeleteNoteFromTransactionResponse": {
                "type": "object",
                "properties": {
                    "deleted": {
                        "type": "boolean",
                        "title": "The transaction id"
                    }
                }
            },
            "DeletePocketResponse": {
                "type": "object",
                "properties": {
                    "deleted": {
                        "type": "boolean",
                        "title": "The pocket id"
                    }
                }
            },
            "DeleteRecurringTransactionResponse": {
                "type": "object",
                "properties": {
                    "deleted": {
                        "type": "boolean",
                        "title": "the transaction that was successfully deleted"
                    }
                },
                "title": "DeleteTransactionResponse is the delete transaction response"
            },
            "DeleteSmartGoalResponse": {
                "type": "object",
                "properties": {
                    "deleted": {
                        "type": "boolean",
                        "title": "The smart goal id"
                    }
                }
            },
            "DeleteTransactionResponse": {
                "type": "object",
                "properties": {
                    "deleted": {
                        "type": "boolean",
                        "title": "the transaction that was successfully deleted"
                    }
                },
                "title": "DeleteTransactionResponse is the delete transaction response"
            },
            "DeleteUserProfileResponse1": {
                "type": "object",
                "properties": {
                    "profileDeleted": {
                        "type": "boolean"
                    }
                },
                "title": "DeleteUserProfileResponse: Represents the response object returned as a response to\nthe `delete user profile` request"
            },
            "ExpenseMetrics": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "personalFinanceCategoryPrimary": {
                        "type": "string"
                    },
                    "transactionCount": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "totalExpenses": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "ExpenseMetrics\nThis message is used to represent the expense metrics of a user."
            },
            "ExpenseMetricsFinancialSubProfileMetrics": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "spentLastWeek": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastMonth": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastSixMonths": {
                        "type": "number",
                        "format": "double"
                    },
                    "averageMonthlyDiscretionarySpending": {
                        "type": "number",
                        "format": "double"
                    },
                    "averageMonthlyRecurringSpending": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "ExpenseMetricsFinancialSubProfileMetrics\nThis message is used to represent the financial sub profile metrics of a user."
            },
            "FinancialAccountType": {
                "type": "string",
                "enum": [
                    "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED",
                    "FINANCIAL_ACCOUNT_TYPE_BANK",
                    "FINANCIAL_ACCOUNT_TYPE_INVESTMENT",
                    "FINANCIAL_ACCOUNT_TYPE_CREDIT",
                    "FINANCIAL_ACCOUNT_TYPE_MORTGAGE",
                    "FINANCIAL_ACCOUNT_TYPE_STUDENT_LOAN"
                ],
                "default": "FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED"
            },
            "FinancialProfile": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalIncome": {
                        "type": "number",
                        "format": "double"
                    },
                    "totalExpenses": {
                        "type": "number",
                        "format": "double"
                    },
                    "numberOfTransactions": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "mostExpensiveCategory": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "FinancialProfile\nThis message is used to represent the financial profile of a user."
            },
            "FinancialUserProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "userId": {
                        "type": "string",
                        "title": "NOTE: this user id refers to the id provided by auth0 as it is the source of truth on the platform. Please remember this"
                    },
                    "stripeCustomerId": {
                        "type": "string"
                    },
                    "stripeSubscriptions": {
                        "$ref": "#/components/schemas/StripeSubscription"
                    },
                    "link": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "title": "a user profile can have many links (connected institutions) of which finanical accounts are tied to (checking, savings, etc)"
                    },
                    "actionableInsights": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActionableInsight"
                        }
                    },
                    "email": {
                        "type": "string"
                    },
                    "actionablePersonalInsights": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonalActionableInsight"
                        }
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    },
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartNote"
                        }
                    }
                },
                "title": "FinancialUserProfile stores high level user profile details\nsuch as the id, user_id tied to the profile, and many more"
            },
            "FinancialUserProfileType": {
                "type": "string",
                "enum": [
                    "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED",
                    "FINANCIAL_USER_PROFILE_TYPE_USER",
                    "FINANCIAL_USER_PROFILE_TYPE_BUSINESS"
                ],
                "default": "FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED"
            },
            "Forecast": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "forecastedAmount": {
                        "type": "string",
                        "example": "Active",
                        "title": "the forecasted amount of the goal"
                    },
                    "forecastedCompletionDate": {
                        "type": "string",
                        "example": "Active",
                        "title": "the forecasted completion date of the goal"
                    },
                    "varianceAmount": {
                        "type": "string",
                        "example": "Active",
                        "title": "the forecasted variance of the goal between the forecasted and target amounts"
                    }
                },
                "description": "The Forecast table stores information about each forecast generated for a particular goal,\nincluding the forecast date, the forecasted amount of money saved or invested for the\ngoal by the target date, and the variance between the forecasted and target amounts.\nThis allows the user to track how well they are progressing towards their goal and make adjustments as needed."
            },
            "GetAccountBalanceHistoryResponse": {
                "type": "object",
                "properties": {
                    "accountBalanceHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountBalanceHistory"
                        },
                        "title": "List of account balance history records for specific account"
                    }
                }
            },
            "GetAllBudgetsResponse": {
                "type": "object",
                "properties": {
                    "budgets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Budget"
                        },
                        "title": "The budgets"
                    }
                }
            },
            "GetBankAccountResponse": {
                "type": "object",
                "properties": {
                    "bankAccount": {
                        "$ref": "#/components/schemas/BankAccount"
                    }
                },
                "title": "GetBankAccountResponse: Represents the response object returned as a response to\nthe `get bank account` request"
            },
            "GetBudgetResponse": {
                "type": "object",
                "properties": {
                    "budget": {
                        "$ref": "#/components/schemas/Budget"
                    }
                }
            },
            "GetCategoryMonthlyTransactionCountResponse": {
                "type": "object",
                "properties": {
                    "categoryMonthlyTransactionCount": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CategoryMonthlyTransactionCount"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetDebtToIncomeRatioResponse": {
                "type": "object",
                "properties": {
                    "debtToIncomeRatios": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DebtToIncomeRatio"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetExpenseMetricsResponse": {
                "type": "object",
                "properties": {
                    "expenseMetrics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExpenseMetrics"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetFinancialProfileResponse": {
                "type": "object",
                "properties": {
                    "financialProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FinancialProfile"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetForecastResponse": {
                "type": "object",
                "properties": {
                    "forecast": {
                        "$ref": "#/components/schemas/Forecast"
                    }
                }
            },
            "GetHistoricalAccountBalanceResponse": {
                "type": "object",
                "properties": {
                    "historicalAccountBalance": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountBalanceHistory"
                        }
                    }
                }
            },
            "GetIncomeExpenseRatioResponse": {
                "type": "object",
                "properties": {
                    "incomeExpenseRatios": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IncomeExpenseRatio"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetIncomeMetricsResponse": {
                "type": "object",
                "properties": {
                    "incomeMetrics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IncomeMetrics"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetInvestmentAcccountResponse": {
                "type": "object",
                "properties": {
                    "investmentAccount": {
                        "$ref": "#/components/schemas/InvestmentAccount"
                    }
                }
            },
            "GetLiabilityAccountResponse": {
                "type": "object",
                "properties": {
                    "liabilityAccount": {
                        "$ref": "#/components/schemas/CreditAccount"
                    }
                }
            },
            "GetLinkResponse": {
                "type": "object",
                "properties": {
                    "link": {
                        "$ref": "#/components/schemas/Link"
                    }
                }
            },
            "GetLinksResponse": {
                "type": "object",
                "properties": {
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "title": "The links"
                    }
                }
            },
            "GetMelodyFinancialContextResponse": {
                "type": "object",
                "properties": {
                    "melodyFinancialContext": {
                        "$ref": "#/components/schemas/MelodyFinancialContext"
                    }
                }
            },
            "GetMerchantMonthlyExpenditureResponse": {
                "type": "object",
                "properties": {
                    "merchantMonthlyExpenditures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MerchantMonthlyExpenditure"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetMilestoneResponse": {
                "type": "object",
                "properties": {
                    "milestone": {
                        "$ref": "#/components/schemas/Milestone"
                    }
                }
            },
            "GetMilestonesBySmartGoalIdResponse": {
                "type": "object",
                "properties": {
                    "milestones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Milestone"
                        },
                        "title": "The milestones"
                    }
                }
            },
            "GetMonthlyBalanceResponse": {
                "type": "object",
                "properties": {
                    "monthlyBalances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MonthlyBalance"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetMonthlyExpenditureResponse": {
                "type": "object",
                "properties": {
                    "monthlyExpenditures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MonthlyExpenditure"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetMonthlyIncomeResponse": {
                "type": "object",
                "properties": {
                    "monthlyIncomes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MonthlyIncome"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetMonthlySavingsResponse": {
                "type": "object",
                "properties": {
                    "monthlySavings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MonthlySavings"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetMonthlyTotalQuantityBySecurityAndUserResponse": {
                "type": "object",
                "properties": {
                    "monthlyTotalQuantityBySecurityAndUser": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MonthlyTotalQuantityBySecurityAndUser"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetMonthlyTransactionCountResponse": {
                "type": "object",
                "properties": {
                    "monthlyTransactionCounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MonthlyTransactionCount"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetMortgageAccountResponse": {
                "type": "object",
                "properties": {
                    "mortageAccount": {
                        "$ref": "#/components/schemas/MortgageAccount"
                    }
                }
            },
            "GetNoteFromSmartGoalResponse": {
                "type": "object",
                "properties": {
                    "note": {
                        "$ref": "#/components/schemas/SmartNote"
                    }
                }
            },
            "GetNoteFromTransactionResponse": {
                "type": "object",
                "properties": {
                    "note": {
                        "$ref": "#/components/schemas/SmartNote"
                    }
                }
            },
            "GetNotesFromFinancialUserProfileResponse": {
                "type": "object",
                "properties": {
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartNote"
                        },
                        "title": "The notes"
                    }
                }
            },
            "GetNotesFromSmartGoalResponse": {
                "type": "object",
                "properties": {
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartNote"
                        },
                        "title": "The notes"
                    }
                }
            },
            "GetPaymentChannelMonthlyExpenditureResponse": {
                "type": "object",
                "properties": {
                    "paymentChannelMonthlyExpenditure": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentChannelMonthlyExpenditure"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetPocketResponse": {
                "type": "object",
                "properties": {
                    "pocket": {
                        "$ref": "#/components/schemas/Pocket"
                    }
                }
            },
            "GetRecurringTransactionsForUserResponse": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountRecurringTransaction"
                        },
                        "title": "The transactions"
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "uint64"
                    }
                }
            },
            "GetSingleRecurringTransactionResponse": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountRecurringTransaction"
                    }
                },
                "title": "GetRecurringTransactionResponse is the get transaction response"
            },
            "GetSmartGoalsByPocketIdResponse": {
                "type": "object",
                "properties": {
                    "smartGoals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartGoal"
                        },
                        "title": "The smart goals"
                    }
                }
            },
            "GetSplitTransactionResponse": {
                "type": "object",
                "properties": {
                    "splitTransactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransactionSplit"
                        },
                        "title": "The split transactions"
                    }
                }
            },
            "GetStudentLoanAccountResponse": {
                "type": "object",
                "properties": {
                    "studentLoanAccount": {
                        "$ref": "#/components/schemas/StudentLoanAccount"
                    }
                }
            },
            "GetTotalInvestmentBySecurityResponse": {
                "type": "object",
                "properties": {
                    "totalInvestmentBySecurity": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TotalInvestmentBySecurity"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetTransactionAggregatesResponse": {
                "type": "object",
                "properties": {
                    "transactionAggregates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransactionAggregatesByMonth"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetTransactionResponse": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountTransaction"
                    }
                },
                "title": "GetTransactionResponse is the get transaction response"
            },
            "GetTransactionsBetweenTimeRangesResponse": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountTransaction"
                        },
                        "title": "The transactions"
                    },
                    "currentPage": {
                        "type": "integer",
                        "format": "int64",
                        "title": "Current page number"
                    },
                    "totalAges": {
                        "type": "integer",
                        "format": "int64",
                        "title": "Total number of pages"
                    },
                    "totalTransactions": {
                        "type": "string",
                        "format": "uint64",
                        "title": "Total number of transactions in the month"
                    }
                }
            },
            "GetTransactionsForBankAccountResponse": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Transaction"
                        },
                        "title": "The transactions"
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "uint64"
                    }
                }
            },
            "GetTransactionsForPastMonthResponse": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountTransaction"
                        }
                    },
                    "currentPage": {
                        "type": "integer",
                        "format": "int64",
                        "title": "Current page number"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64",
                        "title": "Total number of pages"
                    },
                    "totalTransactions": {
                        "type": "string",
                        "format": "uint64",
                        "title": "Total number of transactions in the month"
                    }
                }
            },
            "GetTransactionsForPastWeekResponse": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountTransaction"
                        }
                    },
                    "currentPage": {
                        "type": "integer",
                        "format": "int64",
                        "title": "Current page number"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int64",
                        "title": "Total number of pages"
                    },
                    "totalTransactions": {
                        "type": "string",
                        "format": "uint64",
                        "title": "Total number of transactions in the week"
                    }
                }
            },
            "GetTransactionsResponse": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Transaction"
                        },
                        "title": "The transactions"
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "uint64"
                    }
                }
            },
            "GetUserAccountBalanceHistoryResponse": {
                "type": "object",
                "properties": {
                    "accountBalanceHistory": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountBalanceHistory"
                        },
                        "title": "List of account balance history records"
                    }
                }
            },
            "GetUserCategoryMonthlyExpenditureResponse": {
                "type": "object",
                "properties": {
                    "categoryMonthlyExpenditure": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CategoryMonthlyExpenditure"
                        },
                        "title": "List of CategoryMonthlyExpenditure records for the user"
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetUserCategoryMonthlyIncomeResponse": {
                "type": "object",
                "properties": {
                    "categoryMonthlyIncome": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CategoryMonthlyIncome"
                        }
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "GetUserProfileResponse1": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/FinancialUserProfile"
                    },
                    "financialContext": {
                        "$ref": "#/components/schemas/MelodyFinancialContext"
                    }
                },
                "title": "GetUserProfileResponse: Represents the response object returned as a response to\nthe `get user profile` request",
                "required": [
                    "financialContext"
                ]
            },
            "GoalType": {
                "type": "string",
                "enum": [
                    "GOAL_TYPE_UNSPECIFIED",
                    "GOAL_TYPE_SAVINGS",
                    "GOAL_TYPE_INVESTMENT",
                    "GOAL_TYPE_DEBT",
                    "GOAL_TYPE_EXPENSE"
                ],
                "default": "GOAL_TYPE_UNSPECIFIED"
            },
            "IncomeExpenseRatio": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "ratio": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "IncomeExpenseRatio\nThis message is used to represent the income expense ratio of a user."
            },
            "IncomeMetrics": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "personalFinanceCategoryPrimary": {
                        "type": "string"
                    },
                    "transactionCount": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "totalIncome": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "IncomeMetrics\nThis message is used to represent the income metrics of a user."
            },
            "IncomeMetricsFinancialSubProfile": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "incomeLastTwoWeeks": {
                        "type": "number",
                        "format": "double"
                    },
                    "incomeLastMonth": {
                        "type": "number",
                        "format": "double"
                    },
                    "incomeLastTwoMonths": {
                        "type": "number",
                        "format": "double"
                    },
                    "incomeLastSixMonths": {
                        "type": "number",
                        "format": "double"
                    },
                    "incomeLastYear": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "IncomeMetricsFinancialSubProfile\nThis message is used to represent the financial sub profile of a user."
            },
            "InvesmentHolding": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "name": {
                        "type": "string",
                        "example": "nfdkjfjksdhjhfjsdhjgf",
                        "title": "The name of the investment holding",
                        "minLength": 3
                    },
                    "plaidAccountId": {
                        "type": "string",
                        "example": "k67E4xKvMlhmleEa4pg9hlwGGNnnEeixPolGm",
                        "title": "plaid account id"
                    },
                    "costBasis": {
                        "type": "number",
                        "format": "double",
                        "example": "15"
                    },
                    "institutionPrice": {
                        "type": "number",
                        "format": "double",
                        "example": "13.73"
                    },
                    "institutionPriceAsOf": {
                        "type": "string",
                        "example": "2021-04-13T00:00:00.000Z"
                    },
                    "institutionPriceDatetime": {
                        "type": "string",
                        "example": "2022-06-07T23:01:00.000Z"
                    },
                    "institutionValue": {
                        "type": "number",
                        "format": "double",
                        "example": "4437.35905"
                    },
                    "isoCurrencyCode": {
                        "type": "string",
                        "example": "USD"
                    },
                    "quantity": {
                        "type": "number",
                        "format": "double",
                        "example": "25000"
                    },
                    "securityId": {
                        "type": "string",
                        "example": "vLRMV3MvY1FYNP91on35CJD5QN5rw9Fpa9qOL"
                    },
                    "unofficialCurrencyCode": {
                        "type": "string",
                        "example": "USD"
                    }
                }
            },
            "InvestmentAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "number": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "title": "the bank account type"
                    },
                    "balance": {
                        "type": "number",
                        "format": "float",
                        "title": "the bank account balance"
                    },
                    "currentFunds": {
                        "type": "number",
                        "format": "double"
                    },
                    "balanceLimit": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "plaidAccountId": {
                        "type": "string",
                        "title": "plaid account id mapped to this bank account"
                    },
                    "subtype": {
                        "type": "string"
                    },
                    "holdings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InvesmentHolding"
                        },
                        "title": "invesment holding is the set of securities this account witholds"
                    },
                    "securities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InvestmentSecurity"
                        },
                        "title": "the set of securities this account witholds"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BankAccountStatus"
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountInvestmentTransaction"
                        },
                        "title": "the set of transactions tied to this account"
                    }
                }
            },
            "InvestmentSecurity": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "closePrice": {
                        "type": "number",
                        "format": "double",
                        "example": " 0.140034616"
                    },
                    "closePriceAsOf": {
                        "type": "string",
                        "example": "2022-01-24T00:00:00.000Z"
                    },
                    "cusip": {
                        "type": "string",
                        "example": "dfkjhdgjdhhgd"
                    },
                    "institutionId": {
                        "type": "string",
                        "example": "ins_3"
                    },
                    "institutionSecurityId": {
                        "type": "string",
                        "example": "dfkjhdgjdhhgd"
                    },
                    "isCashEquivalent": {
                        "type": "boolean",
                        "example": "true"
                    },
                    "isin": {
                        "type": "string",
                        "example": "dfkjhdgjdhhgd"
                    },
                    "isoCurrencyCode": {
                        "type": "string",
                        "example": "USD"
                    },
                    "name": {
                        "type": "string",
                        "example": "Dogecoin"
                    },
                    "proxySecurityId": {
                        "type": "string",
                        "example": "dfkjhdgjdhhgd"
                    },
                    "securityId": {
                        "type": "string",
                        "example": "vLRMV3MvY1FYNP91on35CJD5QN5rw9Fpa9qOL"
                    },
                    "sedol": {
                        "type": "string",
                        "example": "dfkjhdgjdhhgd"
                    },
                    "tickerSymbol": {
                        "type": "string",
                        "example": "DOGE"
                    },
                    "type": {
                        "type": "string",
                        "example": "cryptocurrency"
                    },
                    "unofficialCurrencyCode": {
                        "type": "string",
                        "example": "USD"
                    },
                    "updateDatetime": {
                        "type": "string",
                        "example": "2022-06-07T23:01:00.000Z"
                    }
                }
            },
            "Link": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "plaidSync": {
                        "$ref": "#/components/schemas/PlaidSync"
                    },
                    "linkStatus": {
                        "$ref": "#/components/schemas/LinkStatus"
                    },
                    "plaidLink": {
                        "$ref": "#/components/schemas/PlaidLink"
                    },
                    "plaidNewAccountsAvailable": {
                        "type": "boolean"
                    },
                    "expirationDate": {
                        "type": "string"
                    },
                    "institutionName": {
                        "type": "string"
                    },
                    "customInstitutionName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "lastManualSync": {
                        "type": "string"
                    },
                    "lastSuccessfulUpdate": {
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/Token"
                    },
                    "bankAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BankAccount"
                        },
                        "title": "a link event - or client login event can have many connected bank accounts\nfor example a log in link against one instition like chase can have many account (checking and savings)\nit is important though to ensure that if a link against an instition already exists, we dont fascilitate duplicated"
                    },
                    "investmentAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InvestmentAccount"
                        },
                        "title": "a link event - or client login event can have many connected investment accounts\nfor example a log in link against one instition like fidelity can have many accounts (401k and investment account)\nit is important though to ensure that if a link against an instition already exists, we dont fascilitate duplicated"
                    },
                    "creditAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreditAccount"
                        },
                        "title": "credit accounts tied to a user"
                    },
                    "mortgageAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MortgageAccount"
                        },
                        "title": "mortgage accounts tied to a user"
                    },
                    "studentLoanAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StudentLoanAccount"
                        },
                        "title": "student loan accounts tied to a link"
                    },
                    "plaidInstitutionId": {
                        "type": "string",
                        "title": "the id of the institution this link is tied to and against"
                    },
                    "linkType": {
                        "$ref": "#/components/schemas/LinkType"
                    },
                    "errorCode": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "newAccountsAvailable": {
                        "type": "boolean"
                    },
                    "shouldBeUpdated": {
                        "type": "boolean"
                    }
                },
                "description": "A Link represents a login at a financial institution. A single end-user of your application might have accounts at different financial\ninstitutions, which means they would have multiple different Items. An Item is not the same as a financial institution account,\nalthough every account will be associated with an Item. For example, if a user has one login at their bank that allows them to access\nboth their checking account and their savings account, a single Item would be associated with both of those accounts. Each Item \nlinked within your application will have a corresponding access_token, which is a token that you can use to make API requests related\nto that specific Item.\nTwo Items created for the same set of credentials at the same institution will be considered different and not share the same item_id."
            },
            "LinkStatus": {
                "type": "string",
                "enum": [
                    "LINK_STATUS_UNSPECIFIED",
                    "LINK_STATUS_SETUP",
                    "LINK_STATUS_PENDING",
                    "LINK_STATUS_ERROR",
                    "LINK_STATUS_SUCCESS",
                    "LINK_STATUS_PENDING_EXPIRATION",
                    "LINK_STATUS_REVOKED",
                    "LINK_STATUS_ITEM_LOGIN_REQUIRED"
                ],
                "default": "LINK_STATUS_UNSPECIFIED"
            },
            "LinkType": {
                "type": "string",
                "enum": [
                    "LINK_TYPE_UNSPECIFIED",
                    "LINK_TYPE_PLAID",
                    "LINK_TYPE_MANUAL"
                ],
                "default": "LINK_TYPE_UNSPECIFIED"
            },
            "ListRecurringTransactionNotesResponse": {
                "type": "object",
                "properties": {
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartNote"
                        },
                        "title": "The notes"
                    }
                }
            },
            "ListRecurringTransactionsForUserAndAccountResponse": {
                "type": "object",
                "properties": {
                    "nextPage": {
                        "type": "string"
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountRecurringTransaction"
                        }
                    }
                },
                "title": "ListRecurringTransactionsResponse is the list transaction response"
            },
            "ListTransactionNotesResponse": {
                "type": "object",
                "properties": {
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartNote"
                        },
                        "title": "The notes"
                    }
                }
            },
            "ListTransactionsAcrossAllAccountsResponse": {
                "type": "object",
                "properties": {
                    "nextPage": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountTransaction"
                        }
                    }
                },
                "title": "ListTransactionsResponse is the list transaction response"
            },
            "ListTransactionsResponse": {
                "type": "object",
                "properties": {
                    "nextPage": {
                        "type": "string"
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountTransaction"
                        }
                    }
                },
                "title": "ListTransactionsResponse is the list transaction response"
            },
            "LocationFinancialSubProfile": {
                "type": "object",
                "properties": {
                    "locationCity": {
                        "type": "string"
                    },
                    "transactionCount": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "spentLastWeek": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastTwoWeeks": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastMonth": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastSixMonths": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastYear": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastTwoYears": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "LocationFinancialSubProfile\nThis message is used to represent the financial sub profile of a location."
            },
            "MelodyFinancialContext": {
                "type": "object",
                "properties": {
                    "categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CategoryMetricsFinancialSubProfile"
                        }
                    },
                    "expenses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExpenseMetricsFinancialSubProfileMetrics"
                        }
                    },
                    "income": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IncomeMetricsFinancialSubProfile"
                        }
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LocationFinancialSubProfile"
                        }
                    },
                    "merchants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MerchantMetricsFinancialSubProfile"
                        }
                    },
                    "paymentChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentChannelMetricsFinancialSubProfile"
                        }
                    },
                    "bankAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BankAccount"
                        }
                    },
                    "investmentAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InvestmentAccount"
                        }
                    },
                    "creditAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreditAccount"
                        }
                    },
                    "mortgageLoanAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MortgageAccount"
                        }
                    },
                    "studentLoanAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StudentLoanAccount"
                        }
                    },
                    "financialUserProfileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "MelodyFinancialContext represents the financial context of a user.\nThis message is used to represent the financial context of a user."
            },
            "MerchantMetricsFinancialSubProfile": {
                "type": "object",
                "properties": {
                    "merchantName": {
                        "type": "string"
                    },
                    "spentLastWeek": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastTwoWeeks": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastMonth": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastSixMonths": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastYear": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastTwoYears": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "MerchantFinancialSubProfile\nThis message is used to represent the financial sub profile of a merchant."
            },
            "MerchantMonthlyExpenditure": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "merchantName": {
                        "type": "string"
                    },
                    "totalSpending": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "MerchantMonthlyExpenditure\nThis message is used to represent the monthly expenditure of a merchant."
            },
            "Milestone": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "name": {
                        "type": "string",
                        "example": "Buy a car",
                        "title": "The name of the milestone\nValidations:\n- must be at least 3 characters long"
                    },
                    "description": {
                        "type": "string",
                        "example": "Buy a car",
                        "title": "The description of the miletone\nValidations:\n- must be at least 3 characters long"
                    },
                    "targetDate": {
                        "type": "string",
                        "example": "testtagdescription",
                        "title": "the target date of the milestone\nValidations:\n- must be at least 3 characters long"
                    },
                    "targetAmount": {
                        "type": "string",
                        "example": "Active",
                        "title": "the target amount of the milestone"
                    },
                    "isCompleted": {
                        "type": "boolean",
                        "example": true,
                        "title": "wethe milestone is completed or not"
                    },
                    "budget": {
                        "$ref": "#/components/schemas/Budget"
                    }
                },
                "title": "Milestone: represents a milestone in the context of simfinni. A financial milestone that is both smart\nand achievable. A milestone is a sub goal of a goal and is tied to a goal by the goal id"
            },
            "MonthlyBalance": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "netBalance": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "MonthlyBalance\nThis message is used to represent the monthly balance of a user."
            },
            "MonthlyExpenditure": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalSpending": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "MonthlyExpenditure\nThis message is used to represent the monthly expenditure of a user."
            },
            "MonthlyIncome": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "totalIncome": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "MonthlyIncome\nThis message is used to represent the monthly income of a user."
            },
            "MonthlySavings": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "netSavings": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "MonthlySavings\nThis message is used to represent the monthly savings of a user."
            },
            "MonthlyTotalQuantityBySecurityAndUser": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "securityId": {
                        "type": "string"
                    },
                    "totalQuantity": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "MonthlyTotalQuantityBySecurityAndUser\nThis message is used to represent the monthly total quantity of a security."
            },
            "MonthlyTransactionCount": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "transactionCount": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "MonthlyTransactionCount\nThis message is used to represent the monthly transaction count of a user."
            },
            "MortgageAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "plaidAccountId": {
                        "type": "string"
                    },
                    "accountNumber": {
                        "type": "string"
                    },
                    "currentLateFee": {
                        "type": "number",
                        "format": "double"
                    },
                    "escrowBalance": {
                        "type": "number",
                        "format": "double"
                    },
                    "hasPmi": {
                        "type": "boolean"
                    },
                    "hasPrepaymentPenalty": {
                        "type": "boolean"
                    },
                    "lastPaymentAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "lastPaymentDate": {
                        "type": "string"
                    },
                    "loanTerm": {
                        "type": "string"
                    },
                    "loanTypeDescription": {
                        "type": "string"
                    },
                    "maturityDate": {
                        "type": "string"
                    },
                    "nextMonthlyPayment": {
                        "type": "number",
                        "format": "double"
                    },
                    "nextPaymentDueDate": {
                        "type": "string"
                    },
                    "originalPrincipalBalance": {
                        "type": "number",
                        "format": "double"
                    },
                    "originalPropertyValue": {
                        "type": "number",
                        "format": "double"
                    },
                    "outstandingPrincipalBalance": {
                        "type": "number",
                        "format": "double"
                    },
                    "paymentAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "paymentDate": {
                        "type": "string"
                    },
                    "originationDate": {
                        "type": "string"
                    },
                    "originationPrincipalAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "pastDueAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "ytdInterestPaid": {
                        "type": "number",
                        "format": "double"
                    },
                    "ytdPrincipalPaid": {
                        "type": "number",
                        "format": "double"
                    },
                    "propertyAddressCity": {
                        "type": "string"
                    },
                    "propertyAddressState": {
                        "type": "string"
                    },
                    "propertyAddressStreet": {
                        "type": "string"
                    },
                    "propertyAddressPostalCode": {
                        "type": "string"
                    },
                    "propertyRegion": {
                        "type": "string"
                    },
                    "propertyCountry": {
                        "type": "string"
                    },
                    "interestRatePercentage": {
                        "type": "number",
                        "format": "double"
                    },
                    "interestRateType": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BankAccountStatus"
                    }
                }
            },
            "PaymentChannelMetricsFinancialSubProfile": {
                "type": "object",
                "properties": {
                    "paymentChannel": {
                        "type": "string"
                    },
                    "spentLastWeek": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastTwoWeeks": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastMonth": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastSixMonths": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastYear": {
                        "type": "number",
                        "format": "double"
                    },
                    "spentLastTwoYears": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "transactionCount": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "PaymentChannelMetricsFinancialSubProfile\nThis message is used to represent the financial sub profile of a payment channel."
            },
            "PaymentChannelMonthlyExpenditure": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "paymentChannel": {
                        "type": "string"
                    },
                    "totalSpending": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "PaymentChannelMonthlyExpenditure\nThis message is used to represent the monthly expenditure of a payment channel."
            },
            "PersonalActionableInsight": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "insightName": {
                        "$ref": "#/components/schemas/PersonalActionableInsightName"
                    },
                    "description": {
                        "type": "string",
                        "title": "insight description"
                    },
                    "takeaway": {
                        "type": "string",
                        "title": "insight takeaway"
                    },
                    "action": {
                        "type": "string",
                        "title": "insight action"
                    },
                    "expectedBenefit": {
                        "type": "string",
                        "title": "insight expected benefit"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "insight tags"
                    },
                    "generatedTime": {
                        "type": "string",
                        "format": "date-time",
                        "title": "insight generated time"
                    },
                    "metricsToOptimizeFor": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "metrics to optimize for"
                    }
                }
            },
            "PersonalActionableInsightName": {
                "type": "string",
                "enum": [
                    "PERSONAL_ACTIONABLE_INSIGHT_NAME_UNSPECIFIED",
                    "PERSONAL_ACTIONABLE_INSIGHT_NAME_EXPENSE",
                    "PERSONAL_ACTIONABLE_INSIGHT_NAME_EMERGENCY_FUND",
                    "PERSONAL_ACTIONABLE_INSIGHT_NAME_DEBT_PRIORITIZATION",
                    "PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_ESSENTIAL_EXPENSES",
                    "PERSONAL_ACTIONABLE_INSIGHT_NAME_NON_SUBSCRIPTIONS",
                    "PERSONAL_ACTIONABLE_INSIGHT_NAME_DISCRETIONARY_SPENDING"
                ],
                "default": "PERSONAL_ACTIONABLE_INSIGHT_NAME_UNSPECIFIED"
            },
            "PlaidAccountInvestmentTransaction": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "title": "The unique identifier for the associated investment account.\n@gotag: ch:\"account_id\""
                    },
                    "ammount": {
                        "type": "string",
                        "title": "The amount of the investment transaction.\n@gotag: ch:\"amount\""
                    },
                    "investmentTransactionId": {
                        "type": "string",
                        "title": "The unique identifier for the investment transaction.\n@gotag: ch:\"investment_transaction_id\""
                    },
                    "securityId": {
                        "type": "string",
                        "title": "The security or asset identifier associated with the investment transaction.\n@gotag: ch:\"security_id\""
                    },
                    "currentDate": {
                        "type": "string",
                        "title": "The date of the investment transaction.\n@gotag: ch:\"date\""
                    },
                    "name": {
                        "type": "string",
                        "title": "The name or description of the investment transaction.\n@gotag: ch:\"name\""
                    },
                    "quantity": {
                        "type": "number",
                        "format": "double",
                        "title": "The quantity of the investment transaction (e.g., number of shares).\n@gotag: ch:\"quantity\""
                    },
                    "amount": {
                        "type": "number",
                        "format": "double",
                        "title": "The monetary amount of the investment transaction.\n@gotag: ch:\"amount\""
                    },
                    "price": {
                        "type": "number",
                        "format": "double",
                        "title": "The price per unit of the security for the investment transaction.\n@gotag: ch:\"price\""
                    },
                    "fees": {
                        "type": "number",
                        "format": "double",
                        "title": "The fees associated with the investment transaction.\n@gotag: ch:\"fees\""
                    },
                    "type": {
                        "type": "string",
                        "title": "The type of the investment transaction (e.g., buy, sell, dividend).\n@gotag: ch:\"type\""
                    },
                    "subtype": {
                        "type": "string",
                        "title": "The subtype of the investment transaction (e.g., stock, bond).\n@gotag: ch:\"subtype\""
                    },
                    "isoCurrencyCode": {
                        "type": "string",
                        "title": "The ISO currency code for the investment transaction.\n@gotag: ch:\"iso_currency_code\""
                    },
                    "unofficialCurrencyCode": {
                        "type": "string",
                        "title": "The unofficial currency code of the investment transaction.\n@gotag: ch:\"unofficial_currency_code\""
                    },
                    "linkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The link ID associated with this investment transaction.\n@gotag: ch:\"link_id\""
                    },
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The unique identifier for this investment transaction.\n@gotag: ch:\"id\""
                    },
                    "userId": {
                        "type": "string",
                        "title": "The user ID associated with this investment transaction.\n@gotag: ch:\"user_id\""
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The date and time when this investment transaction was created.\n@gotag: ch:\"created_at\""
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The timestamp associated with this investment transaction.\n@gotag: ch:\"time\""
                    },
                    "additionalProperties": {
                        "$ref": "#/components/schemas/Any1"
                    },
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartNote"
                        },
                        "title": "Notes associated with this investment transaction.\n@gotag: ch:\"notes\""
                    }
                },
                "description": "Message representing investment transactions associated with a Plaid account."
            },
            "PlaidAccountRecurringTransaction": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "title": "The unique identifier for the associated bank account.\n@gotag: ch:\"account_id\""
                    },
                    "streamId": {
                        "type": "string"
                    },
                    "categoryId": {
                        "type": "string",
                        "title": "The category ID associated with the recurring transaction.\n@gotag: ch:\"category_id\""
                    },
                    "description": {
                        "type": "string",
                        "title": "A description or note for the recurring transaction.\n@gotag: ch:\"description\""
                    },
                    "merchantName": {
                        "type": "string",
                        "title": "The name of the merchant associated with the recurring transaction.\n@gotag: ch:\"merchant_name\""
                    },
                    "personalFinanceCategoryPrimary": {
                        "type": "string",
                        "title": "The primary personal finance category of the recurring transaction.\n@gotag: ch:\"personal_finance_category_primary\""
                    },
                    "personalFinanceCategoryDetailed": {
                        "type": "string",
                        "title": "The detailed personal finance category of the recurring transaction.\n@gotag: ch:\"personal_finance_category_detailed\""
                    },
                    "firstDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The date of the first occurrence of the recurring transaction.\n@gotag: ch:\"first_date\""
                    },
                    "lastDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The date of the last occurrence of the recurring transaction.\n@gotag: ch:\"last_date\""
                    },
                    "frequency": {
                        "type": "string",
                        "title": "The frequency at which the recurring transaction occurs (e.g., monthly).\n@gotag: ch:\"frequency\""
                    },
                    "transactionIds": {
                        "type": "string",
                        "title": "A comma-separated list of transaction IDs associated with this recurring transaction.\n@gotag: ch:\"transaction_ids,array\""
                    },
                    "averageAmount": {
                        "type": "string",
                        "title": "The average amount of the recurring transaction.\n@gotag: ch:\"average_amount\""
                    },
                    "averageAmountIsoCurrencyCode": {
                        "type": "string",
                        "title": "The ISO currency code for the average transaction amount.\n@gotag: ch:\"average_amount_iso_currency_code\""
                    },
                    "lastAmount": {
                        "type": "string",
                        "title": "The amount of the most recent occurrence of the recurring transaction.\n@gotag: ch:\"last_amount\""
                    },
                    "lastAmountIsoCurrencyCode": {
                        "type": "string",
                        "title": "The ISO currency code for the most recent transaction amount.\n@gotag: ch:\"last_amount_iso_currency_code\""
                    },
                    "isActive": {
                        "type": "boolean",
                        "title": "Indicates whether the recurring transaction is currently active.\n@gotag: ch:\"is_active\""
                    },
                    "status": {
                        "type": "string",
                        "title": "The status of the recurring transaction (e.g., \"Active\" or \"Inactive\").\n@gotag: ch:\"status\""
                    },
                    "updatedTime": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The timestamp when this recurring transaction was last updated.\n@gotag: ch:\"updated_time\""
                    },
                    "userId": {
                        "type": "string",
                        "title": "The user ID associated with this recurring transaction.\n@gotag: ch:\"user_id\""
                    },
                    "linkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The link ID associated with this recurring transaction.\n@gotag: ch:\"link_id\""
                    },
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The unique identifier for this recurring transaction.\n@gotag: ch:\"id\""
                    },
                    "flow": {
                        "type": "string",
                        "title": "The flow associated with this recurring transaction.\n@gotag: ch:\"flow\""
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp associated with this recurring transaction."
                    },
                    "additionalProperties": {
                        "$ref": "#/components/schemas/Any1"
                    },
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartNote"
                        },
                        "description": "Notes associated with this recurring transaction."
                    }
                },
                "description": "Message representing recurring transactions associated with a Plaid account."
            },
            "PlaidAccountTransaction": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The bank account ID associated with the transaction."
                    },
                    "amount": {
                        "type": "number",
                        "format": "double",
                        "description": "The amount of the transaction.\n\n@gotag: ch:\"amount\""
                    },
                    "isoCurrencyCode": {
                        "type": "string",
                        "description": "The currency code of the transaction.\n\n@gotag: ch:\"iso_currency_code\""
                    },
                    "unofficialCurrencyCode": {
                        "type": "string",
                        "description": "The unofficial currency code of the transaction.\n\n@gotag: ch:\"unofficial_currency_code\""
                    },
                    "transactionId": {
                        "type": "string",
                        "description": "The transaction ID of interest.\n\n@gotag: ch:\"transaction_id\""
                    },
                    "transactionCode": {
                        "type": "string",
                        "description": "The transaction code.\n\n@gotag: ch:\"transaction_code\""
                    },
                    "currentDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date of the transaction.\n\n@gotag: ch:\"date\""
                    },
                    "currentDatetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The current datetime of the transaction.\n\n@gotag: ch:\"datetime\""
                    },
                    "authorizedDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time at which the transaction was authorized.\n\n@gotag: ch:\"authorized_date\""
                    },
                    "authorizedDatetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date-time when the transaction was authorized.\n\n@gotag: ch:\"authorized_datetime\""
                    },
                    "categoryId": {
                        "type": "string",
                        "description": "The category ID of the transaction.\n\n@gotag: ch:\"category_id\""
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The set of categories that the transaction belongs to."
                    },
                    "personalFinanceCategoryPrimary": {
                        "type": "string",
                        "description": "The primary personal finance category of the transaction.\n\n@gotag: ch:\"personal_finance_category_primary\""
                    },
                    "personalFinanceCategoryDetailed": {
                        "type": "string",
                        "description": "The detailed personal finance category of the transaction.\n\n@gotag: ch:\"personal_finance_category_detailed\""
                    },
                    "transactionName": {
                        "type": "string",
                        "description": "The name of the transaction.\n\n@gotag: ch:\"name\""
                    },
                    "merchantName": {
                        "type": "string",
                        "description": "The merchant name of the transaction.\n\n@gotag: ch:\"merchant_name\""
                    },
                    "checkNumber": {
                        "type": "string",
                        "description": "The check number associated with the transaction.\n\n@gotag: ch:\"check_number\""
                    },
                    "paymentChannel": {
                        "type": "string",
                        "description": "The payment channel for the transaction.\n\n@gotag: ch:\"payment_channel\""
                    },
                    "pending": {
                        "type": "boolean",
                        "description": "Indicates whether the transaction is pending.\n\n@gotag: ch:\"pending\""
                    },
                    "pendingTransactionId": {
                        "type": "string",
                        "description": "The ID of the pending transaction, if applicable.\n\n@gotag: ch:\"pending_transaction_id\""
                    },
                    "accountOwner": {
                        "type": "string",
                        "description": "The account owner associated with the transaction.\n\n@gotag: ch:\"account_owner\""
                    },
                    "paymentMetaByOrderOf": {
                        "type": "string",
                        "description": "Information about the entity to whom the payment is made (if available)."
                    },
                    "paymentMetaPayee": {
                        "type": "string",
                        "description": "Information about the payee (if available)."
                    },
                    "paymentMetaPayer": {
                        "type": "string",
                        "description": "Information about the payer (if available)."
                    },
                    "paymentMetaPaymentMethod": {
                        "type": "string",
                        "description": "The payment method used for the transaction (if available)."
                    },
                    "paymentMetaPaymentProcessor": {
                        "type": "string",
                        "description": "The payment processor involved in the transaction (if available)."
                    },
                    "paymentMetaPpdId": {
                        "type": "string",
                        "description": "The Prearranged Payment and Deposit (PPD) ID (if available)."
                    },
                    "paymentMetaReason": {
                        "type": "string",
                        "description": "The reason for the payment (if available)."
                    },
                    "paymentMetaReferenceNumber": {
                        "type": "string",
                        "description": "The reference number associated with the payment (if available)."
                    },
                    "locationAddress": {
                        "type": "string",
                        "description": "The street address of the transaction location (if available)."
                    },
                    "locationCity": {
                        "type": "string",
                        "description": "The city of the transaction location (if available)."
                    },
                    "locationRegion": {
                        "type": "string",
                        "description": "The region or state of the transaction location (if available)."
                    },
                    "locationPostalCode": {
                        "type": "string",
                        "description": "The postal code of the transaction location (if available)."
                    },
                    "locationCountry": {
                        "type": "string",
                        "description": "The country of the transaction location (if available)."
                    },
                    "locationLat": {
                        "type": "number",
                        "format": "double",
                        "description": "The latitude of the transaction location (if available)."
                    },
                    "locationLon": {
                        "type": "number",
                        "format": "double",
                        "description": "The longitude of the transaction location (if available)."
                    },
                    "locationStoreNumber": {
                        "type": "string",
                        "description": "The store number associated with the transaction location (if available)."
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp associated with the transaction."
                    },
                    "additionalProperties": {
                        "$ref": "#/components/schemas/Any1"
                    },
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "description": "The unique ID for this transaction."
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID associated with this transaction."
                    },
                    "linkId": {
                        "type": "string",
                        "format": "uint64",
                        "description": "The link ID associated with this transaction."
                    },
                    "needsReview": {
                        "type": "boolean",
                        "description": "Indicates whether this transaction needs review."
                    },
                    "hideTransaction": {
                        "type": "boolean",
                        "description": "Indicates whether this transaction should be hidden."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags associated with this transaction."
                    },
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartNote"
                        },
                        "description": "Notes associated with this transaction."
                    },
                    "splits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransactionSplit"
                        },
                        "description": "The number of splits associated with this transaction."
                    }
                },
                "description": "Message representing Plaid account transactions."
            },
            "PlaidExchangeTokenRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "title": "The user id\nValidations:\n- user_id must be greater than 0"
                    },
                    "publicToken": {
                        "type": "string",
                        "title": "The public token\nValidations:\n- cannot be nil hence required"
                    },
                    "institutionId": {
                        "type": "string",
                        "title": "The institution id"
                    },
                    "institutionName": {
                        "type": "string",
                        "title": "The institution name"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "required": [
                    "userId",
                    "publicToken",
                    "profileType"
                ]
            },
            "PlaidExchangeTokenResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "wether the operation was successful"
                    },
                    "workflowId": {
                        "type": "string",
                        "title": "the id of the async task triggered to sync plaid records"
                    },
                    "runId": {
                        "type": "string"
                    }
                },
                "required": [
                    "success"
                ]
            },
            "PlaidInitiateTokenExchangeRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "title": "A unique ID representing the end user. Typically this will be a user ID number from your application.\nPersonally identifiable information, such as an email address or phone number, \nshould not be used in the `client_user_id`. It is currently used as a means of searching logs \nfor the given user in the Plaid Dashboard.\nValidations:\n- user_id must be greater than 0"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The user's full legal name. This is an optional field used in \nthe [returning user experience](https://plaid.com/docs/link/returning-user) to associate Items to the user."
                    },
                    "email": {
                        "type": "string",
                        "description": "The user's email address. This field is optional, but required to enable the \n[pre-authenticated returning user flow](https://plaid.com/docs/link/returning-user/#enabling-the-returning-user-experience)."
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The user's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.\nThis field is optional, but required to enable the [returning user experience](https://plaid.com/docs/link/returning-user)."
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "required": [
                    "userId",
                    "fullName",
                    "email",
                    "phoneNumber",
                    "profileType"
                ]
            },
            "PlaidInitiateTokenExchangeResponse": {
                "type": "object",
                "properties": {
                    "linkToken": {
                        "type": "string"
                    },
                    "expiration": {
                        "type": "string"
                    },
                    "plaidRequestId": {
                        "type": "string"
                    }
                }
            },
            "PlaidInitiateTokenUpdateRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "title": "The user id\nValidations:\n- user_id must be greater than 0"
                    },
                    "linkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The link id we want to update for\nValidations:\n- cannot be nil hence required"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "required": [
                    "userId",
                    "linkId",
                    "profileType"
                ]
            },
            "PlaidInitiateTokenUpdateResponse": {
                "type": "object",
                "properties": {
                    "linkToken": {
                        "type": "string"
                    },
                    "expiration": {
                        "type": "string"
                    }
                }
            },
            "PlaidLink": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "webhookUrl": {
                        "type": "string"
                    },
                    "institutionId": {
                        "type": "string"
                    },
                    "institutionName": {
                        "type": "string"
                    },
                    "usePlaidSync": {
                        "type": "boolean"
                    },
                    "itemId": {
                        "type": "string"
                    }
                }
            },
            "PlaidSync": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "timeStamp": {
                        "type": "string"
                    },
                    "trigger": {
                        "type": "string"
                    },
                    "nextCursor": {
                        "type": "string"
                    },
                    "added": {
                        "type": "string",
                        "format": "int64"
                    },
                    "removed": {
                        "type": "string",
                        "format": "int64"
                    },
                    "modified": {
                        "type": "string",
                        "format": "int64"
                    }
                }
            },
            "Pocket": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "goals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartGoal"
                        },
                        "title": "the set of smart goals this user witholds"
                    },
                    "type": {
                        "$ref": "#/components/schemas/PocketType"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "the tags tied to this pocket"
                    }
                },
                "title": "Pocket is an abstraction of a over a bank account. A user can has at most 4 pockets per connected account\nNOTE: these pockets are automatically created by the system and should not be exposed for mutation\nby any client. The only operations that can be performed against a pocket are:\n1. Get the pocket\n2. Get the pocket's smart goals\n3. Adding a smart goal to the pocket"
            },
            "PocketType": {
                "type": "string",
                "enum": [
                    "POCKET_TYPE_UNSPECIFIED",
                    "POCKET_TYPE_DISCRETIONARY_SPENDING",
                    "POCKET_TYPE_FUN_MONEY",
                    "POCKET_TYPE_DEBT_REDUCTION",
                    "POCKET_TYPE_EMERGENCY_FUND",
                    "POCKET_TYPE_INVESTMENT",
                    "POCKET_TYPE_SHORT_TERM_SAVINGS",
                    "POCKET_TYPE_LONG_TERM_SAVINGS",
                    "POCKET_TYPE_IMPROVE_CREDIT_SCORE",
                    "POCKET_TYPE_DEBT_CONSOLIDATION",
                    "POCKET_TYPE_CREDIT_CARD_MANAGEMENT",
                    "POCKET_TYPE_LOAN_REPAYMENT"
                ],
                "default": "POCKET_TYPE_UNSPECIFIED"
            },
            "PollAsyncTaskExecutionStatusResponse": {
                "type": "object",
                "properties": {
                    "workflowId": {
                        "type": "string",
                        "title": "The workflow id"
                    },
                    "status": {
                        "$ref": "#/components/schemas/TaskState"
                    },
                    "runId": {
                        "type": "string",
                        "title": "The run id"
                    }
                }
            },
            "RecordAskCopilotQuestionRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "title": "the account id associated with the user"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "required": [
                    "profileType"
                ]
            },
            "RecordAskCopilotQuestionResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "wether or not the user is below quote"
                    },
                    "remainingQuota": {
                        "type": "number",
                        "format": "double",
                        "title": "the remaining quote"
                    }
                }
            },
            "SearchTransactionsRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "title": "The user id\nValidations:\n- user_id must be greater than 0"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    },
                    "pageNumber": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The page number"
                    },
                    "pageSize": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The page size"
                    },
                    "minAmount": {
                        "type": "number",
                        "format": "double",
                        "title": "min amount"
                    },
                    "maxAmount": {
                        "type": "number",
                        "format": "double",
                        "title": "max amount"
                    },
                    "category": {
                        "type": "string",
                        "title": "category"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "start date"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "end date"
                    },
                    "financialAccountType": {
                        "$ref": "#/components/schemas/FinancialAccountType"
                    }
                },
                "required": [
                    "userId",
                    "profileType",
                    "pageNumber",
                    "pageSize"
                ]
            },
            "SearchTransactionsResponse": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PlaidAccountTransaction"
                        },
                        "title": "The transactions"
                    },
                    "nextPageNumber": {
                        "type": "string",
                        "format": "uint64"
                    }
                }
            },
            "SmartGoal": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "example": "Buy a car",
                        "title": "The description of the goal\nValidations:\n- must be at least 3 characters long"
                    },
                    "isCompleted": {
                        "type": "boolean",
                        "example": true,
                        "title": "wether the goal has been achieved or not"
                    },
                    "goalType": {
                        "$ref": "#/components/schemas/GoalType"
                    },
                    "duration": {
                        "type": "string",
                        "example": "Active",
                        "title": "The duration of the goal"
                    },
                    "startDate": {
                        "type": "string",
                        "example": "Active",
                        "title": "the start date of the goal"
                    },
                    "endDate": {
                        "type": "string",
                        "example": "Active",
                        "title": "the end date of the goal"
                    },
                    "targetAmount": {
                        "type": "string",
                        "example": "Active",
                        "title": "the target amount of the goal\namount of money the user wants to save or invest"
                    },
                    "currentAmount": {
                        "type": "string",
                        "example": "Active",
                        "title": "the current amount of the goal\ncurrent amount of money saved or invested towards the goal"
                    },
                    "milestones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Milestone"
                        },
                        "title": "Milestones associated with the goal"
                    },
                    "forecasts": {
                        "$ref": "#/components/schemas/Forecast"
                    },
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartNote"
                        },
                        "title": "Notes associated with the goal"
                    }
                },
                "description": "SmartGoal: The Goals table stores information about each financial goal, including the name of the goal,\nits description, the target amount of money the user wants to save or invest, and the expected date of completion.\n\nThe Goals table also includes columns for the start date of the goal, the current amount of money saved or\ninvested towards the goal, and a boolean flag indicating whether the goal has been achieved.\nThese additional columns allow the user to track their progress towards the goal and see how much\nmore they need to save or invest to reach their target amount."
            },
            "SmartNote": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "Unique identifier for the note"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string",
                        "example": "Note content here...",
                        "title": "The content of the note\nValidations:\n- must be at least 3 characters long"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timestamp indicating when the note was created"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timestamp indicating when the note was last updated"
                    }
                },
                "title": "Note schema"
            },
            "SplitTransactionRequest": {
                "type": "object",
                "properties": {
                    "transactionId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The transaction id\nValidations:\n- transaction_id must be greater than 0"
                    },
                    "splitTransactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransactionSplit"
                        },
                        "title": "The split transaction\nValidations:\n- cannot be nil hence required"
                    }
                },
                "required": [
                    "transactionId",
                    "splitTransactions"
                ]
            },
            "SplitTransactionResponse": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountTransaction"
                    }
                }
            },
            "Status1": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "message": {
                        "type": "string"
                    },
                    "details": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Any1"
                        }
                    }
                }
            },
            "StripeSubscription": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "stripeSubscriptionId": {
                        "type": "string",
                        "title": "stripe subscription id tied to the customer"
                    },
                    "stripeSubscriptionStatus": {
                        "$ref": "#/components/schemas/StripeSubscriptionStatus"
                    },
                    "stripeSubscriptionActiveUntil": {
                        "type": "string",
                        "title": "stripe subscription active until"
                    },
                    "stripeWebhookLatestTimestamp": {
                        "type": "string",
                        "title": "stripe webhook latest timestamp"
                    },
                    "isTrialing": {
                        "type": "boolean",
                        "title": "wether the subscription is trialing"
                    }
                },
                "title": "StripeSubscription stores high level stripe subscription details of which the user profile has"
            },
            "StripeSubscriptionStatus": {
                "type": "string",
                "enum": [
                    "STRIPE_SUBSCRIPTION_STATUS_UNSPECIFIED",
                    "STRIPE_SUBSCRIPTION_STATUS_TRIALING",
                    "STRIPE_SUBSCRIPTION_STATUS_ACTIVE",
                    "STRIPE_SUBSCRIPTION_STATUS_PAST_DUE",
                    "STRIPE_SUBSCRIPTION_STATUS_CANCELED",
                    "STRIPE_SUBSCRIPTION_STATUS_UNPAID",
                    "STRIPE_SUBSCRIPTION_STATUS_COMPLETE",
                    "STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE",
                    "STRIPE_SUBSCRIPTION_STATUS_INCOMPLETE_EXPIRED",
                    "STRIPE_SUBSCRIPTION_STATUS_CREATED",
                    "STRIPE_SUBSCRIPTION_STATUS_PAUSED"
                ],
                "default": "STRIPE_SUBSCRIPTION_STATUS_UNSPECIFIED"
            },
            "StudentLoanAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "plaidAccountId": {
                        "type": "string"
                    },
                    "disbursementDates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "expectedPayoffDate": {
                        "type": "string"
                    },
                    "guarantor": {
                        "type": "string"
                    },
                    "interestRatePercentage": {
                        "type": "number",
                        "format": "double"
                    },
                    "isOverdue": {
                        "type": "boolean"
                    },
                    "lastPaymentAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "lastPaymentDate": {
                        "type": "string"
                    },
                    "lastStatementIssueDate": {
                        "type": "string"
                    },
                    "loanName": {
                        "type": "string"
                    },
                    "loanEndDate": {
                        "type": "string"
                    },
                    "minimumPaymentAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "nextPaymentDueDate": {
                        "type": "string"
                    },
                    "originationDate": {
                        "type": "string"
                    },
                    "originationPrincipalAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "outstandingInterestAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "paymentReferenceNumber": {
                        "type": "string"
                    },
                    "sequenceNumber": {
                        "type": "string"
                    },
                    "ytdInterestPaid": {
                        "type": "number",
                        "format": "double"
                    },
                    "ytdPrincipalPaid": {
                        "type": "number",
                        "format": "double"
                    },
                    "loanType": {
                        "type": "string"
                    },
                    "pslfStatusEstimatedEligibilityDate": {
                        "type": "string"
                    },
                    "pslfStatusPaymentsMade": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pslfStatusPaymentsRemaining": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "repaymentPlanType": {
                        "type": "string"
                    },
                    "repaymentPlanDescription": {
                        "type": "string"
                    },
                    "servicerAddressCity": {
                        "type": "string"
                    },
                    "servicerAddressPostalCode": {
                        "type": "string"
                    },
                    "servicerAddressState": {
                        "type": "string"
                    },
                    "servicerAddressStreet": {
                        "type": "string"
                    },
                    "servicerAddressRegion": {
                        "type": "string"
                    },
                    "servicerAddressCountry": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string",
                        "title": "the user id to which this bank account is tied to"
                    },
                    "name": {
                        "type": "string",
                        "title": "the account name"
                    },
                    "status": {
                        "$ref": "#/components/schemas/BankAccountStatus"
                    }
                }
            },
            "TaskState": {
                "type": "string",
                "enum": [
                    "TASK_STATE_UNSPECIFIED",
                    "TASK_STATE_ACTIVE",
                    "TASK_STATE_PENDING",
                    "TASK_STATE_SCHEDULED",
                    "TASK_STATE_RETRY",
                    "TASK_STATE_ARCHIVED",
                    "TASK_STATE_COMPLETED",
                    "TASK_STATE_AGGREGATING",
                    "TASK_STATE_FAILED"
                ],
                "default": "TASK_STATE_UNSPECIFIED",
                "description": " - TASK_STATE_UNSPECIFIED: The zero value is omitted in proto3 by convention if it's not used.\nIn your case, since you start your iota with 1, we will not define a zero value.\n - TASK_STATE_ACTIVE: Indicates that the task is currently being processed by Handler.\n - TASK_STATE_PENDING: Indicates that the task is ready to be processed by Handler.\n - TASK_STATE_SCHEDULED: Indicates that the task is scheduled to be processed some time in the future.\n - TASK_STATE_RETRY: Indicates that the task has previously failed and scheduled to be processed some time in the future.\n - TASK_STATE_ARCHIVED: Indicates that the task is archived and stored for inspection purposes.\n - TASK_STATE_COMPLETED: Indicates that the task is processed successfully and retained until the retention TTL expires.\n - TASK_STATE_AGGREGATING: Indicates that the task is waiting in a group to be aggregated into one task.\n - TASK_STATE_FAILED: Indicates that the task has failed and will not be retried."
            },
            "Token": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "itemId": {
                        "type": "string",
                        "title": "the id of the item the token is tied to"
                    },
                    "keyId": {
                        "type": "string"
                    },
                    "accessToken": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "mergeEndUserOriginId": {
                        "type": "string",
                        "description": "This is what you'll pass to Merge as the end_user_origin_id."
                    },
                    "mergeIntegrationSlug": {
                        "type": "string",
                        "description": "The integration slug/identifier. This is returned at the end of the linking flow."
                    },
                    "lastMergeCreatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "last time you performed a merge fetch"
                    }
                }
            },
            "TotalInvestmentBySecurity": {
                "type": "object",
                "properties": {
                    "securityId": {
                        "type": "string"
                    },
                    "totalInvestment": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "TotalInvestmentBySecurity\nThis message is used to represent the total investment of a security."
            },
            "Transaction": {
                "type": "object",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "title": "@gotag: ch:\"account_id\""
                    },
                    "amount": {
                        "type": "number",
                        "format": "double",
                        "title": "@gotag: ch:\"amount\""
                    },
                    "isoCurrencyCode": {
                        "type": "string",
                        "title": "@gotag: ch:\"iso_currency_code\""
                    },
                    "unofficialCurrencyCode": {
                        "type": "string",
                        "title": "@gotag: ch:\"unofficial_currency_code\""
                    },
                    "categoryId": {
                        "type": "string",
                        "title": "@gotag: ch:\"category_id\""
                    },
                    "checkNumber": {
                        "type": "string",
                        "title": "@gotag: ch:\"check_number\""
                    },
                    "currentDate": {
                        "type": "string",
                        "title": "@gotag: ch:\"date\""
                    },
                    "currentDatetime": {
                        "type": "string",
                        "title": "@gotag: ch:\"datetime\""
                    },
                    "authorizedDate": {
                        "type": "string",
                        "title": "@gotag: ch:\"authorized_date\""
                    },
                    "authorizedDatetime": {
                        "type": "string",
                        "title": "@gotag: ch:\"authorized_datetime\""
                    },
                    "name": {
                        "type": "string",
                        "title": "@gotag: ch:\"name\""
                    },
                    "merchantName": {
                        "type": "string",
                        "title": "@gotag: ch:\"merchant_name\""
                    },
                    "paymentChannel": {
                        "type": "string",
                        "title": "@gotag: ch:\"payment_channel\""
                    },
                    "pending": {
                        "type": "boolean",
                        "title": "@gotag: ch:\"pending\""
                    },
                    "pendingTransactionId": {
                        "type": "string",
                        "title": "@gotag: ch:\"pending_transaction_id\""
                    },
                    "accountOwner": {
                        "type": "string",
                        "title": "@gotag: ch:\"account_owner\""
                    },
                    "transactionId": {
                        "type": "string",
                        "title": "@gotag: ch:\"transaction_id\""
                    },
                    "transactionCode": {
                        "type": "string",
                        "title": "@gotag: ch:\"transaction_code\""
                    },
                    "id": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string",
                        "title": "@gotag: ch:\"user_id\""
                    },
                    "linkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "@gotag: ch:\"link_id\""
                    },
                    "sign": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "personalFinanceCategoryPrimary": {
                        "type": "string",
                        "title": "@gotag: ch:\"personal_finance_category_primary\""
                    },
                    "personalFinanceCategoryDetailed": {
                        "type": "string",
                        "title": "@gotag: ch:\"personal_finance_category_detailed\""
                    },
                    "locationAddress": {
                        "type": "string"
                    },
                    "locationCity": {
                        "type": "string"
                    },
                    "locationRegion": {
                        "type": "string"
                    },
                    "locationPostalCode": {
                        "type": "string"
                    },
                    "locationCountry": {
                        "type": "string"
                    },
                    "locationLat": {
                        "type": "number",
                        "format": "double"
                    },
                    "locationLon": {
                        "type": "number",
                        "format": "double"
                    },
                    "locationStoreNumber": {
                        "type": "string"
                    },
                    "paymentMetaByOrderOf": {
                        "type": "string"
                    },
                    "paymentMetaPayee": {
                        "type": "string"
                    },
                    "paymentMetaPayer": {
                        "type": "string"
                    },
                    "paymentMetaPaymentMethod": {
                        "type": "string"
                    },
                    "paymentMetaPaymentProcessor": {
                        "type": "string"
                    },
                    "paymentMetaPpdId": {
                        "type": "string"
                    },
                    "paymentMetaReason": {
                        "type": "string"
                    },
                    "paymentMetaReferenceNumber": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "additionalProperties": {
                        "$ref": "#/components/schemas/Any1"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                }
            },
            "TransactionAggregatesByMonth": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "personalFinanceCategoryPrimary": {
                        "type": "string"
                    },
                    "locationCity": {
                        "type": "string"
                    },
                    "paymentChannel": {
                        "type": "string"
                    },
                    "merchantName": {
                        "type": "string"
                    },
                    "transactionCount": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "totalAmount": {
                        "type": "number",
                        "format": "double"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    }
                },
                "description": "TransactionAggregatesByMonth\nThis message is used to represent the transaction aggregates of a user."
            },
            "TransactionSplit": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "description": "The unique ID for this transaction."
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID associated with this transaction."
                    },
                    "linkId": {
                        "type": "string",
                        "format": "uint64",
                        "description": "The link ID associated with this transaction."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the transaction."
                    },
                    "amount": {
                        "type": "number",
                        "format": "double",
                        "description": "The amount of money involved in the transaction."
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The set of categories that the transaction belongs to."
                    },
                    "personalFinanceCategoryPrimary": {
                        "type": "string",
                        "description": "The primary personal finance category of the transaction."
                    },
                    "personalFinanceCategoryDetailed": {
                        "type": "string",
                        "description": "The detailed personal finance category of the transaction."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags associated with this transaction."
                    },
                    "authorizedDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The time at which the transaction was authorized (time field)"
                    },
                    "authorizedDatetime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date-time when the transaction was authorized."
                    },
                    "timeOfSplit": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The time of split of the transaction"
                    }
                },
                "description": "PlaidAccountTransactionSplit represents a split of a PlaidAccountTransaction."
            },
            "TriggerSyncRequest": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string",
                        "title": "the account id associated with the user"
                    },
                    "profileType": {
                        "$ref": "#/components/schemas/FinancialUserProfileType"
                    },
                    "linkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "the account id associated with the user"
                    },
                    "financialAccountType": {
                        "$ref": "#/components/schemas/FinancialAccountType"
                    }
                },
                "required": [
                    "profileType",
                    "financialAccountType"
                ]
            },
            "TriggerSyncResponse": {
                "type": "object",
                "properties": {
                    "workflowId": {
                        "type": "string",
                        "title": "the task id"
                    },
                    "runId": {
                        "type": "string"
                    }
                }
            },
            "UnSplitTransactionsRequest": {
                "type": "object",
                "properties": {
                    "transactionId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The transaction id\nValidations:\n- transaction_id must be greater than 0"
                    }
                },
                "required": [
                    "transactionId"
                ]
            },
            "UnSplitTransactionsResponse": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountTransaction"
                    }
                }
            },
            "UpdateBankAccountRequest": {
                "type": "object",
                "properties": {
                    "bankAccount": {
                        "$ref": "#/components/schemas/BankAccount"
                    }
                },
                "required": [
                    "bankAccount"
                ]
            },
            "UpdateBankAccountResponse": {
                "type": "object",
                "properties": {
                    "updated": {
                        "type": "boolean",
                        "title": "The bank account id"
                    },
                    "bankAccount": {
                        "$ref": "#/components/schemas/BankAccount"
                    }
                }
            },
            "UpdateBudgetRequest": {
                "type": "object",
                "properties": {
                    "budget": {
                        "$ref": "#/components/schemas/Budget"
                    }
                },
                "required": [
                    "budget"
                ]
            },
            "UpdateBudgetResponse": {
                "type": "object",
                "properties": {
                    "budget": {
                        "$ref": "#/components/schemas/Budget"
                    }
                }
            },
            "UpdateMilestoneRequest": {
                "type": "object",
                "properties": {
                    "milestone": {
                        "$ref": "#/components/schemas/Milestone"
                    }
                },
                "required": [
                    "milestone"
                ]
            },
            "UpdateMilestoneResponse": {
                "type": "object",
                "properties": {
                    "milestone": {
                        "$ref": "#/components/schemas/Milestone"
                    }
                }
            },
            "UpdateNoteToRecurringTransactionRequest": {
                "type": "object",
                "properties": {
                    "note": {
                        "$ref": "#/components/schemas/SmartNote"
                    }
                },
                "title": "UpdateNoteToTransactionRequest updates a note to a transaction",
                "required": [
                    "note"
                ]
            },
            "UpdateNoteToRecurringTransactionResponse": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountRecurringTransaction"
                    }
                },
                "title": "UpdateNoteToTransactionResponse is the responsed obtained after we update a note to a transaction"
            },
            "UpdateNoteToSmartGoalRequest": {
                "type": "object",
                "properties": {
                    "note": {
                        "$ref": "#/components/schemas/SmartNote"
                    }
                },
                "required": [
                    "note"
                ]
            },
            "UpdateNoteToSmartGoalResponse": {
                "type": "object",
                "properties": {
                    "note": {
                        "$ref": "#/components/schemas/SmartNote"
                    }
                }
            },
            "UpdateNoteToTransactionRequest": {
                "type": "object",
                "properties": {
                    "note": {
                        "$ref": "#/components/schemas/SmartNote"
                    }
                },
                "title": "UpdateNoteToTransactionRequest updates a note to a transaction",
                "required": [
                    "note"
                ]
            },
            "UpdateNoteToTransactionResponse": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountTransaction"
                    }
                },
                "title": "UpdateNoteToTransactionResponse is the responsed obtained after we update a note to a transaction"
            },
            "UpdatePocketRequest": {
                "type": "object",
                "properties": {
                    "pocket": {
                        "$ref": "#/components/schemas/Pocket"
                    }
                },
                "required": [
                    "pocket"
                ]
            },
            "UpdatePocketResponse": {
                "type": "object",
                "properties": {
                    "pocket": {
                        "$ref": "#/components/schemas/Pocket"
                    }
                }
            },
            "UpdateRecurringTransactionRequest": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountRecurringTransaction"
                    }
                },
                "title": "UpdateRecurringTransactionRequest is the update transaction request",
                "required": [
                    "transaction"
                ]
            },
            "UpdateRecurringTransactionResponse": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountRecurringTransaction"
                    }
                },
                "title": "UpdateRecurringTransactionResponse is the update transaction response"
            },
            "UpdateSingleTransactionRequest": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountTransaction"
                    }
                },
                "title": "UpdateSingleTransactionRequest is the update transaction request",
                "required": [
                    "transaction"
                ]
            },
            "UpdateSingleTransactionResponse": {
                "type": "object",
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/PlaidAccountTransaction"
                    }
                },
                "title": "UpdateSingleTransactionResponse is the update transaction response"
            },
            "UpdateSmartGoalRequest": {
                "type": "object",
                "properties": {
                    "smartGoal": {
                        "$ref": "#/components/schemas/SmartGoal"
                    }
                },
                "required": [
                    "smartGoal"
                ]
            },
            "UpdateSmartGoalResponse": {
                "type": "object",
                "properties": {
                    "smartGoalId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The smart goal id"
                    }
                }
            },
            "UpdateUserProfileRequest": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/FinancialUserProfile"
                    }
                },
                "title": "UpdateUserProfileRequest: Represents the request object invoked against the user\nservice to update a user profile",
                "required": [
                    "profile"
                ]
            },
            "UpdateUserProfileResponse": {
                "type": "object",
                "properties": {
                    "profileUpdated": {
                        "type": "boolean"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/FinancialUserProfile"
                    }
                },
                "title": "UpdateUserProfileResponse: Represents the response object returned as a response to\nthe `update user profile` request"
            },
            "AccountingAttachment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "fileName": {
                        "type": "string",
                        "description": "The attachment's name."
                    },
                    "fileUrl": {
                        "type": "string",
                        "description": "The attachment's url."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the accounting attachment belongs to."
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Consider using google.protobuf.Timestamp if precise time manipulation is required",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeRecordId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "The AccountingAttachment object is used to represent a company's attachments."
            },
            "AccountingIntegrationMergeLink": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "description": "Unique identifier for the merge link."
                    },
                    "integration": {
                        "type": "string",
                        "description": "The integration name."
                    },
                    "integrationSlug": {
                        "type": "string",
                        "description": "The slug for the integration."
                    },
                    "category": {
                        "type": "string",
                        "description": "The category of the integration."
                    },
                    "endUserOriginId": {
                        "type": "string",
                        "description": "Identifier of the end user's origin."
                    },
                    "endUserOrganizationName": {
                        "type": "string",
                        "description": "Name of the end user's organization."
                    },
                    "endUserEmailAddress": {
                        "type": "string",
                        "description": "Email address of the end user."
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the merge link."
                    },
                    "webhookListenerUrl": {
                        "type": "string",
                        "description": "URL for the webhook listener associated with the merge link."
                    },
                    "isDuplicate": {
                        "type": "boolean",
                        "description": "Indicates whether the merge link is a duplicate."
                    },
                    "token": {
                        "$ref": "#/components/schemas/MergeLinkedAccountToken"
                    },
                    "integrationName": {
                        "type": "string",
                        "description": "Name of the integration."
                    },
                    "integrationImage": {
                        "type": "string",
                        "description": "URL of the integration's image."
                    },
                    "integrationSquareImage": {
                        "type": "string",
                        "description": "URL of the integration's square image."
                    },
                    "account": {
                        "$ref": "#/components/schemas/LinkedAccountingAccount"
                    },
                    "mergeLinkedAccountId": {
                        "type": "string",
                        "description": "Identifier of the merged linked account."
                    },
                    "lastModifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp indicating when the merge link was last modified."
                    }
                }
            },
            "BalanceSheet": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "name": {
                        "type": "string",
                        "description": "The balance sheet's name."
                    },
                    "currency": {
                        "type": "string"
                    },
                    "company": {
                        "type": "string",
                        "title": "Company object for the given BalanceSheet object. May not necessarily be the compnay name but the \ncompany reference"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The balance sheet's date. The balance sheet data will\n reflect the company's financial position this point in time.\n\nConsider using google.protobuf.Timestamp"
                    },
                    "netAssets": {
                        "type": "number",
                        "format": "double",
                        "description": "The balance sheet's net assets."
                    },
                    "assets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportItem"
                        },
                        "description": "The balance sheet's total assets."
                    },
                    "liabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportItem"
                        },
                        "description": "The balance sheet's total liabilities."
                    },
                    "equity": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportItem"
                        },
                        "description": "The balance sheet's total equity."
                    },
                    "remoteGeneratedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time that balance sheet was generated by the accounting system.\n\nConsider using google.protobuf.Timestamp"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted by third party webhooks."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Consider using google.protobuf.Timestamp",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeRecordId": {
                        "type": "string",
                        "title": "the id as stored in merge"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "the time the record was created at"
                    }
                },
                "description": "The BalanceSheet object shows a company’s assets, liabilities, and equity. Assets should be equal\nto liability and equity combined.  This shows the company’s financial health at a specific point in time."
            },
            "BankAccountType1": {
                "type": "string",
                "enum": [
                    "BANK_ACCOUNT_TYPE_UNSPECIFIED",
                    "BANK_ACCOUNT_TYPE_CHECKING",
                    "BANK_ACCOUNT_TYPE_SAVINGS"
                ],
                "default": "BANK_ACCOUNT_TYPE_UNSPECIFIED"
            },
            "BankInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id of the record"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "accountNumber": {
                        "type": "string",
                        "title": "The account number"
                    },
                    "routingNumber": {
                        "type": "string",
                        "title": "The routing number"
                    },
                    "bankName": {
                        "type": "string",
                        "title": "The bank name"
                    },
                    "accountType": {
                        "$ref": "#/components/schemas/BankAccountType1"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the matching bank object was created in the third party system."
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "The record id as stored on the merge platform"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    }
                },
                "description": "The BankInfo object is used to represent the Bank Account information for an Employee."
            },
            "BenefitPlanType": {
                "type": "string",
                "enum": [
                    "BENEFIT_PLAN_TYPE_UNSPECIFIED",
                    "BENEFIT_PLAN_TYPE_MEDICAL",
                    "BENEFIT_PLAN_TYPE_HEALTH_SAVINGS",
                    "BENEFIT_PLAN_TYPE_INSURANCE",
                    "BENEFIT_PLAN_TYPE_RETIREMENT",
                    "BENEFIT_PLAN_TYPE_OTHER"
                ],
                "default": "BENEFIT_PLAN_TYPE_UNSPECIFIED",
                "description": "The type of benefit plan. Possible values include: MEDICAL, HEALTH_SAVINGS, \nINSURANCE, RETIREMENT, OTHER. In cases where there is no clear mapping, \nthe original value passed through will be returned."
            },
            "BusinessActionableInsight": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "example": "1234567890",
                        "title": "Unique identifier for the insight"
                    },
                    "type": {
                        "$ref": "#/components/schemas/BusinessActionableInsightType"
                    },
                    "description": {
                        "type": "string",
                        "example": "Reduce operating costs by optimizing energy usage.",
                        "title": "Detailed description of the insight"
                    },
                    "takeaway": {
                        "type": "string",
                        "example": "Optimizing energy usage can lead to significant cost savings.",
                        "title": "Key takeaway or summary of the insight"
                    },
                    "action": {
                        "type": "string",
                        "example": "Implement energy-efficient lighting and machinery.",
                        "title": "Suggested action based on the insight"
                    },
                    "expectedBenefit": {
                        "type": "string",
                        "example": "Expected to reduce energy costs by up to 20% annually.",
                        "title": "Expected benefit or outcome of taking the suggested action"
                    },
                    "tags": {
                        "type": "array",
                        "example": [
                            "cost-saving",
                            "energy-efficiency"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "title": "Tags associated with the insight for categorization"
                    },
                    "generatedTime": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Time when the insight was generated"
                    },
                    "metricsToOptimizeFor": {
                        "type": "array",
                        "example": [
                            "operating costs",
                            "energy consumption"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "title": "Specific business metrics that this insight aims to optimize"
                    }
                }
            },
            "BusinessActionableInsightType": {
                "type": "string",
                "enum": [
                    "BUSINESS_ACTIONABLE_INSIGHT_TYPE_UNSPECIFIED",
                    "BUSINESS_ACTIONABLE_INSIGHT_TYPE_OPERATING_EXPENSES",
                    "BUSINESS_ACTIONABLE_INSIGHT_TYPE_CASH_FLOW_MANAGEMENT",
                    "BUSINESS_ACTIONABLE_INSIGHT_TYPE_REVENUE_GROWTH",
                    "BUSINESS_ACTIONABLE_INSIGHT_TYPE_COST_REDUCTION",
                    "BUSINESS_ACTIONABLE_INSIGHT_TYPE_INVENTORY_MANAGEMENT",
                    "BUSINESS_ACTIONABLE_INSIGHT_TYPE_CAPITAL_ALLOCATION",
                    "BUSINESS_ACTIONABLE_INSIGHT_TYPE_INVESTMENT_OPPORTUNITIES",
                    "BUSINESS_ACTIONABLE_INSIGHT_TYPE_RISK_ASSESSMENT",
                    "BUSINESS_ACTIONABLE_INSIGHT_TYPE_TAX_PLANNING",
                    "BUSINESS_ACTIONABLE_INSIGHT_TYPE_DEBT_MANAGEMENT"
                ],
                "default": "BUSINESS_ACTIONABLE_INSIGHT_TYPE_UNSPECIFIED",
                "description": "- BUSINESS_ACTIONABLE_INSIGHT_TYPE_OPERATING_EXPENSES: Operating Expenses: Insights on managing day-to-day operational costs.\n - BUSINESS_ACTIONABLE_INSIGHT_TYPE_CASH_FLOW_MANAGEMENT: Cash Flow Management: Insights into cash inflows and outflows.\n - BUSINESS_ACTIONABLE_INSIGHT_TYPE_REVENUE_GROWTH: Revenue Growth: Strategies or opportunities to increase revenue.\n - BUSINESS_ACTIONABLE_INSIGHT_TYPE_COST_REDUCTION: Cost Reduction: Identifying areas where expenses can be minimized.\n - BUSINESS_ACTIONABLE_INSIGHT_TYPE_INVENTORY_MANAGEMENT: Inventory Management: Insights on optimizing inventory levels and costs.\n - BUSINESS_ACTIONABLE_INSIGHT_TYPE_CAPITAL_ALLOCATION: Capital Allocation: Guidance on efficient allocation of financial resources.\n - BUSINESS_ACTIONABLE_INSIGHT_TYPE_INVESTMENT_OPPORTUNITIES: Investment Opportunities: Identifying potential profitable investments.\n - BUSINESS_ACTIONABLE_INSIGHT_TYPE_RISK_ASSESSMENT: Risk Assessment: Insights into potential risks and mitigation strategies.\n - BUSINESS_ACTIONABLE_INSIGHT_TYPE_TAX_PLANNING: Tax Planning: Suggestions for tax optimization.\n - BUSINESS_ACTIONABLE_INSIGHT_TYPE_DEBT_MANAGEMENT: Debt Management: Strategies for managing and reducing debt.",
                "title": "BusinessActionableInsightType is the type of actionable insight"
            },
            "BusinessChartOfAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "the database record's id"
                    },
                    "mergeRecordId": {
                        "type": "string",
                        "title": "the account id as stored in merge-api. this is a required field"
                    },
                    "remoteId": {
                        "type": "string",
                        "title": "The third-party matching id for the object. For example, this field will be the id \nas seen in quickbooks for a sample remote connection against quickbookks"
                    },
                    "name": {
                        "type": "string",
                        "description": "The account's name."
                    },
                    "description": {
                        "type": "string",
                        "description": "The account's description."
                    },
                    "classification": {
                        "type": "string",
                        "description": "The account's broadest grouping. Possible values include: ASSET, EQUITY, EXPENSE, \nLIABILITY, REVENUE. In cases where there is no clear mapping, the original \nvalue passed through will be returned."
                    },
                    "type": {
                        "type": "string",
                        "description": "The account's type is a narrower and more specific grouping within the account's classification."
                    },
                    "status": {
                        "type": "string",
                        "description": "The account's status. Possible values include: ACTIVE, PENDING, INACTIVE. In cases where there is\n no clear mapping, the original value passed through will be returned."
                    },
                    "currentBalance": {
                        "type": "number",
                        "format": "double",
                        "description": "The account's current balance."
                    },
                    "currency": {
                        "type": "string"
                    },
                    "accountNumber": {
                        "type": "string",
                        "description": "The account's number."
                    },
                    "parentAccountId": {
                        "type": "string",
                        "description": "ID of the parent account."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the account belongs to."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted by third party webhooks."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "The Account object is what companies use to track transactions. \nThey can be both bank accounts or a general ledger account (also called a chart of accounts).\n\nNote: a company can have a multitude of these accounts",
                "required": [
                    "mergeRecordId"
                ]
            },
            "BusinessTransaction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "transactionType": {
                        "type": "string",
                        "description": "The type of transaction, which can by any transaction object not already included in Merge’s common model."
                    },
                    "number": {
                        "type": "string",
                        "description": "The transaction's number used for identifying purposes."
                    },
                    "transactionDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date upon which the transaction occurred."
                    },
                    "account": {
                        "type": "string",
                        "description": "The transaction's account."
                    },
                    "contact": {
                        "type": "string",
                        "description": "The contact to whom the transaction relates to."
                    },
                    "totalAmount": {
                        "type": "string",
                        "description": "The total amount being paid after taxes.\n\nMight be better as double."
                    },
                    "currency": {
                        "type": "string"
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "The transaction's exchange rate.\n\nAssuming string, but might be better as float or double."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the transaction belongs to."
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lineItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TransactionLineItem"
                        },
                        "title": "The TransactionLineItem object is used to represent a transaction's line item"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "accountingPeriod": {
                        "type": "string",
                        "description": "The accounting period that the Transaction was generated in."
                    },
                    "mergeRecordId": {
                        "type": "string"
                    },
                    "remoteId": {
                        "type": "string"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "* Credit Notes\n* Expenses\n* Invoices\n* Journal Entries\n* Payments\n* Purchase Orders\n* Vendor Credits",
                "title": "The Transaction common model includes records of all types of transactions that do not appear in other common models.\nThe type of transaction can be identified through the type field. More specifically, \nit will contain all types of transactions outside of:"
            },
            "CashFlowStatement": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "name": {
                        "type": "string",
                        "description": "The cash flow statement's name."
                    },
                    "currency": {
                        "type": "string",
                        "title": "The cash flow statement's currency"
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the cash flow statement belongs to."
                    },
                    "startPeriod": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The cash flow statement's start period.\n\nConsider using google.protobuf.Timestamp"
                    },
                    "endPeriod": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The cash flow statement's end period.\n\nConsider using google.protobuf.Timestamp"
                    },
                    "cashAtBeginningOfPeriod": {
                        "type": "number",
                        "format": "double",
                        "description": "Cash and cash equivalents at the beginning of the cash flow statement's period."
                    },
                    "cashAtEndOfPeriod": {
                        "type": "number",
                        "format": "double",
                        "description": "Cash and cash equivalents at the beginning of the cash flow statement's period."
                    },
                    "operatingActivities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportItem"
                        },
                        "title": "Operating activities"
                    },
                    "investingActivities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportItem"
                        },
                        "title": "Investing activities"
                    },
                    "financingActivities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportItem"
                        },
                        "title": "Financing activities"
                    },
                    "remoteGeneratedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time that cash flow statement was generated by the accounting system.\n\nConsider using google.protobuf.Timestamp"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted by third party webhooks."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Consider using google.protobuf.Timestamp",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeRecordId": {
                        "type": "string",
                        "title": "the cashflow statements id as stored in merge"
                    }
                },
                "description": "The CashFlowStatement object shows operating activities, investing activities, and financing activities over a\nperiod of time (month, quarter, or year)."
            },
            "CompanyAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "the database record's id"
                    },
                    "type": {
                        "type": "string"
                    },
                    "street1": {
                        "type": "string",
                        "description": "Line 1 of the address's street."
                    },
                    "street2": {
                        "type": "string",
                        "description": "Line 2 of the address's street."
                    },
                    "city": {
                        "type": "string",
                        "description": "The address's city."
                    },
                    "state": {
                        "type": "string",
                        "description": "The address's state or region."
                    },
                    "countrySubdivision": {
                        "type": "string",
                        "description": "Typically, this might just be 'state' but used your field name to keep it consistent with the JSON",
                        "title": "country's subdivision"
                    },
                    "country": {
                        "type": "string",
                        "description": "The address's country."
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "The address's zip code."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Consider using google.protobuf.Timestamp if precise time manipulation is required",
                        "title": "This is the datetime that this object was last updated by Merge"
                    }
                },
                "description": "The CompanyAddress object is used to represent a contact's or company's address."
            },
            "CompanyInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "the id of the record in our system"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "name": {
                        "type": "string",
                        "description": "The company's name."
                    },
                    "legalName": {
                        "type": "string",
                        "description": "The company's legal name."
                    },
                    "taxNumber": {
                        "type": "string",
                        "description": "The company's tax number."
                    },
                    "fiscalYearEndMonth": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The company's fiscal year end month."
                    },
                    "fiscalYearEndDay": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The company's fiscal year end day."
                    },
                    "currency": {
                        "type": "string",
                        "description": "The currency set in the company's accounting platform."
                    },
                    "remoteCreatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the third party's company was created.\n\nConsider using google.protobuf.Timestamp"
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The company's urls."
                    },
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAddress"
                        },
                        "title": "the company's addresses"
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "the company's phone numbers"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted by third party webhooks."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeRecordId": {
                        "type": "string",
                        "title": "the id of the record as stored in merge"
                    }
                },
                "description": "The CompanyInfo object is used to represent a company's information."
            },
            "CompanyProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id of the record"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "legalName": {
                        "type": "string",
                        "description": "The company's legal name."
                    },
                    "displayName": {
                        "type": "string",
                        "title": "The displayed name of the company"
                    },
                    "einNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The company's tax number."
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was created"
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "The uuid of the object as stored in merge"
                    }
                },
                "title": "The CompanyProfile object is used to represent a company within the HRIS / Payroll system.\nNOTE: a company can link multiple hris company profiles. This is important because a company can have multiple\nlocations and each location can have its own hris company profile"
            },
            "Contacts": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "name": {
                        "type": "string",
                        "description": "The contact's name."
                    },
                    "isSupplier": {
                        "type": "boolean",
                        "description": "Whether the contact is a supplier."
                    },
                    "isCustomer": {
                        "type": "boolean",
                        "description": "Whether the contact is a customer."
                    },
                    "emailAddress": {
                        "type": "string",
                        "description": "The contact's email address."
                    },
                    "taxNumber": {
                        "type": "string",
                        "description": "The contact's tax number."
                    },
                    "status": {
                        "type": "string",
                        "title": "The contact's status"
                    },
                    "currency": {
                        "type": "string",
                        "description": "The currency the contact's transactions are in."
                    },
                    "remoteUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the third party's contact was updated.\n\nConsider using google.protobuf.Timestamp"
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the contact belongs to."
                    },
                    "addressesIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Address object IDs for the given Contacts object.\n\nThese are IDs, not the Address structure itself"
                    },
                    "phoneNumbers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Phone numbers of the contact"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted by third party webhooks."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Consider using google.protobuf.Timestamp",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeRecordId": {
                        "type": "string",
                        "title": "The account id as seen in merge"
                    }
                },
                "description": "The Contact object refers to either a supplier or a customer."
            },
            "CreateAccountingProfileRequest": {
                "type": "object",
                "properties": {
                    "authZeroUserId": {
                        "type": "string",
                        "title": "the auth0 user id is required to create an account as it will be the source of truth used across the platform"
                    },
                    "email": {
                        "type": "string"
                    },
                    "companyName": {
                        "type": "string"
                    }
                },
                "description": "Defines a message named CreateAccountingProfileRequest.",
                "required": [
                    "authZeroUserId",
                    "email",
                    "companyName"
                ]
            },
            "CreateAccountingProfileResponse": {
                "type": "object",
                "properties": {
                    "profileId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "the profile identifier"
                    }
                },
                "description": "Defines a message named CreatesAccountingProfileResponse."
            },
            "CreditNote": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "the database record id as stored in our systems"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "transactionDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The credit note's transaction date.\n\nConsider using google.protobuf.Timestamp"
                    },
                    "status": {
                        "type": "string",
                        "description": "The credit note's status."
                    },
                    "number": {
                        "type": "string",
                        "description": "The credit note's number."
                    },
                    "contact": {
                        "type": "string",
                        "description": "The credit note's contact."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the credit note belongs to."
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "The credit note's exchange rate.\n\nConsider using double or float if this represents a number"
                    },
                    "totalAmount": {
                        "type": "number",
                        "format": "double",
                        "description": "The credit note's total amount."
                    },
                    "remainingCredit": {
                        "type": "number",
                        "format": "double",
                        "description": "The amount of value remaining in the credit note that the customer can use."
                    },
                    "lineItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreditNoteLineItem"
                        }
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "These are IDs"
                    },
                    "currency": {
                        "type": "string"
                    },
                    "remoteCreatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Consider using google.protobuf.Timestamp"
                    },
                    "remoteUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Consider using google.protobuf.Timestamp"
                    },
                    "paymentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "These are IDs",
                        "title": "Array of Payment object IDs"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    },
                    "accountingPeriod": {
                        "type": "string",
                        "description": "The accounting period that the CreditNote was generated in."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Consider using google.protobuf.Timestamp"
                    },
                    "mergeRecordId": {
                        "type": "string",
                        "title": "the id as stored in merge"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "A CreditNote is transaction issued to a customer, indicating a reduction or cancellation of the amount owed by the customer. \nIt is most generally used as an adjustment note used to rectify errors, returns, or overpayments related to a sales transaction. \nA CreditNote can be applied to Accounts Receivable Invoices to decrease the overall amount of the Invoice."
            },
            "CreditNoteLineItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "quantity": {
                        "type": "string"
                    },
                    "unitPrice": {
                        "type": "string",
                        "title": "Consider using double or float if this represents a number"
                    },
                    "taxRate": {
                        "type": "string",
                        "title": "This seems to be an ID"
                    },
                    "totalLineAmount": {
                        "type": "string",
                        "title": "Consider using double or float"
                    },
                    "trackingCategory": {
                        "type": "string",
                        "title": "This seems to be an ID"
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "These are IDs"
                    },
                    "account": {
                        "type": "string",
                        "title": "This seems to be an ID"
                    },
                    "company": {
                        "type": "string"
                    },
                    "remoteId": {
                        "type": "string"
                    },
                    "item": {
                        "type": "string"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    },
                    "memo": {
                        "type": "string"
                    }
                },
                "description": "CreditNoteLineItem is used to represent a credit note's line items."
            },
            "Deduction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "name": {
                        "type": "string",
                        "description": "The deduction's name."
                    },
                    "employeeDeduction": {
                        "type": "number",
                        "format": "double",
                        "description": "The amount of money that is withheld from an employee's gross pay by the employee."
                    },
                    "companyDeduction": {
                        "type": "number",
                        "format": "double",
                        "description": "The amount of money that is withheld on behalf of an employee by the company."
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "payrollRunMergeAccountId": {
                        "type": "string",
                        "description": "The payroll being run."
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "This is the record id as seen on the merge platform"
                    }
                },
                "description": "The Deduction object is used to represent an array of the wages\nwithheld from total earnings for the purpose of paying taxes."
            },
            "DeleteAccountingProfileResponse": {
                "type": "object",
                "properties": {
                    "isDeleted": {
                        "type": "boolean",
                        "description": "A boolean field named \"is_deleted\" with field number 1.",
                        "title": "whether the profile is deleted"
                    }
                },
                "description": "Defines a message named DeleteAccountingProfileResponse."
            },
            "DependentRelationship": {
                "type": "string",
                "enum": [
                    "DEPENDENT_RELATIONSHIP_UNSPECIFIED",
                    "DEPENDENT_RELATIONSHIP_CHILD",
                    "DEPENDENT_RELATIONSHIP_SPOUSE",
                    "DEPENDENT_RELATIONSHIP_DOMESTIC_PARTNER"
                ],
                "default": "DEPENDENT_RELATIONSHIP_UNSPECIFIED",
                "description": "The dependent's relationship to the employee. Possible values include: CHILD, \nSPOUSE, DOMESTIC_PARTNER. In cases where there is no clear mapping, \nthe original value passed through will be returned."
            },
            "Dependents": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id of the record"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The employee's first name."
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The employee's last name."
                    },
                    "middleName": {
                        "type": "string",
                        "title": "The employee's middle name"
                    },
                    "dependentRelationshipToEmployee": {
                        "$ref": "#/components/schemas/DependentRelationship"
                    },
                    "dateOfBirth": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The dependent's date of birth."
                    },
                    "gender": {
                        "$ref": "#/components/schemas/Gender"
                    },
                    "phoneNumber": {
                        "type": "string",
                        "title": "the phone number of the dependent"
                    },
                    "homeLocation": {
                        "$ref": "#/components/schemas/LocationAddress"
                    },
                    "isStudent": {
                        "type": "boolean",
                        "title": "Whether or not the dependent is a student"
                    },
                    "ssn": {
                        "type": "string",
                        "description": "The dependents's social security number."
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was created by Merge"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "This is the record id as seen on the merge platform"
                    }
                },
                "title": "Dependents object is used to represent a dependent (e.g. child, spouse, domestic partner, etc) of an Employee"
            },
            "Earning": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "amount": {
                        "type": "number",
                        "format": "double"
                    },
                    "type": {
                        "$ref": "#/components/schemas/EarningType"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "payrollRunMergeAccountId": {
                        "type": "string",
                        "description": "The payroll being run."
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "This is the record id as seen on the merge platform"
                    }
                },
                "description": "The Earning object is used to represent an array of different compensations \nthat an employee receives within specific wage categories."
            },
            "EarningType": {
                "type": "string",
                "enum": [
                    "EARNING_TYPE_UNSPECIFIED",
                    "EARNING_TYPE_SALARY",
                    "EARNING_TYPE_REIMBURSEMENT",
                    "EARNING_TYPE_OVERTIME",
                    "EARNING_TYPE_BONUS"
                ],
                "default": "EARNING_TYPE_UNSPECIFIED",
                "description": "The type of earning. Possible values include: SALARY, REIMBURSEMENT, OVERTIME, BONUS. \nIn cases where there is no clear mapping, the original value passed through will be returned."
            },
            "EmployeTimeOffBalance": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "balance": {
                        "type": "number",
                        "format": "double",
                        "title": "balance"
                    },
                    "used": {
                        "type": "number",
                        "format": "double",
                        "title": "used"
                    },
                    "policyType": {
                        "$ref": "#/components/schemas/PolicyType"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "This is the record id as seen on the merge platform"
                    }
                }
            },
            "Employee": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id of the record"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "employeeNumber": {
                        "type": "string",
                        "title": "The employee's number"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "The ID of the employee's company."
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The employee's first name."
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The employee's last name."
                    },
                    "employeesPreferredName": {
                        "type": "string",
                        "description": "The employee's preferred name."
                    },
                    "displayFullName": {
                        "type": "string",
                        "title": "The employee's full name, to use for display purposes. \nIf a preferred first name is available, the full name \nwill include the preferred first name"
                    },
                    "employeeUserNameAsSeenInRemoteUi": {
                        "type": "string",
                        "description": "The employee's username that appears in the remote UI."
                    },
                    "workEmail": {
                        "type": "string",
                        "description": "The employee's work email."
                    },
                    "personalEmail": {
                        "type": "string",
                        "title": "the employee's personal email"
                    },
                    "mobilePhoneNumber": {
                        "type": "string",
                        "description": "The employee's mobile phone number."
                    },
                    "employments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmployeeJobPositionAtCompany"
                        },
                        "title": "The employee's various position at the company"
                    },
                    "employmentType": {
                        "type": "string",
                        "description": "UUID fields",
                        "title": "the employment type"
                    },
                    "homeLocation": {
                        "$ref": "#/components/schemas/LocationAddress"
                    },
                    "workLocation": {
                        "$ref": "#/components/schemas/LocationAddress"
                    },
                    "manager": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "group": {
                        "$ref": "#/components/schemas/Group"
                    },
                    "ssn": {
                        "type": "string",
                        "title": "Other fields\nthe employee's social security number"
                    },
                    "gender": {
                        "$ref": "#/components/schemas/Gender"
                    },
                    "ethnicity": {
                        "$ref": "#/components/schemas/Ethnicity"
                    },
                    "maritalStatus": {
                        "$ref": "#/components/schemas/MaritalStatus"
                    },
                    "dateOfBirth": {
                        "type": "string",
                        "description": "The employee's date of birth.\n\nUse string for ISO 8601 datetime"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date that the employee started working. \nIf an employee was rehired, the most recent start date will be returned."
                    },
                    "remoteCreatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the third party's employee was created."
                    },
                    "employmentStatus": {
                        "$ref": "#/components/schemas/EmploymentStatus"
                    },
                    "terminationDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The employee's termination date."
                    },
                    "avatar": {
                        "type": "string",
                        "description": "The URL of the employee's avatar image."
                    },
                    "bankAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BankInfo"
                        },
                        "title": "The bank account information for an employee"
                    },
                    "dependents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Dependents"
                        },
                        "title": "The dependents of the employee"
                    },
                    "payrollRuns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmployeePayrollRun"
                        },
                        "description": "Represent an employee's pay statement for a specific payroll run."
                    },
                    "payTimeOffBalance": {
                        "$ref": "#/components/schemas/EmployeTimeOffBalance"
                    },
                    "benefits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmployeeBenefits"
                        },
                        "description": "the benefits associated with the employee."
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "Merge record UUID"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    }
                },
                "description": "The Employee object is used to represent any person who has been employed by a company."
            },
            "EmployeeBenefits": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id of the record"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "providerName": {
                        "type": "string",
                        "description": "The name of the benefit provider."
                    },
                    "employeeMergeAccountId": {
                        "type": "string",
                        "description": "The ID of the employee."
                    },
                    "benefitPlanMergeAccountId": {
                        "type": "string",
                        "description": "The ID of the benefit plan."
                    },
                    "employeeContribution": {
                        "type": "string",
                        "format": "uint64",
                        "description": "The employee's contribution."
                    },
                    "companyContribution": {
                        "type": "string",
                        "format": "uint64",
                        "description": "The company's contribution."
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The day and time the benefit started."
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The day and time the benefit ended."
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "This it the id of the record as seeon on the merge platform"
                    }
                },
                "description": "The Benefit object is used to represent a benefit that an employee has enrolled in."
            },
            "EmployeeJobPositionAtCompany": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id of the record"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "jobTitle": {
                        "type": "string",
                        "title": "The job title"
                    },
                    "payRate": {
                        "type": "number",
                        "format": "double",
                        "title": "the pay rate"
                    },
                    "payPeriod": {
                        "$ref": "#/components/schemas/PayPeriod"
                    },
                    "payFrequency": {
                        "$ref": "#/components/schemas/PayFrequency"
                    },
                    "payCurrency": {
                        "type": "string",
                        "title": "the pay currency"
                    },
                    "flsaStatus": {
                        "$ref": "#/components/schemas/FlsaStatus"
                    },
                    "effectiveDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "the positions effective date"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "This is the record id as seen on merge"
                    }
                },
                "description": "The Employment object is used to represent a job position at a company.\nNOTE: When there is a change in pay or title, integrations with historical \ndata will create new Employment objects while integrations without \nhistorical data will update existing ones."
            },
            "EmployeePayrollRun": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "grossPay": {
                        "type": "number",
                        "format": "double",
                        "description": "The total earnings throughout a given period for an employee before any deductions are made."
                    },
                    "netPay": {
                        "type": "number",
                        "format": "double",
                        "description": "The take-home pay throughout a given period for an employee after deductions are made."
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The day and time the payroll run started."
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "checkDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "earnings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Earning"
                        },
                        "title": "The Earning object is used to represent an array of different compensations\nthat an employee receives within specific wage categories"
                    },
                    "deductions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Deduction"
                        },
                        "description": "The Deduction object is used to represent an array of the wages withheld \nfrom total earnings for the purpose of paying taxes."
                    },
                    "taxes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tax"
                        },
                        "description": "The Tax object is used to represent an array of the tax deductions \nfor a given employee's payroll run."
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "payrollRunMergeAccountId": {
                        "type": "string",
                        "description": "The payroll being run."
                    },
                    "employeeMergeAccountId": {
                        "type": "string",
                        "description": "The employee whose payroll is being run."
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "This is the record id as seen on the merge platform"
                    }
                },
                "description": "The EmployeePayrollRun object is used to represent an employee's pay statement for a specific payroll run."
            },
            "EmployerBenefits": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id of the record"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object.\n\nExternal system identifier (integration)"
                    },
                    "benefitPlanType": {
                        "$ref": "#/components/schemas/BenefitPlanType"
                    },
                    "name": {
                        "type": "string",
                        "description": "The employer benefit's name - typically the carrier or network name.\n\nName of the benefit plan"
                    },
                    "description": {
                        "type": "string",
                        "description": "The employer benefit's description.\n\nDescription of the plan"
                    },
                    "deductionCode": {
                        "type": "string",
                        "description": "The employer benefit's deduction code.\n\nCode for payroll deduction"
                    },
                    "remoteWasDeleted": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Indicates whether or not this object has been deleted in the third party platform.\n\nFlag for deletion status"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Creation date in ISO 8601 format"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Last modification date in ISO 8601 format",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "description": "Merge record UUID",
                        "title": "The id of the record as seen on the merge platform"
                    },
                    "employeeBenefits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmployeeBenefits"
                        },
                        "title": "The employee benefits tied to this provided record"
                    }
                },
                "description": "EmployerBenefits is used to represent a benefit plan offered by a company."
            },
            "EmployerPayrollRun": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id of the record"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "runState": {
                        "$ref": "#/components/schemas/PayrollRunState"
                    },
                    "runType": {
                        "$ref": "#/components/schemas/PayrollRunType"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The day and time the payroll run started."
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The day and time the payroll run ended."
                    },
                    "checkDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The day and time the payroll run was checked."
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "title": "Indicates whether or not this object has been deleted in the third party platform"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was created by Merge"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "payrollRuns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmployeePayrollRun"
                        },
                        "title": "The set of payroll records for the payroll run"
                    }
                },
                "description": "The EmployerPayrollRun object is used to represent a group of pay statements for a specific pay schedule."
            },
            "EmploymentStatus": {
                "type": "string",
                "enum": [
                    "EMPLOYMENT_STATUS_UNSPECIFIED",
                    "EMPLOYMENT_STATUS_ACTIVE",
                    "EMPLOYMENT_STATUS_PENDING",
                    "EMPLOYMENT_STATUS_INACTIVE"
                ],
                "default": "EMPLOYMENT_STATUS_UNSPECIFIED"
            },
            "ErrorCode1": {
                "type": "string",
                "enum": [
                    "no_error",
                    "validation_error",
                    "authorization_model_not_found",
                    "authorization_model_resolution_too_complex",
                    "invalid_write_input",
                    "cannot_allow_duplicate_tuples_in_one_request",
                    "cannot_allow_duplicate_types_in_one_request",
                    "cannot_allow_multiple_references_to_one_relation",
                    "invalid_continuation_token",
                    "invalid_tuple_set",
                    "invalid_check_input",
                    "invalid_expand_input",
                    "unsupported_user_set",
                    "invalid_object_format",
                    "write_failed_due_to_invalid_input",
                    "authorization_model_assertions_not_found",
                    "latest_authorization_model_not_found",
                    "type_not_found",
                    "relation_not_found",
                    "empty_relation_definition",
                    "invalid_user",
                    "invalid_tuple",
                    "unknown_relation",
                    "store_id_invalid_length",
                    "assertions_too_many_items",
                    "id_too_long",
                    "authorization_model_id_too_long",
                    "tuple_key_value_not_specified",
                    "tuple_keys_too_many_or_too_few_items",
                    "page_size_invalid",
                    "param_missing_value",
                    "difference_base_missing_value",
                    "subtract_base_missing_value",
                    "object_too_long",
                    "relation_too_long",
                    "type_definitions_too_few_items",
                    "type_invalid_length",
                    "type_invalid_pattern",
                    "relations_too_few_items",
                    "relations_too_long",
                    "relations_invalid_pattern",
                    "object_invalid_pattern",
                    "query_string_type_continuation_token_mismatch",
                    "exceeded_entity_limit",
                    "invalid_contextual_tuple",
                    "duplicate_contextual_tuple",
                    "invalid_authorization_model",
                    "unsupported_schema_version"
                ],
                "default": "no_error",
                "title": "- validation_error: 2000 level errors are returned due to input error"
            },
            "Ethnicity": {
                "type": "string",
                "enum": [
                    "ETHNICITY_UNSPECIFIED",
                    "ETHNICITY_AMERICAN_INDIAN_OR_ALASKA_NATIVE",
                    "ETHNICITY_ASIAN_OR_INDIAN_SUBCONTINENT",
                    "ETHNICITY_BLACK_OR_AFRICAN_AMERICAN",
                    "ETHNICITY_HISPANIC_OR_LATINO",
                    "ETHNICITY_NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER",
                    "ETHNICITY_TWO_OR_MORE_RACES",
                    "ETHNICITY_WHITE",
                    "ETHNICITY_PREFER_NOT_TO_DISCLOSE"
                ],
                "default": "ETHNICITY_UNSPECIFIED",
                "description": "The employee's ethnicity. Possible values include: AMERICAN_INDIAN_OR_ALASKA_NATIVE, ASIAN_OR_INDIAN_SUBCONTINENT, \nBLACK_OR_AFRICAN_AMERICAN, HISPANIC_OR_LATINO, NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER, \nTWO_OR_MORE_RACES, WHITE, PREFER_NOT_TO_DISCLOSE. In cases where there is no clear mapping, the original value passed through will be returned."
            },
            "ExchangePublicLinkTokenForAccountTokenRequest": {
                "type": "object",
                "properties": {
                    "authZeroUserId": {
                        "type": "string",
                        "title": "the platform wide auth user id"
                    },
                    "publicToken": {
                        "type": "string",
                        "title": "the public link token"
                    },
                    "endUserOriginId": {
                        "type": "string",
                        "title": "the end user's origin id"
                    },
                    "organizationName": {
                        "type": "string",
                        "title": "the organization name"
                    }
                },
                "required": [
                    "authZeroUserId",
                    "publicToken",
                    "endUserOriginId",
                    "organizationName"
                ]
            },
            "ExchangePublicLinkTokenForAccountTokenResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "title": "the status of the exchange token"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "A string field named \"workflow_id\" with field number 2."
                    },
                    "workflowRunId": {
                        "type": "string",
                        "description": "A string field named \"workflow_run_id\" with field number 3."
                    }
                },
                "description": "Defines a message named ExchangePublicLinkTokenForAccountTokenResponse.",
                "required": [
                    "success"
                ]
            },
            "Expense": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "transactionDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the transaction occurred.\n\nConsider using google.protobuf.Timestamp"
                    },
                    "remoteCreatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the expense was created.\n\nConsider using google.protobuf.Timestamp"
                    },
                    "account": {
                        "type": "string",
                        "description": "The expense's payment account."
                    },
                    "contact": {
                        "type": "string",
                        "description": "The expense's contact."
                    },
                    "totalAmount": {
                        "type": "number",
                        "format": "double",
                        "description": "The expense's total amount."
                    },
                    "subTotal": {
                        "type": "number",
                        "format": "double",
                        "description": "The expense's total amount before tax."
                    },
                    "totalTaxAmount": {
                        "type": "number",
                        "format": "double",
                        "description": "The expense's total tax amount."
                    },
                    "currency": {
                        "type": "string",
                        "title": "The expense's currency"
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "The expense's exchange rate.\n\nConsider using double or float if this represents a number"
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the expense belongs to."
                    },
                    "memo": {
                        "type": "string",
                        "description": "The expense's private note."
                    },
                    "lines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExpenseLine"
                        },
                        "description": "The ExpenseLine object is used to represent an expense's line items."
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "These are IDs"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted by third party webhooks."
                    },
                    "accountingPeriod": {
                        "type": "string",
                        "description": "The accounting period that the Expense was generated in."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Consider using google.protobuf.Timestamp",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeRecordId": {
                        "type": "string"
                    }
                },
                "description": "The Expense object is used to represent a direct purchase by a business, typically made with a check, credit card, or cash. \nEach Expense object is dedicated to a grouping of expenses, with each expense recorded in the lines object.\n\nThe Expense object is used also used to represent refunds to direct purchases. Refunds can be distinguished from purchases \nby the amount sign of the records. Expense objects with a negative amount are purchases and Expense objects \nwith a positive amount are refunds to those purchases."
            },
            "ExpenseLine": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "netAmount": {
                        "type": "number",
                        "format": "double",
                        "description": "The line's net amount."
                    },
                    "trackingCategory": {
                        "type": "string",
                        "title": "This seems to be an ID"
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "These are IDs"
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the line belongs to."
                    },
                    "item": {
                        "type": "string",
                        "description": "The line's item.\n\nThis seems to be an ID"
                    },
                    "account": {
                        "type": "string",
                        "description": "The expense's payment account."
                    },
                    "contact": {
                        "type": "string",
                        "description": "The expense's contact.\n\nOptional based on provided JSON"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the item that was purchased by the company."
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "The expense line item's exchange rate.\n\nConsider using double or float if this represents a number"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "currency": {
                        "type": "string",
                        "title": "The expense line item's currency"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Consider using google.protobuf.Timestamp",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "The ExpenseLine object is used to represent an expense's line items."
            },
            "FlsaStatus": {
                "type": "string",
                "enum": [
                    "FLSA_STATUS_UNSPECIFIED",
                    "FLSA_STATUS_EXEMPT",
                    "FLSA_STATUS_NON_EXEMPT",
                    "FLSA_STATUS_SALARIED_NON_EXEMPT",
                    "FLSA_STATUS_OWNER"
                ],
                "default": "FLSA_STATUS_UNSPECIFIED",
                "description": "The position's FLSA status. Possible values include: EXEMPT, SALARIED_NONEXEMPT, \nNONEXEMPT, OWNER. In cases where there is no clear mapping, \nthe original value passed through will be returned."
            },
            "Gender": {
                "type": "string",
                "enum": [
                    "GENDER_UNSPECIFIED",
                    "GENDER_MALE",
                    "GENDER_FEMALE",
                    "GENDER_NON_BINARY",
                    "GENDER_OTHER",
                    "GENDER_PREFER_NOT_TO_DISCLOSE"
                ],
                "default": "GENDER_UNSPECIFIED",
                "description": "The employee's gender. Possible values include: MALE, FEMALE, NON-BINARY, OTHER,\nPREFER_NOT_TO_DISCLOSE. In cases where there is no clear mapping, \nthe original value passed through will be returned."
            },
            "GetMergeLinkTokenRequest": {
                "type": "object",
                "properties": {
                    "authZeroUserId": {
                        "type": "string",
                        "description": "This unique identifier typically represents the ID for your end user across all services.\nThis value must be distinct from other Linked Accounts' unique identifiers."
                    },
                    "organizationName": {
                        "type": "string",
                        "description": "Your end user's organization."
                    },
                    "email": {
                        "type": "string",
                        "description": "Your end user's email address. This is purely for\nidentification purposes - setting this value will not cause any emails to be sent."
                    }
                },
                "description": "Defines a message named GetMergeLinkTokenRequest.",
                "required": [
                    "authZeroUserId",
                    "organizationName",
                    "email"
                ]
            },
            "GetMergeLinkTokenResponse": {
                "type": "object",
                "properties": {
                    "linkToken": {
                        "type": "string",
                        "description": "A string field named \"link_token\" with field number 1.",
                        "title": "the link token"
                    },
                    "integrationName": {
                        "type": "string",
                        "description": "A string field named \"integration_name\" with field number 2.",
                        "title": "the integration name"
                    },
                    "magicLinkUrl": {
                        "type": "string",
                        "description": "A string field named \"magic_link_url\" with field number 3.",
                        "title": "the magic link URL"
                    },
                    "endUserOriginId": {
                        "type": "string",
                        "description": "A string field named \"end_user_origin_id\" with field number 4.",
                        "title": "the end user origin id"
                    },
                    "organizationName": {
                        "type": "string",
                        "description": "A string field named \"organization_name\" with field number 5.",
                        "title": "the organization name"
                    }
                },
                "description": "Defines a message named GetLinkTokenResponse."
            },
            "GetWorkflowExecutionStatusResponse": {
                "type": "object",
                "properties": {
                    "workflowId": {
                        "type": "string",
                        "title": "The workflow id"
                    },
                    "status": {
                        "type": "string",
                        "title": "The task status"
                    },
                    "runId": {
                        "type": "string",
                        "title": "The run id"
                    }
                }
            },
            "Group": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id of the record"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "name": {
                        "type": "string",
                        "title": "the pay group's name"
                    },
                    "type": {
                        "$ref": "#/components/schemas/PayGroupType"
                    },
                    "parentGroupMergeAccountId": {
                        "type": "string",
                        "title": "the parent pay group merge record id"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "This is the record id as seen on merge"
                    }
                },
                "description": "The Group object is used to represent any subset of employees, such as PayGroup or Team. Employees can be in multiple Groups."
            },
            "HealthCheckResponse2": {
                "type": "object",
                "properties": {
                    "healthy": {
                        "type": "boolean",
                        "title": "whether the service is healthy"
                    }
                },
                "description": "Defines a message named HealthCheckResponse."
            },
            "HrisIntegrationMergeLink": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "integration": {
                        "type": "string"
                    },
                    "integrationSlug": {
                        "type": "string"
                    },
                    "category": {
                        "type": "string"
                    },
                    "endUserOriginId": {
                        "type": "string"
                    },
                    "endUserOrganizationName": {
                        "type": "string"
                    },
                    "endUserEmailAddress": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "webhookListenerUrl": {
                        "type": "string"
                    },
                    "isDuplicate": {
                        "type": "boolean"
                    },
                    "token": {
                        "$ref": "#/components/schemas/MergeLinkedAccountToken"
                    },
                    "integrationName": {
                        "type": "string"
                    },
                    "integrationImage": {
                        "type": "string"
                    },
                    "integrationSquareImage": {
                        "type": "string"
                    },
                    "account": {
                        "$ref": "#/components/schemas/HrisLinkedAccount"
                    },
                    "mergeLinkedAccountId": {
                        "type": "string"
                    },
                    "lastModifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "HrisLinkedAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/CompanyProfile"
                    },
                    "benefitPlans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmployerBenefits"
                        },
                        "title": "the set of benefit plans offered by the company"
                    },
                    "employees": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Employee"
                        },
                        "title": "the set of employees employed by the employer"
                    },
                    "payrollRuns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmployerPayrollRun"
                        },
                        "title": "the set of payroll runs by the employer"
                    }
                }
            },
            "IncomeStatement": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "name": {
                        "type": "string",
                        "description": "The income statement's name."
                    },
                    "currency": {
                        "type": "string",
                        "description": "The income statement's currency."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the income statement belongs to."
                    },
                    "startPeriod": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The income statement's start period."
                    },
                    "endPeriod": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The income statement's end period."
                    },
                    "income": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportItem"
                        },
                        "title": "income"
                    },
                    "costOfSales": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportItem"
                        },
                        "title": "cost of sales"
                    },
                    "grossProfit": {
                        "type": "number",
                        "format": "double",
                        "description": "The revenue minus the cost of sale."
                    },
                    "operatingExpenses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportItem"
                        },
                        "title": "operating expenses"
                    },
                    "netOperatingIncome": {
                        "type": "number",
                        "format": "double",
                        "description": "The revenue minus the operating expenses."
                    },
                    "nonOperatingExpenses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReportItem"
                        }
                    },
                    "netIncome": {
                        "type": "number",
                        "format": "double",
                        "description": "The gross profit minus the total expenses."
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted by third party webhooks."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeRecordId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "The IncomeStatement object is used to represent a company’s income, the cost of sales, operating expenses, \nand other non-operating expenses. The object also includes other important values like gross profit, \ngross operating profit, and net income. This represents a period of time (month, quarter, or year)."
            },
            "Invoice": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "type": {
                        "type": "string",
                        "description": "Whether the invoice is an accounts receivable or accounts payable\n If type is accounts_payable, the invoice is a bill. If type is\n accounts_receivable, it is an invoice. Possible values include: ACCOUNTS_RECEIVABLE, ACCOUNTS_PAYABLE."
                    },
                    "contact": {
                        "type": "string",
                        "description": "The invoice's contact."
                    },
                    "number": {
                        "type": "string",
                        "description": "The invoice's number."
                    },
                    "issueDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The invoice's issue date."
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The invoice's due date."
                    },
                    "paidOnDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The invoice's paid date."
                    },
                    "memo": {
                        "type": "string",
                        "description": "The invoice's private note."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the invoice belongs to."
                    },
                    "currency": {
                        "type": "string",
                        "title": "The invoice's currency"
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "The invoice's exchange rate."
                    },
                    "totalDiscount": {
                        "type": "number",
                        "format": "float",
                        "description": "The total discounts applied to the total cost."
                    },
                    "subTotal": {
                        "type": "number",
                        "format": "float",
                        "description": "The total amount being paid before taxes."
                    },
                    "status": {
                        "type": "string"
                    },
                    "totalTaxAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "The total amount being paid in taxes."
                    },
                    "totalAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "The invoice's total amount."
                    },
                    "balance": {
                        "type": "number",
                        "format": "float",
                        "description": "The invoice's remaining balance."
                    },
                    "remoteUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the third party's invoice entry was updated."
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "payments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of Payment object IDs."
                    },
                    "lineItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InvoiceLineItem"
                        }
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    },
                    "accountingPeriod": {
                        "type": "string",
                        "description": "The accounting period that the Invoice was generated in."
                    },
                    "purchaseOrders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "mergeRecordId": {
                        "type": "string",
                        "title": "the account id as stored in merge"
                    }
                },
                "description": "The Invoice object represents an itemized record of goods and/or services sold to a customer."
            },
            "InvoiceLineItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "description": {
                        "type": "string",
                        "description": "The line item's description."
                    },
                    "unitPrice": {
                        "type": "number",
                        "format": "float",
                        "description": "The line item's unit price."
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The line item's quantity."
                    },
                    "totalAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "The line item's total amount."
                    },
                    "currency": {
                        "type": "string",
                        "title": "The line item's currency"
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "The line item's exchange rate."
                    },
                    "item": {
                        "type": "string"
                    },
                    "account": {
                        "type": "string"
                    },
                    "trackingCategory": {
                        "type": "string"
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the line item belongs to."
                    },
                    "mergeRecordId": {
                        "type": "string",
                        "title": "the id of the record as stored in merge"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Consider using google.protobuf.Timestamp",
                        "title": "This is the datetime that this object was last updated by Merge"
                    }
                },
                "description": "The Invoice object represents an itemized record of goods and/or services sold to a customer."
            },
            "Item": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "name": {
                        "type": "string",
                        "description": "The item's name."
                    },
                    "status": {
                        "type": "string"
                    },
                    "unitPrice": {
                        "type": "number",
                        "format": "float",
                        "description": "The item's unit price."
                    },
                    "purchasePrice": {
                        "type": "number",
                        "format": "float",
                        "description": "The price at which the item is purchased from a vendor."
                    },
                    "purchaseAccount": {
                        "type": "string",
                        "description": "References the default account used to record a purchase of the item."
                    },
                    "salesAccount": {
                        "type": "string",
                        "description": "References the default account used to record a sale."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the item belongs to."
                    },
                    "remoteUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the third party's item note was updated."
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted by third party webhooks."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeRecordId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "The Item object refers to the goods involved in a transaction."
            },
            "JournalEntry": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string"
                    },
                    "transactionDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The journal entry's transaction date."
                    },
                    "remoteCreatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the third party's journal entry was created."
                    },
                    "remoteUpdatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "payments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "memo": {
                        "type": "string",
                        "description": "The journal entry's private note."
                    },
                    "currency": {
                        "type": "string"
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "The journal entry's exchange rate.\n\nAssuming string due to the example provided, but could be float or double."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the journal entry belongs to."
                    },
                    "lines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JournalLine"
                        },
                        "description": "The JournalLine object is used to represent a journal entry's line items."
                    },
                    "journalNumber": {
                        "type": "string",
                        "description": "Reference number for identifying journal entries."
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    },
                    "postingStatus": {
                        "type": "string"
                    },
                    "accountingPeriod": {
                        "type": "string",
                        "description": "The accounting period that the JournalEntry was generated in."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "mergeRecordId": {
                        "type": "string",
                        "title": "the id of the record as stored in merge"
                    },
                    "appliedPayments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the Payment Applied to Lines common models \nrelated to a given Invoice, Credit Note, or Journal Entry."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "A JournalEntry is a record of a transaction or event that is entered into a company's accounting system.\n\nThe JournalEntry common model contains records that are automatically created as a result of a \ncertain type of transaction, like an Invoice, and records that are manually created against a company’s ledger.\n\nThe lines of a given JournalEntry object should always sum to 0. A positive net_amount means\nthe line represents a debit and a negative net_amount represents a credit."
            },
            "JournalLine": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "account": {
                        "type": "string"
                    },
                    "netAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "The value of the line item including taxes and other fees.\n\nMight want to use double or a more precise type"
                    },
                    "trackingCategory": {
                        "type": "string"
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "contact": {
                        "type": "string"
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the journal entry belongs to."
                    },
                    "description": {
                        "type": "string",
                        "description": "The line's description."
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "The journal line item's exchange rate.\n\nAssuming string due to the example provided, but could be float or double."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "The JournalLine object is used to represent a journal entry's line items."
            },
            "LinkedAccountingAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountingAttachment"
                        },
                        "title": "Represent a company's attachments. a business can have many attachments"
                    },
                    "companyInfo": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CompanyInfo"
                        },
                        "description": "The CompanyInfo object is used to represent a company's information."
                    },
                    "purchaseOrders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PurchaseOrder"
                        },
                        "title": "a business can have many purchase orders"
                    },
                    "balanceSheets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BalanceSheet"
                        },
                        "title": "The BalanceSheet object shows a company’s assets, liabilities, and equity. Assets should be equal to liability and equity combined. This shows the company’s financial health at a specific point in time.\na business can have many balance sheets"
                    },
                    "cashFlowStatements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CashFlowStatement"
                        },
                        "title": "The CashFlowStatement object shows operating activities, investing activities, and financing activities over a period of time (month, quarter, or year).\na company can have many cash flow statements"
                    },
                    "incomeStatements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IncomeStatement"
                        },
                        "title": "a business can have many income statements"
                    },
                    "chartOfAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessChartOfAccount"
                        },
                        "title": "A \"Business Chart of Accounts\" is a structured list of a company's general ledger accounts. \nThese accounts are used to categorize every financial transaction a company makes. \nThis structure allows businesses to systematically track, manage, and report their financial activities"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Item"
                        },
                        "title": "a business can have many items"
                    },
                    "taxRates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaxRate"
                        },
                        "title": "a business can have many tax rates"
                    },
                    "contacts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Contacts"
                        },
                        "description": "The Contact object refers to either a supplier or a customer."
                    },
                    "invoices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Invoice"
                        },
                        "title": "a business can have many invoices"
                    },
                    "payments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Payment"
                        },
                        "title": "a business can have many payments"
                    },
                    "expenses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Expense"
                        },
                        "title": "a business can have many expenses"
                    },
                    "journalEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/JournalEntry"
                        },
                        "title": "a business can have many journal entries"
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessTransaction"
                        },
                        "title": "a business can have many transactions"
                    },
                    "vendorCredits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VendorCredit"
                        },
                        "title": "a business can have many vendor credits"
                    },
                    "creditNotes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CreditNote"
                        },
                        "title": "a business can have many credit notes"
                    }
                }
            },
            "LocationAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id of the record"
                    },
                    "remoteId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The location's name."
                    },
                    "phoneNumber": {
                        "type": "string",
                        "description": "The location's phone number."
                    },
                    "street1": {
                        "type": "string",
                        "description": "Line 1 of the location's street address."
                    },
                    "street2": {
                        "type": "string",
                        "description": "Line 2 of the location's street address."
                    },
                    "city": {
                        "type": "string",
                        "description": "The location's city."
                    },
                    "state": {
                        "type": "string",
                        "description": "The location's state. Represents a region if outside of the US."
                    },
                    "zipCode": {
                        "type": "string",
                        "description": "The location's zip code or postal code."
                    },
                    "country": {
                        "type": "string",
                        "description": "The location's country."
                    },
                    "locationType": {
                        "$ref": "#/components/schemas/LocationType"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "This is the record id as seen on merge"
                    }
                },
                "description": "The Location object is used to represent an address that can be associated with an employee."
            },
            "LocationType": {
                "type": "string",
                "enum": [
                    "LOCATION_TYPE_UNSPECIFIED",
                    "LOCATION_TYPE_HOME",
                    "LOCATION_TYPE_WORK"
                ],
                "default": "LOCATION_TYPE_UNSPECIFIED",
                "description": "The location's type. Can be either WORK or HOME Possible values include: HOME, WORK.\nIn cases where there is no clear mapping, the original value passed through will be returned."
            },
            "MaritalStatus": {
                "type": "string",
                "enum": [
                    "MARITAL_STATUS_UNSPECIFIED",
                    "MARITAL_STATUS_SINGLE",
                    "MARITAL_STATUS_MARRIED_FILING_JOINTLY",
                    "MARITAL_STATUS_MARRIED_FILING_SEPARATELY",
                    "MARITAL_STATUS_HEAD_OF_HOUSEHOLD",
                    "MARITAL_STATUS_QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD"
                ],
                "default": "MARITAL_STATUS_UNSPECIFIED",
                "description": "The employee's filing status as related to marital status. Possible values include: SINGLE, \nMARRIED_FILING_JOINTLY, MARRIED_FILING_SEPARATELY, HEAD_OF_HOUSEHOLD, QUALIFYING_WIDOW_OR_WIDOWER_WITH_DEPENDENT_CHILD.\nIn cases where there is no clear mapping, the original value passed through will be returned."
            },
            "MergeBusinessProfile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "authZeroUserId": {
                        "type": "string",
                        "title": "the auth0 user id is required to create an account as it will be the source of truth used across the platform"
                    },
                    "companyName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "title": "a user profile can have many links (connected institutions) of which finanical accounts are tied to (checking, savings, etc)"
                    },
                    "accountingIntegrationMergeLink": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountingIntegrationMergeLink"
                        },
                        "title": "this is the accounting integration the business has decided to authorize"
                    },
                    "payrollIntegrationMergeLink": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HrisIntegrationMergeLink"
                        },
                        "title": "this is the payroll integration the business has decided to authorize"
                    },
                    "actionablePersonalInsights": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessActionableInsight"
                        },
                        "title": "ths is the actionable inisghts the business has be provided with"
                    }
                },
                "title": "MergeBusinessProfile stores high level user profile details\nsuch as the id, user_id tied to the profile, and many more",
                "required": [
                    "authZeroUserId",
                    "email"
                ]
            },
            "MergeLinkedAccountToken": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "itemId": {
                        "type": "string",
                        "title": "the id of the item the token is tied to"
                    },
                    "keyId": {
                        "type": "string"
                    },
                    "accessToken": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "mergeEndUserOriginId": {
                        "type": "string",
                        "description": "This is what you'll pass to Merge as the end_user_origin_id."
                    },
                    "mergeIntegrationSlug": {
                        "type": "string",
                        "description": "The integration slug/identifier. This is returned at the end of the linking flow."
                    }
                }
            },
            "PayFrequency": {
                "type": "string",
                "enum": [
                    "PAY_FREQUENCY_UNSPECIFIED",
                    "PAY_FREQUENCY_WEEKLY",
                    "PAY_FREQUENCY_BIWEEKLY",
                    "PAY_FREQUENCY_MONTHLY",
                    "PAY_FREQUENCY_QUARTERLY",
                    "PAY_FREQUENCY_SEMIANNUALLY",
                    "PAY_FREQUENCY_ANNUALLY",
                    "PAY_FREQUENCY_THIRTEEN_MONTHLY",
                    "PAY_FREQUENCY_PRO_RATA",
                    "PAY_FREQUENCY_SEMIMONTHLY"
                ],
                "default": "PAY_FREQUENCY_UNSPECIFIED",
                "description": "The position's pay frequency. Possible values include: WEEKLY, BIWEEKLY, MONTHLY, \nQUARTERLY, SEMIANNUALLY, ANNUALLY, THIRTEEN-MONTHLY, PRO_RATA, SEMIMONTHLY. \nIn cases where there is no clear mapping, the original value passed through will be returned."
            },
            "PayGroupType": {
                "type": "string",
                "enum": [
                    "PAY_GROUP_TYPE_UNSPECIFIED",
                    "PAY_GROUP_TYPE_TEAM",
                    "PAY_GROUP_TYPE_DEPARTMENT",
                    "PAY_GROUP_TYPE_COST_CENTER",
                    "PAY_GROUP_TYPE_BUSINESS_UNIT",
                    "PAY_GROUP_TYPE_GROUP"
                ],
                "default": "PAY_GROUP_TYPE_UNSPECIFIED",
                "description": "The group type Possible values include: TEAM, DEPARTMENT, COST_CENTER, BUSINESS_UNIT, GROUP. \nIn cases where there is no clear mapping, the original value passed through will be returned."
            },
            "PayPeriod": {
                "type": "string",
                "enum": [
                    "PAY_PERIOD_UNSPECIFIED",
                    "PAY_PERIOD_HOUR",
                    "PAY_PERIOD_DAY",
                    "PAY_PERIOD_WEEK",
                    "PAY_PERIOD_EVERY_TWO_WEEKS",
                    "PAY_PERIOD_SEMIMONTHLY",
                    "PAY_PERIOD_MONTH",
                    "PAY_PERIOD_QUARTER",
                    "PAY_PERIOD_EVERY_SIX_MONTHS",
                    "PAY_PERIOD_YEAR"
                ],
                "default": "PAY_PERIOD_UNSPECIFIED",
                "description": "The time period this pay rate encompasses. Possible values include: \nHOUR, DAY, WEEK, EVERY_TWO_WEEKS, SEMIMONTHLY, MONTH, QUARTER, \nEVERY_SIX_MONTHS, YEAR. In cases where there is no clear mapping, \nthe original value passed through will be returned."
            },
            "Payment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string"
                    },
                    "transactionDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The payment's transaction date."
                    },
                    "contact": {
                        "type": "string",
                        "description": "The supplier, or customer involved in the payment."
                    },
                    "account": {
                        "type": "string",
                        "description": "The supplier’s or customer’s account in which the payment is made."
                    },
                    "currency": {
                        "type": "string"
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "The payment's exchange rate.\n\nAssuming string due to the example provided, but could be float or double."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the payment belongs to."
                    },
                    "totalAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "The total amount of money being paid to the supplier, or customer, after taxes.\n\nMight want to use double or a more precise type"
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "remoteUpdatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    },
                    "accountingPeriod": {
                        "type": "string",
                        "description": "The accounting period that the Payment was generated in."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeRecordId": {
                        "type": "string",
                        "title": "the id as stored in merge"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "The Payment object represents general payments made towards a specific transaction."
            },
            "PayrollRunState": {
                "type": "string",
                "enum": [
                    "PAYROLL_RUN_STATE_UNSPECIFIED",
                    "PAYROLL_RUN_STATE_PAID",
                    "PAYROLL_RUN_STATE_DRAFT",
                    "PAYROLL_RUN_STATE_APPROVED",
                    "PAYROLL_RUN_STATE_FAILED",
                    "PAYROLL_RUN_STATE_CLOSED"
                ],
                "default": "PAYROLL_RUN_STATE_UNSPECIFIED",
                "description": "The state of the payroll run Possible values include: PAID, DRAFT, APPROVED, FAILED, CLOSED. \nIn cases where there is no clear mapping, the original value passed through will be returned."
            },
            "PayrollRunType": {
                "type": "string",
                "enum": [
                    "PAYROLL_RUN_TYPE_UNSPECIFIED",
                    "PAYROLL_RUN_TYPE_REGULAR",
                    "PAYROLL_RUN_TYPE_OFF_CYCLE",
                    "PAYROLL_RUN_TYPE_CORRECTION",
                    "PAYROLL_RUN_TYPE_TERMINATION",
                    "PAYROLL_RUN_TYPE_SIGN_ON_BONUS"
                ],
                "default": "PAYROLL_RUN_TYPE_UNSPECIFIED",
                "description": "The type of the payroll run Possible values include: REGULAR, OFF_CYCLE, CORRECTION, TERMINATION, SIGN_ON_BONUS. \nIn cases where there is no clear mapping, the original value passed through will be returned."
            },
            "PolicyType": {
                "type": "string",
                "enum": [
                    "POLICY_TYPE_UNSPECIFIED",
                    "POLICY_TYPE_VACATION",
                    "POLICY_TYPE_SICK",
                    "POLICY_TYPE_PERSONAL",
                    "POLICY_TYPE_JURY_DUTY",
                    "POLICY_TYPE_VOLUNTEER",
                    "POLICY_TYPE_BEREAVEMENT"
                ],
                "default": "POLICY_TYPE_UNSPECIFIED",
                "title": "The policy type of this time off balance. Possible values include: VACATION, SICK, PERSONAL,\nJURY_DUTY, VOLUNTEER, BEREAVEMENT. In cases where there is no clear mapping, the original\nvalue passed through will be returned"
            },
            "PurchaseOrder": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "mergeRecordId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "issueDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The purchase order's issue date."
                    },
                    "purchaseOrderNumber": {
                        "type": "string",
                        "description": "The human-readable number of the purchase order."
                    },
                    "deliveryDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The purchase order's delivery date."
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/CompanyAddress"
                    },
                    "customer": {
                        "type": "string",
                        "description": "The contact making the purchase order."
                    },
                    "vendor": {
                        "type": "string",
                        "description": "The party fulfilling the purchase order."
                    },
                    "memo": {
                        "type": "string",
                        "description": "A memo attached to the purchase order."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the purchase order belongs to."
                    },
                    "totalAmount": {
                        "type": "number",
                        "format": "float",
                        "description": "The purchase order's total amount.\n\nMight be better as double."
                    },
                    "currency": {
                        "type": "string",
                        "description": "The purchase order's currency."
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "Assuming string, but might be better as float or double."
                    },
                    "lineItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PurchaseOrderLineItem"
                        }
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "remoteCreatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "remoteUpdatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    },
                    "accountingPeriod": {
                        "type": "string",
                        "description": "The accounting period that the PurchaseOrder was generated in."
                    },
                    "remoteId": {
                        "type": "string"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "The PurchaseOrder object is a record of request for a product or service between a buyer and seller."
            },
            "PurchaseOrderLineItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "quantity": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "unitPrice": {
                        "type": "string",
                        "description": "Assuming string, but might be better as float or double."
                    },
                    "item": {
                        "type": "string"
                    },
                    "account": {
                        "type": "string"
                    },
                    "trackingCategory": {
                        "type": "string"
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "taxAmount": {
                        "type": "string"
                    },
                    "totalLineAmount": {
                        "type": "string"
                    },
                    "currency": {
                        "type": "string"
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "Assuming string, but might be better as float or double."
                    },
                    "company": {
                        "type": "string"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    }
                },
                "description": "The PurchaseOrderLineItem object is used to represent a purchase order's line item."
            },
            "ReadAccountingProfileResponse": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/MergeBusinessProfile"
                    }
                },
                "description": "Defines a message named ReadProfileRequest."
            },
            "ReadBalanceSheetsRequest": {
                "type": "object",
                "properties": {
                    "authZeroUserId": {
                        "type": "string",
                        "title": "The platform wide end user id"
                    },
                    "acountingIntegrationMergeLinkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The accounting integration merge link id\nValidations:\n- acounting_integration_merge_link_id must be greater than 0"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The start date\nValidations:\n- start_date must be a valid date"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The end date\nValidations:\n- end_date must be a valid date"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32",
                        "title": "The page size"
                    },
                    "pageNumber": {
                        "type": "integer",
                        "format": "int32",
                        "title": "The page number"
                    }
                },
                "required": [
                    "authZeroUserId",
                    "acountingIntegrationMergeLinkId",
                    "startDate",
                    "endDate",
                    "pageSize",
                    "pageNumber"
                ]
            },
            "ReadBalanceSheetsResponse": {
                "type": "object",
                "properties": {
                    "balanceSheets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BalanceSheet"
                        },
                        "title": "the balance sheets"
                    },
                    "nextPage": {
                        "type": "integer",
                        "format": "int32",
                        "title": "the pagination token"
                    }
                }
            },
            "ReadBusinessChartOfAccountsRequest": {
                "type": "object",
                "properties": {
                    "authZeroUserId": {
                        "type": "string",
                        "title": "The platform wide end user id"
                    },
                    "acountingIntegrationMergeLinkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The accounting integration merge link id\nValidations:\n- acounting_integration_merge_link_id must be greater than 0"
                    }
                },
                "required": [
                    "authZeroUserId",
                    "acountingIntegrationMergeLinkId"
                ]
            },
            "ReadBusinessChartOfAccountsResponse": {
                "type": "object",
                "properties": {
                    "chartOfAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessChartOfAccount"
                        },
                        "title": "the chart of accounts"
                    }
                }
            },
            "ReadBusinessTransactionsRequest": {
                "type": "object",
                "properties": {
                    "authZeroUserId": {
                        "type": "string",
                        "description": "The ID of the user whose transactions are to be fetched."
                    },
                    "linkedAccountingAccountId": {
                        "type": "string",
                        "format": "uint64",
                        "description": "The ID of the accounting account whose transactions are to be fetched."
                    },
                    "pageNumber": {
                        "type": "string",
                        "format": "uint64",
                        "description": "The page number of the paginated results."
                    },
                    "pageSize": {
                        "type": "string",
                        "format": "uint64",
                        "description": "The number of items to be returned per page."
                    }
                },
                "description": "Request for reading business transactions with pagination and time filtering.",
                "required": [
                    "authZeroUserId",
                    "linkedAccountingAccountId",
                    "pageNumber",
                    "pageSize"
                ]
            },
            "ReadBusinessTransactionsResponse": {
                "type": "object",
                "properties": {
                    "transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BusinessTransaction"
                        },
                        "description": "The list of transactions for the current page."
                    },
                    "nextPage": {
                        "type": "string",
                        "format": "uint64",
                        "description": "The current page number."
                    }
                },
                "description": "Response for the request containing the paginated list of transactions."
            },
            "ReadCashFlowStatementsRequest": {
                "type": "object",
                "properties": {
                    "authZeroUserId": {
                        "type": "string",
                        "title": "The platform wide end user id"
                    },
                    "acountingIntegrationMergeLinkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The accounting integration merge link id\nValidations:\n- acounting_integration_merge_link_id must be greater than 0"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The start date\nValidations:\n- start_date must be a valid date"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The end date\nValidations:\n- end_date must be a valid date"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32",
                        "title": "The page size"
                    },
                    "pageNumber": {
                        "type": "integer",
                        "format": "int32",
                        "title": "The page number"
                    }
                },
                "required": [
                    "authZeroUserId",
                    "acountingIntegrationMergeLinkId",
                    "startDate",
                    "endDate",
                    "pageSize",
                    "pageNumber"
                ]
            },
            "ReadCashFlowStatementsResponse": {
                "type": "object",
                "properties": {
                    "cashFlowStatements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CashFlowStatement"
                        },
                        "title": "the cashflow sheets"
                    },
                    "nextPage": {
                        "type": "integer",
                        "format": "int32",
                        "title": "the pagination token"
                    }
                }
            },
            "ReadIncomeStatementsRequest": {
                "type": "object",
                "properties": {
                    "authZeroUserId": {
                        "type": "string",
                        "title": "The platform wide end user id"
                    },
                    "acountingIntegrationMergeLinkId": {
                        "type": "string",
                        "format": "uint64",
                        "title": "The accounting integration merge link id\nValidations:\n- acounting_integration_merge_link_id must be greater than 0"
                    },
                    "startDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The start date\nValidations:\n- start_date must be a valid date"
                    },
                    "endDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "The end date\nValidations:\n- end_date must be a valid date"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32",
                        "title": "The page size"
                    },
                    "pageNumber": {
                        "type": "integer",
                        "format": "int32",
                        "title": "The page number"
                    }
                },
                "required": [
                    "authZeroUserId",
                    "acountingIntegrationMergeLinkId",
                    "startDate",
                    "endDate",
                    "pageSize",
                    "pageNumber"
                ]
            },
            "ReadIncomeStatementsResponse": {
                "type": "object",
                "properties": {
                    "incomeStatements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/IncomeStatement"
                        },
                        "title": "the cashflow sheets"
                    },
                    "nextPage": {
                        "type": "integer",
                        "format": "int32",
                        "title": "the pagination token"
                    }
                }
            },
            "ReadynessCheckResponse2": {
                "type": "object",
                "properties": {
                    "healthy": {
                        "type": "boolean",
                        "title": "whether the service is ready to receive traffic"
                    }
                },
                "description": "Defines a message named ReadynessCheckResponse."
            },
            "ReportItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string",
                        "title": "the id as stored in the third-party system"
                    },
                    "name": {
                        "type": "string",
                        "description": "The report item's name."
                    },
                    "value": {
                        "type": "string",
                        "format": "int64",
                        "description": "The report item's value."
                    },
                    "company": {
                        "type": "string",
                        "title": "The company the report item belongs to. may not necessarily be the company name but a reference instead"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Consider using google.protobuf.Timestamp",
                        "title": "This is the datetime that this object was last updated by Merge"
                    }
                },
                "description": "The ReportItem object is used to represent a report item for a Balance Sheet, \nCash Flow Statement or Profit and Loss Report."
            },
            "Tax": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "id"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "name": {
                        "type": "string",
                        "description": "The tax's name."
                    },
                    "amount": {
                        "type": "number",
                        "format": "double",
                        "description": "The tax amount."
                    },
                    "employerTax": {
                        "type": "boolean",
                        "description": "Whether or not the employer is responsible for paying the tax."
                    },
                    "remoteWasDeleted": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "payrollRunMergeAccountId": {
                        "type": "string",
                        "description": "The payroll being run."
                    },
                    "mergeAccountId": {
                        "type": "string",
                        "title": "This is the record id as seen on the merge platform"
                    }
                },
                "description": "The Tax object is used to represent an array of the tax deductions for a given employee's payroll run."
            },
            "TaxRate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string",
                        "description": "The third-party API ID of the matching object."
                    },
                    "description": {
                        "type": "string",
                        "description": "The tax rate's description."
                    },
                    "totalTaxRate": {
                        "type": "number",
                        "format": "double",
                        "description": "The tax rate's total tax rate."
                    },
                    "effectiveTaxRate": {
                        "type": "number",
                        "format": "double",
                        "description": "The tax rate's effective tax rate."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the tax rate belongs to."
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "This is the datetime that this object was last updated by Merge"
                    },
                    "mergeRecordId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "The TaxRate object is used to represent a tax rate."
            },
            "TransactionLineItem": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "remoteId": {
                        "type": "string"
                    },
                    "memo": {
                        "type": "string",
                        "description": "An internal note used by the business to clarify purpose of the transaction."
                    },
                    "unitPrice": {
                        "type": "string",
                        "description": "The line item's unit price."
                    },
                    "quantity": {
                        "type": "string",
                        "description": "The line item's quantity."
                    },
                    "item": {
                        "type": "string"
                    },
                    "account": {
                        "type": "string",
                        "description": "The line item's account."
                    },
                    "trackingCategory": {
                        "type": "string",
                        "description": "The line's associated tracking category."
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "totalLineAmount": {
                        "type": "string",
                        "description": "The line item's total."
                    },
                    "taxRate": {
                        "type": "string",
                        "description": "The line item's tax rate."
                    },
                    "currency": {
                        "type": "string",
                        "title": "The line item's currency"
                    },
                    "exchangeRate": {
                        "type": "string",
                        "description": "The line item's exchange rate.\n\nAssuming string, but might be better as float or double."
                    },
                    "company": {
                        "type": "string",
                        "description": "The company the line belongs to."
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "description": "Indicates whether or not this object has been deleted in the third party platform."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "description": "The TransactionLineItem object is used to represent a transaction's line items."
            },
            "UpdateAccountingProfileRequest": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/MergeBusinessProfile"
                    }
                },
                "description": "Defines a message named UpdateAccountingProfileRequest."
            },
            "UpdateAccountingProfileResponse": {
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/MergeBusinessProfile"
                    }
                },
                "description": "Defines a message named UpdateAccountingProfileResponse."
            },
            "ValidationErrorMessageResponse1": {
                "type": "object",
                "example": {
                    "code": "validation_error",
                    "message": "Generic validation error"
                },
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/ErrorCode1"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "VendorCredit": {
                "type": "object",
                "properties": {
                    "mergeRecordId": {
                        "type": "string",
                        "title": "Unique identifier for the Merge account"
                    },
                    "remoteId": {
                        "type": "string",
                        "title": "Identifier for the VendorCredit in the remote system"
                    },
                    "number": {
                        "type": "string",
                        "title": "Transaction number or reference identifier"
                    },
                    "transactionDate": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Date of the transaction"
                    },
                    "vendor": {
                        "type": "string",
                        "title": "Name or identifier of the vendor"
                    },
                    "totalAmount": {
                        "type": "number",
                        "format": "double",
                        "title": "Total amount of credit owed"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency code for the transaction (e.g., USD, EUR)"
                    },
                    "exchangeRate": {
                        "type": "string",
                        "title": "Exchange rate used for currency conversion, represented as a string for precision"
                    },
                    "company": {
                        "type": "string",
                        "title": "Identifier or name of the associated company"
                    },
                    "lines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VendorCreditLine"
                        },
                        "title": "Line items associated with the vendor credit"
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Tracking categories for accounting purposes"
                    },
                    "remoteWasDeleted": {
                        "type": "boolean",
                        "title": "Flag indicating if the VendorCredit was deleted in the remote system"
                    },
                    "accountingPeriod": {
                        "type": "string",
                        "title": "Accounting period for the transaction"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timestamp of the last modification"
                    },
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "Unique identifier for the VendorCredit"
                    }
                },
                "description": "The VendorCredit object represents an accounts receivable transaction indicating that a customer is owed a gift or refund. \nIt includes details such as the amount of credit, the vendor responsible, \nthe associated account, and other relevant information."
            },
            "VendorCreditLine": {
                "type": "object",
                "properties": {
                    "remoteId": {
                        "type": "string",
                        "title": "Identifier for the VendorCreditLine in the remote system"
                    },
                    "netAmount": {
                        "type": "number",
                        "format": "double",
                        "title": "Net amount for the line item"
                    },
                    "trackingCategory": {
                        "type": "string",
                        "title": "Single tracking category for this line item"
                    },
                    "trackingCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "Multiple tracking categories for detailed accounting"
                    },
                    "description": {
                        "type": "string",
                        "title": "Description of the line item"
                    },
                    "account": {
                        "type": "string",
                        "title": "Account associated with the line item"
                    },
                    "company": {
                        "type": "string",
                        "title": "Identifier or name of the associated company"
                    },
                    "exchangeRate": {
                        "type": "string",
                        "title": "Exchange rate used for currency conversion, potentially as a float or double for precision"
                    },
                    "modifiedAt": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timestamp of the last modification to the line item"
                    },
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "title": "Unique identifier for the VendorCreditLine"
                    }
                },
                "description": "The VendorCreditLine object represents individual line items in a VendorCredit transaction, detailing specific elements of the credit."
            },
            "Account": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64",
                        "description": "Unique identifier for the account."
                    },
                    "auth0UserId": {
                        "type": "string",
                        "title": "Auth0 user id"
                    },
                    "workspace": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Workspace"
                        },
                        "title": "user account of interest can have many workspaces"
                    },
                    "baseDirectory": {
                        "type": "string",
                        "title": "base directory for the user"
                    },
                    "bucketName": {
                        "type": "string",
                        "title": "aws bucket name for the account"
                    },
                    "bucketLocation": {
                        "type": "string",
                        "title": "aws bucket location for the account"
                    },
                    "region": {
                        "type": "string",
                        "title": "aws region for the account"
                    }
                },
                "description": "@brief Represents an account in the context of the service."
            },
            "CreateAccountRequest": {
                "type": "object",
                "properties": {
                    "authZeroUserId": {
                        "type": "string"
                    }
                },
                "required": [
                    "authZeroUserId"
                ]
            },
            "CreateAccountResponse": {
                "type": "object",
                "properties": {
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    }
                }
            },
            "CreateFolderRequest": {
                "type": "object",
                "properties": {
                    "authZeroUserId": {
                        "type": "string"
                    },
                    "workspaceId": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "authZeroUserId",
                    "name"
                ]
            },
            "CreateFolderResponse": {
                "type": "object",
                "properties": {
                    "folder": {
                        "$ref": "#/components/schemas/FolderMetadata"
                    }
                }
            },
            "CreateWorkspaceRequest": {
                "type": "object",
                "properties": {
                    "authZeroUserId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "authZeroUserId",
                    "name"
                ]
            },
            "CreateWorkspaceResponse": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "$ref": "#/components/schemas/Workspace"
                    }
                }
            },
            "DeleteAccountResponse": {
                "type": "object",
                "properties": {
                    "isDeleted": {
                        "type": "boolean"
                    }
                }
            },
            "DeleteFileResponse": {
                "type": "object",
                "properties": {
                    "isDeleted": {
                        "type": "boolean"
                    }
                }
            },
            "DeleteFolderResponse": {
                "type": "object",
                "properties": {
                    "isDeleted": {
                        "type": "boolean"
                    }
                }
            },
            "DeleteWorkspaceResponse": {
                "type": "object",
                "properties": {
                    "isDeleted": {
                        "type": "boolean"
                    }
                }
            },
            "FileMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the file was created."
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the file was last updated."
                    },
                    "size": {
                        "type": "string",
                        "format": "int64",
                        "description": "Size of the file in bytes."
                    },
                    "fileType": {
                        "type": "string",
                        "description": "Type of the file (e.g., 'text', 'image', 'video')."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags associated with the file."
                    },
                    "isDeleted": {
                        "type": "boolean",
                        "description": "Flag indicating if the file is marked as deleted."
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Version of the file metadata format."
                    },
                    "s3Key": {
                        "type": "string",
                        "description": "s3 key path\nS3 key (path within the S3 bucket) for the file."
                    },
                    "s3BucketName": {
                        "type": "string",
                        "description": "Name of the S3 bucket where the file is stored."
                    },
                    "s3Region": {
                        "type": "string",
                        "description": "AWS region where the S3 bucket is located."
                    },
                    "s3VersionId": {
                        "type": "string",
                        "description": "Version ID of the file, used when versioning is enabled in the S3 bucket."
                    },
                    "s3Etag": {
                        "type": "string",
                        "description": "Entity tag (ETag) of the file, a hash of the file used for change detection."
                    },
                    "s3ContentType": {
                        "type": "string",
                        "description": "MIME type of the file."
                    },
                    "s3ContentLength": {
                        "type": "string",
                        "format": "int64",
                        "description": "Size of the file in bytes."
                    },
                    "s3ContentEncoding": {
                        "type": "string",
                        "description": "Encoding format used on the file, if any (e.g., gzip)."
                    },
                    "s3ContentDisposition": {
                        "type": "string",
                        "description": "How the file is to be presented in a web browser (attachment, inline)."
                    },
                    "s3LastModified": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the file was last modified in S3."
                    },
                    "s3StorageClass": {
                        "type": "string",
                        "description": "S3 storage class of the file (e.g., STANDARD, INTELLIGENT_TIERING, GLACIER)."
                    },
                    "s3ServerSideEncryption": {
                        "type": "string",
                        "description": "Details of server-side encryption used on the file, if any (e.g., AES256, aws:kms)."
                    },
                    "s3Acl": {
                        "type": "string",
                        "description": "Access control list (ACL) permissions for the file in S3."
                    },
                    "s3Metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom metadata added to the file in S3 as key-value pairs."
                    },
                    "versionId": {
                        "type": "string",
                        "title": "version id of the file"
                    },
                    "uploadId": {
                        "type": "string",
                        "title": "upload id of the file"
                    },
                    "location": {
                        "type": "string",
                        "title": "location of the file"
                    }
                },
                "title": "File Metadata"
            },
            "FolderMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "childFolder": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FolderMetadata"
                        },
                        "title": "folders can have many children folders"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FileMetadata"
                        },
                        "title": "files present in the folder of the workspace"
                    },
                    "isDeleted": {
                        "type": "boolean"
                    },
                    "s3BucketName": {
                        "type": "string",
                        "description": "The S3 bucket name where the folder is located."
                    },
                    "s3FolderPath": {
                        "type": "string",
                        "description": "The prefix path representing the folder in the S3 bucket."
                    },
                    "s3Region": {
                        "type": "string",
                        "description": "AWS region where the S3 bucket containing the folder is located."
                    },
                    "s3Metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom metadata for the folder, represented as key-value pairs."
                    },
                    "s3Acl": {
                        "type": "string",
                        "description": "Access control list (ACL) permissions for the folder in S3."
                    },
                    "s3LastModified": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the folder was last modified in S3.\nThis might represent the last time a file was added, removed, or changed in the folder."
                    },
                    "versionId": {
                        "type": "string",
                        "title": "version id of the folder"
                    }
                },
                "title": "Folder Metadata"
            },
            "GetAccountResponse": {
                "type": "object",
                "properties": {
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    }
                }
            },
            "ListFolderResponse": {
                "type": "object",
                "properties": {
                    "folder": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FolderMetadata"
                        }
                    }
                }
            },
            "ListWorkspaceResponse": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Workspace"
                        }
                    }
                }
            },
            "UpdateFileRequest": {
                "type": "object",
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/FileMetadata"
                    }
                }
            },
            "UpdateFileResponse": {
                "type": "object",
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/FileMetadata"
                    }
                }
            },
            "UpdateFolderRequest": {
                "type": "object",
                "properties": {
                    "folder": {
                        "$ref": "#/components/schemas/FolderMetadata"
                    }
                }
            },
            "UpdateFolderResponse": {
                "type": "object",
                "properties": {
                    "folder": {
                        "$ref": "#/components/schemas/FolderMetadata"
                    }
                }
            },
            "UpdateWorkspaceRequest": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "$ref": "#/components/schemas/Workspace"
                    }
                }
            },
            "UpdateWorkspaceResponse": {
                "type": "object",
                "properties": {
                    "workspace": {
                        "$ref": "#/components/schemas/Workspace"
                    }
                }
            },
            "Workspace": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uint64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "folders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FolderMetadata"
                        }
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "isDeleted": {
                        "type": "boolean"
                    },
                    "s3BucketName": {
                        "type": "string",
                        "description": "The S3 bucket name where the folder is located."
                    },
                    "s3FolderPath": {
                        "type": "string",
                        "description": "The prefix path representing the folder in the S3 bucket."
                    },
                    "s3Region": {
                        "type": "string",
                        "description": "AWS region where the S3 bucket containing the folder is located."
                    },
                    "s3Metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom metadata for the folder, represented as key-value pairs."
                    },
                    "s3Acl": {
                        "type": "string",
                        "description": "Access control list (ACL) permissions for the folder in S3."
                    },
                    "s3LastModified": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the folder was last modified in S3.\nThis might represent the last time a file was added, removed, or changed in the folder."
                    },
                    "uniqueIdentifier": {
                        "type": "string",
                        "title": "unique identifier for the workspace of interest"
                    },
                    "versionId": {
                        "type": "string",
                        "title": "version id of the workspace"
                    }
                },
                "title": "Workspace"
            },
            "workspaceservicehttp.FileUploadResponse": {
                "type": "object",
                "properties": {
                    "fileUrl": {
                        "type": "string"
                    },
                    "file_id": {
                        "type": "integer"
                    }
                }
            }
        },
        "requestBodies": {
            "Role": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Role"
                        }
                    }
                },
                "required": true
            },
            "Post": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Post"
                        }
                    }
                },
                "description": "The post payload | type: json_object",
                "required": true
            },
            "Post2": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Post"
                        }
                    }
                },
                "required": true
            },
            "AddCommentQualityScoreQualityscore": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "string",
                            "format": "uint64",
                            "required": [
                                "qualityScore"
                            ]
                        }
                    }
                },
                "required": true
            }
        }
    }
}