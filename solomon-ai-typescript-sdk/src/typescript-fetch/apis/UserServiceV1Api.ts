/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckEmailExistsResponse,
  CheckUsernameExistsResponse,
  DeleteUserResponse,
  GetUserByEmailOrUsernameResponse,
  GetUserByEmailResponse,
  GetUserByUsernameResponse,
  GetUserIdResponse,
  GetUserResponse,
  HealthCheckResponse,
  InternalErrorMessageResponse,
  PasswordResetWebhookResponse,
  PathUnknownErrorMessageResponse,
  ReadynessCheckResponse,
  Status,
  UpdateUserRequest,
  UpdateUserResponse,
  ValidationErrorMessageResponse,
  VerifyUserResponse,
} from '../models/index';
import {
    CheckEmailExistsResponseFromJSON,
    CheckEmailExistsResponseToJSON,
    CheckUsernameExistsResponseFromJSON,
    CheckUsernameExistsResponseToJSON,
    DeleteUserResponseFromJSON,
    DeleteUserResponseToJSON,
    GetUserByEmailOrUsernameResponseFromJSON,
    GetUserByEmailOrUsernameResponseToJSON,
    GetUserByEmailResponseFromJSON,
    GetUserByEmailResponseToJSON,
    GetUserByUsernameResponseFromJSON,
    GetUserByUsernameResponseToJSON,
    GetUserIdResponseFromJSON,
    GetUserIdResponseToJSON,
    GetUserResponseFromJSON,
    GetUserResponseToJSON,
    HealthCheckResponseFromJSON,
    HealthCheckResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    PasswordResetWebhookResponseFromJSON,
    PasswordResetWebhookResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    ReadynessCheckResponseFromJSON,
    ReadynessCheckResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    UpdateUserRequestFromJSON,
    UpdateUserRequestToJSON,
    UpdateUserResponseFromJSON,
    UpdateUserResponseToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
    VerifyUserResponseFromJSON,
    VerifyUserResponseToJSON,
} from '../models/index';

export interface CheckEmailExistsRequest {
    email: string;
}

export interface CheckUsernameExistsRequest {
    username: string;
}

export interface DeleteUserRequest {
    userId: string;
}

export interface GetUserRequest {
    userId: string;
}

export interface GetUserByEmailRequest {
    email: string;
}

export interface GetUserByEmailOrUsernameRequest {
    email?: string;
    username?: string;
}

export interface GetUserByUsernameRequest {
    username: string;
}

export interface GetUserIdRequest {
    email?: string;
    username?: string;
}

export interface PasswordResetRequest {
    accountId?: string;
    token?: string;
}

export interface UpdateUserOperationRequest {
    updateUserRequest: UpdateUserRequest;
}

export interface VerificationRequest {
    userId: string;
}

/**
 * 
 */
export class UserServiceV1Api extends runtime.BaseAPI {

    /**
     * Checks if an email exists or not
     * Checks that an email exists or not
     */
    async checkEmailExistsRaw(requestParameters: CheckEmailExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckEmailExistsResponse>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling checkEmailExists().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/email/{email}/exists`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters['email']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckEmailExistsResponseFromJSON(jsonValue));
    }

    /**
     * Checks if an email exists or not
     * Checks that an email exists or not
     */
    async checkEmailExists(requestParameters: CheckEmailExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckEmailExistsResponse> {
        const response = await this.checkEmailExistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checks if a username exists or not
     * Checks that a username exists or not
     */
    async checkUsernameExistsRaw(requestParameters: CheckUsernameExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckUsernameExistsResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling checkUsernameExists().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/username/{username}/exists`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckUsernameExistsResponseFromJSON(jsonValue));
    }

    /**
     * Checks if a username exists or not
     * Checks that a username exists or not
     */
    async checkUsernameExists(requestParameters: CheckUsernameExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckUsernameExistsResponse> {
        const response = await this.checkUsernameExistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a delete operation on a user account based on the provided parametersThis deletion operation spans multiple services as user details are stored across a suite of our backend servicesThe operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the requestDivergent state is not expected to be encountered with this endpoint.
     * deletes a user account
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUserResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUserResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs a delete operation on a user account based on the provided parametersThis deletion operation spans multiple services as user details are stored across a suite of our backend servicesThe operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the requestDivergent state is not expected to be encountered with this endpoint.
     * deletes a user account
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUserResponse> {
        const response = await this.deleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Queries and obtains a user account based on the provided parameters
     * Gets a user account
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserResponseFromJSON(jsonValue));
    }

    /**
     * Queries and obtains a user account based on the provided parameters
     * Gets a user account
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserResponse> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Queries and obtains a user account based on the email
     * Gets a user account by email
     */
    async getUserByEmailRaw(requestParameters: GetUserByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserByEmailResponse>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling getUserByEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/email/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters['email']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserByEmailResponseFromJSON(jsonValue));
    }

    /**
     * Queries and obtains a user account based on the email
     * Gets a user account by email
     */
    async getUserByEmail(requestParameters: GetUserByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserByEmailResponse> {
        const response = await this.getUserByEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns a user account by either provided email or username
     * gets a user account by either email or username
     */
    async getUserByEmailOrUsernameRaw(requestParameters: GetUserByEmailOrUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserByEmailOrUsernameResponse>> {
        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/query-account-by-email-or-username`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserByEmailOrUsernameResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns a user account by either provided email or username
     * gets a user account by either email or username
     */
    async getUserByEmailOrUsername(requestParameters: GetUserByEmailOrUsernameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserByEmailOrUsernameResponse> {
        const response = await this.getUserByEmailOrUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Queries and obtains a user account based on the username
     * Gets a user account by user name
     */
    async getUserByUsernameRaw(requestParameters: GetUserByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserByUsernameResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getUserByUsername().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/username/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserByUsernameResponseFromJSON(jsonValue));
    }

    /**
     * Queries and obtains a user account based on the username
     * Gets a user account by user name
     */
    async getUserByUsername(requestParameters: GetUserByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserByUsernameResponse> {
        const response = await this.getUserByUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the user record id if the user record exists example: /api/v1/user-service?email=testuser@gmail.com&&username=testuser
     * get a user account id
     */
    async getUserIdRaw(requestParameters: GetUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserIdResponse>> {
        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/query-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserIdResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the user record id if the user record exists example: /api/v1/user-service?email=testuser@gmail.com&&username=testuser
     * get a user account id
     */
    async getUserId(requestParameters: GetUserIdRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserIdResponse> {
        const response = await this.getUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a healc check on the service
     * health check
     */
    async healthCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs a healc check on the service
     * health check
     */
    async healthCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckResponse> {
        const response = await this.healthCheckRaw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs password reset for a given user account
     * password reset
     */
    async passwordResetRaw(requestParameters: PasswordResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordResetWebhookResponse>> {
        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['accountId'] = requestParameters['accountId'];
        }

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/webhook/password-reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordResetWebhookResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs password reset for a given user account
     * password reset
     */
    async passwordReset(requestParameters: PasswordResetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordResetWebhookResponse> {
        const response = await this.passwordResetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a readiness check on the service
     * readyness check
     */
    async readynessCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadynessCheckResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadynessCheckResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs a readiness check on the service
     * readyness check
     */
    async readynessCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadynessCheckResponse> {
        const response = await this.readynessCheckRaw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs an updates operation on a user account based on the provided parametersThis update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)All update operations are atomic by nature hence we should not expect any form of divergent state
     * update a user account
     */
    async updateUserRaw(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserResponse>> {
        if (requestParameters['updateUserRequest'] == null) {
            throw new runtime.RequiredError(
                'updateUserRequest',
                'Required parameter "updateUserRequest" was null or undefined when calling updateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserRequestToJSON(requestParameters['updateUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs an updates operation on a user account based on the provided parametersThis update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)All update operations are atomic by nature hence we should not expect any form of divergent state
     * update a user account
     */
    async updateUser(requestParameters: UpdateUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserResponse> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs verification of a user account email
     * user verification
     */
    async verificationRaw(requestParameters: VerificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyUserResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling verification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v1/user-service/user/verification/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyUserResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs verification of a user account email
     * user verification
     */
    async verification(requestParameters: VerificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyUserResponse> {
        const response = await this.verificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
