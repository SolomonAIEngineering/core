/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcceptFollowProfileResponse,
  AddCommentQualityScoreResponse,
  AddPostQualityScoreResponse,
  AddPostToPublicationResponse,
  AddPostToThreadResponse,
  AddPublicationEditorResponse,
  BlockUserProfileResponse,
  BookmarkPostResponse,
  BookmarkPublicationResponse,
  Comment,
  CommunityProfile,
  CreateCommentReplyBody,
  CreateCommentReplyResponse,
  CreateCommentResponse,
  CreateCommunityProfileBody,
  CreateCommunityProfileResponse,
  CreateNoteBody,
  CreateNoteResponse,
  CreatePollResponse,
  CreatePostResponse,
  CreatePublicationResponse,
  CreateTopicResponse,
  CreateUserProfileRequest,
  CreateUserProfileResponse,
  DeleteCommentReplyResponse,
  DeleteCommunityProfileResponse,
  DeleteNoteResponse,
  DeletePollResponse,
  DeletePostFromPublicationResponse,
  DeletePostResponse,
  DeletePublicationEditorResponse,
  DeletePublicationResponse,
  DeleteUserProfileResponse,
  DiscoverProfilesResponse,
  EditCommentReplyBody,
  EditCommentReplyResponse,
  EditCommunityProfileRequest,
  EditNoteResponse,
  EditPostResponse,
  EditUserProfileResponse,
  FollowCommunityProfileResponse,
  FollowProfileResponse,
  GetAccountsFollowingResponse,
  GetBlogPostsByTagResponse,
  GetBookmarkedPostsResponse,
  GetCannyUserSSOTokenResponse,
  GetCommentRepliesResponse,
  GetCommunitiesUserFollowsResponse,
  GetCommunityBlogPostsResponse,
  GetCommunityFeedResponse,
  GetCommunityProfileResponse,
  GetCommunityProfilesResponse,
  GetFollowersResponse,
  GetPendingFollowsResponse,
  GetPollResponse,
  GetPollsResponse,
  GetPostResponse,
  GetPostThreadResponse,
  GetPostsByCategoryResponse,
  GetPostsByTopicResponse,
  GetPostsResponse,
  GetPublicationResponse,
  GetTopicsOfCommunitiesUserFollowsResponse,
  GetUserFeedResponse,
  GetUserProfileResponse,
  GetUserProfilesResponse,
  HealthCheckResponse1,
  InternalErrorMessageResponse,
  Note,
  PathUnknownErrorMessageResponse,
  PollPost,
  Post,
  Publication,
  ReactToCommentReplyResponse,
  ReactToCommentResponse,
  ReactToPostResponse,
  ReadynessCheckResponse1,
  RemoveBookmarkedPostResponse,
  RemovePostFromThreadResponse,
  ReportCommentBody,
  ReportCommentReplyBody,
  ReportCommentReplyResponse,
  ReportCommentResponse,
  ReportPostResponse,
  RespondToPollBody,
  RespondToPollResponse,
  SharePostResponse,
  Status,
  Topic,
  UserProfile,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    AcceptFollowProfileResponseFromJSON,
    AcceptFollowProfileResponseToJSON,
    AddCommentQualityScoreResponseFromJSON,
    AddCommentQualityScoreResponseToJSON,
    AddPostQualityScoreResponseFromJSON,
    AddPostQualityScoreResponseToJSON,
    AddPostToPublicationResponseFromJSON,
    AddPostToPublicationResponseToJSON,
    AddPostToThreadResponseFromJSON,
    AddPostToThreadResponseToJSON,
    AddPublicationEditorResponseFromJSON,
    AddPublicationEditorResponseToJSON,
    BlockUserProfileResponseFromJSON,
    BlockUserProfileResponseToJSON,
    BookmarkPostResponseFromJSON,
    BookmarkPostResponseToJSON,
    BookmarkPublicationResponseFromJSON,
    BookmarkPublicationResponseToJSON,
    CommentFromJSON,
    CommentToJSON,
    CommunityProfileFromJSON,
    CommunityProfileToJSON,
    CreateCommentReplyBodyFromJSON,
    CreateCommentReplyBodyToJSON,
    CreateCommentReplyResponseFromJSON,
    CreateCommentReplyResponseToJSON,
    CreateCommentResponseFromJSON,
    CreateCommentResponseToJSON,
    CreateCommunityProfileBodyFromJSON,
    CreateCommunityProfileBodyToJSON,
    CreateCommunityProfileResponseFromJSON,
    CreateCommunityProfileResponseToJSON,
    CreateNoteBodyFromJSON,
    CreateNoteBodyToJSON,
    CreateNoteResponseFromJSON,
    CreateNoteResponseToJSON,
    CreatePollResponseFromJSON,
    CreatePollResponseToJSON,
    CreatePostResponseFromJSON,
    CreatePostResponseToJSON,
    CreatePublicationResponseFromJSON,
    CreatePublicationResponseToJSON,
    CreateTopicResponseFromJSON,
    CreateTopicResponseToJSON,
    CreateUserProfileRequestFromJSON,
    CreateUserProfileRequestToJSON,
    CreateUserProfileResponseFromJSON,
    CreateUserProfileResponseToJSON,
    DeleteCommentReplyResponseFromJSON,
    DeleteCommentReplyResponseToJSON,
    DeleteCommunityProfileResponseFromJSON,
    DeleteCommunityProfileResponseToJSON,
    DeleteNoteResponseFromJSON,
    DeleteNoteResponseToJSON,
    DeletePollResponseFromJSON,
    DeletePollResponseToJSON,
    DeletePostFromPublicationResponseFromJSON,
    DeletePostFromPublicationResponseToJSON,
    DeletePostResponseFromJSON,
    DeletePostResponseToJSON,
    DeletePublicationEditorResponseFromJSON,
    DeletePublicationEditorResponseToJSON,
    DeletePublicationResponseFromJSON,
    DeletePublicationResponseToJSON,
    DeleteUserProfileResponseFromJSON,
    DeleteUserProfileResponseToJSON,
    DiscoverProfilesResponseFromJSON,
    DiscoverProfilesResponseToJSON,
    EditCommentReplyBodyFromJSON,
    EditCommentReplyBodyToJSON,
    EditCommentReplyResponseFromJSON,
    EditCommentReplyResponseToJSON,
    EditCommunityProfileRequestFromJSON,
    EditCommunityProfileRequestToJSON,
    EditNoteResponseFromJSON,
    EditNoteResponseToJSON,
    EditPostResponseFromJSON,
    EditPostResponseToJSON,
    EditUserProfileResponseFromJSON,
    EditUserProfileResponseToJSON,
    FollowCommunityProfileResponseFromJSON,
    FollowCommunityProfileResponseToJSON,
    FollowProfileResponseFromJSON,
    FollowProfileResponseToJSON,
    GetAccountsFollowingResponseFromJSON,
    GetAccountsFollowingResponseToJSON,
    GetBlogPostsByTagResponseFromJSON,
    GetBlogPostsByTagResponseToJSON,
    GetBookmarkedPostsResponseFromJSON,
    GetBookmarkedPostsResponseToJSON,
    GetCannyUserSSOTokenResponseFromJSON,
    GetCannyUserSSOTokenResponseToJSON,
    GetCommentRepliesResponseFromJSON,
    GetCommentRepliesResponseToJSON,
    GetCommunitiesUserFollowsResponseFromJSON,
    GetCommunitiesUserFollowsResponseToJSON,
    GetCommunityBlogPostsResponseFromJSON,
    GetCommunityBlogPostsResponseToJSON,
    GetCommunityFeedResponseFromJSON,
    GetCommunityFeedResponseToJSON,
    GetCommunityProfileResponseFromJSON,
    GetCommunityProfileResponseToJSON,
    GetCommunityProfilesResponseFromJSON,
    GetCommunityProfilesResponseToJSON,
    GetFollowersResponseFromJSON,
    GetFollowersResponseToJSON,
    GetPendingFollowsResponseFromJSON,
    GetPendingFollowsResponseToJSON,
    GetPollResponseFromJSON,
    GetPollResponseToJSON,
    GetPollsResponseFromJSON,
    GetPollsResponseToJSON,
    GetPostResponseFromJSON,
    GetPostResponseToJSON,
    GetPostThreadResponseFromJSON,
    GetPostThreadResponseToJSON,
    GetPostsByCategoryResponseFromJSON,
    GetPostsByCategoryResponseToJSON,
    GetPostsByTopicResponseFromJSON,
    GetPostsByTopicResponseToJSON,
    GetPostsResponseFromJSON,
    GetPostsResponseToJSON,
    GetPublicationResponseFromJSON,
    GetPublicationResponseToJSON,
    GetTopicsOfCommunitiesUserFollowsResponseFromJSON,
    GetTopicsOfCommunitiesUserFollowsResponseToJSON,
    GetUserFeedResponseFromJSON,
    GetUserFeedResponseToJSON,
    GetUserProfileResponseFromJSON,
    GetUserProfileResponseToJSON,
    GetUserProfilesResponseFromJSON,
    GetUserProfilesResponseToJSON,
    HealthCheckResponse1FromJSON,
    HealthCheckResponse1ToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    NoteFromJSON,
    NoteToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    PollPostFromJSON,
    PollPostToJSON,
    PostFromJSON,
    PostToJSON,
    PublicationFromJSON,
    PublicationToJSON,
    ReactToCommentReplyResponseFromJSON,
    ReactToCommentReplyResponseToJSON,
    ReactToCommentResponseFromJSON,
    ReactToCommentResponseToJSON,
    ReactToPostResponseFromJSON,
    ReactToPostResponseToJSON,
    ReadynessCheckResponse1FromJSON,
    ReadynessCheckResponse1ToJSON,
    RemoveBookmarkedPostResponseFromJSON,
    RemoveBookmarkedPostResponseToJSON,
    RemovePostFromThreadResponseFromJSON,
    RemovePostFromThreadResponseToJSON,
    ReportCommentBodyFromJSON,
    ReportCommentBodyToJSON,
    ReportCommentReplyBodyFromJSON,
    ReportCommentReplyBodyToJSON,
    ReportCommentReplyResponseFromJSON,
    ReportCommentReplyResponseToJSON,
    ReportCommentResponseFromJSON,
    ReportCommentResponseToJSON,
    ReportPostResponseFromJSON,
    ReportPostResponseToJSON,
    RespondToPollBodyFromJSON,
    RespondToPollBodyToJSON,
    RespondToPollResponseFromJSON,
    RespondToPollResponseToJSON,
    SharePostResponseFromJSON,
    SharePostResponseToJSON,
    StatusFromJSON,
    StatusToJSON,
    TopicFromJSON,
    TopicToJSON,
    UserProfileFromJSON,
    UserProfileToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface AcceptFollowProfileRequest {
    followRecordId: string;
}

export interface AddCommentQualityScoreRequest {
    userId: string;
    postId: string;
    commentId: string;
    postType: AddCommentQualityScorePostTypeEnum;
    body: string;
}

export interface AddPostQualityScoreRequest {
    userId: string;
    postId: string;
    postType: AddPostQualityScorePostTypeEnum;
    body: string;
}

export interface AddPostToPublicationRequest {
    editorUserId: string;
    publicationId: string;
    post: Post;
}

export interface AddPostToThreadRequest {
    userId: string;
    parentPostId: string;
    postType: AddPostToThreadPostTypeEnum;
    post: Post;
}

export interface AddPublicationEditorRequest {
    adminUserId: string;
    publicationId: string;
    editorUserId: string;
}

export interface BlockUserProfileRequest {
    sourceUserId: string;
    targetUserId: string;
}

export interface BookmarkPostRequest {
    userId: string;
    postId: string;
}

export interface BookmarkPublicationRequest {
    userId: string;
    publicationId: string;
}

export interface CreateCommentRequest {
    userId: string;
    postId: string;
    accountType: CreateCommentAccountTypeEnum;
    postType: CreateCommentPostTypeEnum;
    comment: Comment;
    communityProfileId?: string;
}

export interface CreateCommentReplyRequest {
    userId: string;
    postId: string;
    commentId: string;
    createCommentReplyBody: CreateCommentReplyBody;
}

export interface CreateCommunityProfileRequest {
    userId: string;
    createCommunityProfileBody: CreateCommunityProfileBody;
}

export interface CreateNoteRequest {
    userId: string;
    postId: string;
    createNoteBody: CreateNoteBody;
}

export interface CreatePollRequest {
    userId: string;
    pollPost: PollPost;
}

export interface CreatePostRequest {
    userId: string;
    accountType: CreatePostAccountTypeEnum;
    post: Post;
    communityProfileId?: string;
}

export interface CreatePublicationRequest {
    userId: string;
    publication: Publication;
}

export interface CreateTopicRequest {
    userId: string;
    communityProfileId: string;
    topic: Topic;
}

export interface CreateUserProfileOperationRequest {
    createUserProfileRequest: CreateUserProfileRequest;
}

export interface DeleteCommentRequest {
    postId: string;
    commentId: string;
    postType: DeleteCommentPostTypeEnum;
}

export interface DeleteCommentReplyRequest {
    userId: string;
    postId: string;
    commentId: string;
    replyId: string;
    postType: DeleteCommentReplyPostTypeEnum;
}

export interface DeleteCommunityProfileRequest {
    userId: string;
    communityProfileId: string;
}

export interface DeleteNoteRequest {
    userId: string;
    postId: string;
    noteId: string;
    postType: DeleteNotePostTypeEnum;
}

export interface DeletePollRequest {
    userId: string;
    postId: string;
}

export interface DeletePostRequest {
    userId: string;
    postId: string;
    postType: DeletePostPostTypeEnum;
}

export interface DeletePostFromPublicationRequest {
    editorUserId: string;
    publicationId: string;
    postId: string;
    postType: DeletePostFromPublicationPostTypeEnum;
}

export interface DeletePublicationRequest {
    adminUserId: string;
    publicationId: string;
}

export interface DeletePublicationEditorRequest {
    adminUserId: string;
    publicationId: string;
    editorUserId: string;
}

export interface DeleteUserProfileRequest {
    userId: string;
}

export interface DiscoverProfilesRequest {
    userId: string;
    limit: string;
}

export interface EditCommentReplyRequest {
    userId: string;
    postId: string;
    commentId: string;
    replyId: string;
    editCommentReplyBody: EditCommentReplyBody;
}

export interface EditCommunityProfileOperationRequest {
    userId: string;
    communityProfileId: string;
    communityProfile: CommunityProfile;
}

export interface EditNoteRequest {
    userId: string;
    postId: string;
    noteId: string;
    postType: EditNotePostTypeEnum;
    note: Note;
}

export interface EditPostRequest {
    postId: string;
    postType: EditPostPostTypeEnum;
    post: Post;
}

export interface EditUserProfileRequest {
    userId: string;
    userProfile: UserProfile;
}

export interface FollowCommunityProfileRequest {
    sourceUserId: string;
    targetCommunityProfileId: string;
}

export interface FollowProfileRequest {
    sourceUserId: string;
    targetUserId: string;
}

export interface GetAccountsFollowingRequest {
    userId: string;
    profileId: string;
    accountType: GetAccountsFollowingAccountTypeEnum;
    limit: string;
}

export interface GetBlogPostsByTagRequest {
    tag: string;
    postType: GetBlogPostsByTagPostTypeEnum;
}

export interface GetBookmarkedPostsRequest {
    userId: string;
}

export interface GetCannyUserSSOToken1Request {
    userId: string;
    email: string;
}

export interface GetCommentRepliesRequest {
    userId: string;
    postId: string;
    commentId: string;
    postType: GetCommentRepliesPostTypeEnum;
}

export interface GetCommunitiesUserFollowsRequest {
    userId: string;
    limit: string;
}

export interface GetCommunityBlogPostsRequest {
    communityProfileId: string;
}

export interface GetCommunityFeedRequest {
    communityProfileId: string;
    feedType: GetCommunityFeedFeedTypeEnum;
    accountType: GetCommunityFeedAccountTypeEnum;
    nextPageToken?: string;
}

export interface GetCommunityProfileRequest {
    communityId: string;
    requestorProfileId: string;
    requestorProfileType: GetCommunityProfileRequestorProfileTypeEnum;
}

export interface GetCommunityProfilesRequest {
    pageSize: number;
    pageNumber: number;
}

export interface GetFollowersRequest {
    userId: string;
    profileId: string;
    limit: string;
}

export interface GetPendingFollowsRequest {
    userId: string;
}

export interface GetPollRequest {
    userId: string;
    postId: string;
}

export interface GetPollsRequest {
    userId: string;
}

export interface GetPostRequest {
    userId: string;
    postId: string;
    postType: GetPostPostTypeEnum;
}

export interface GetPostThreadRequest {
    userId: string;
    postId: string;
    postType: GetPostThreadPostTypeEnum;
}

export interface GetPostsRequest {
    userId: string;
}

export interface GetPostsByCategoryRequest {
    userId: string;
    category: GetPostsByCategoryCategoryEnum;
    postType: GetPostsByCategoryPostTypeEnum;
    limit: string;
    offset: string;
}

export interface GetPostsByTopicRequest {
    communityProfileId: string;
    topicName: string;
}

export interface GetPublicationRequest {
    userId: string;
    publicationId: string;
}

export interface GetTopicsOfCommunitiesUserFollowsRequest {
    userId: string;
    limit: string;
}

export interface GetUserFeedRequest {
    userId: string;
    feedType: GetUserFeedFeedTypeEnum;
    accountType: GetUserFeedAccountTypeEnum;
    nextPageToken?: string;
}

export interface GetUserProfileRequest {
    userId: string;
    requestorProfileId?: string;
    requestorProfileType?: GetUserProfileRequestorProfileTypeEnum;
}

export interface GetUserProfilesRequest {
    pageSize: number;
    pageNumber: number;
}

export interface ReactToCommentRequest {
    userId: string;
    postId: string;
    commentId: string;
    accountType: ReactToCommentAccountTypeEnum;
    reaction: ReactToCommentReactionEnum;
    postType: ReactToCommentPostTypeEnum;
}

export interface ReactToCommentReplyRequest {
    userId: string;
    postId: string;
    commentId: string;
    replyId: string;
    accountType: ReactToCommentReplyAccountTypeEnum;
    reaction: ReactToCommentReplyReactionEnum;
    postType: ReactToCommentReplyPostTypeEnum;
}

export interface ReactToPostRequest {
    userId: string;
    postId: string;
    accountType: ReactToPostAccountTypeEnum;
    reaction: ReactToPostReactionEnum;
    postType: ReactToPostPostTypeEnum;
}

export interface RemoveBookmarkedPostRequest {
    userId: string;
    postId: string;
    postType: RemoveBookmarkedPostPostTypeEnum;
}

export interface RemoveBookmarkedPublicationRequest {
    userId: string;
    publicationId: string;
}

export interface RemovePostFromThreadRequest {
    userId: string;
    parentPostId: string;
    postType: RemovePostFromThreadPostTypeEnum;
    participantPostId: string;
}

export interface ReportCommentRequest {
    userId: string;
    postId: string;
    commentId: string;
    reportCommentBody: ReportCommentBody;
}

export interface ReportCommentReplyRequest {
    userId: string;
    postId: string;
    commentId: string;
    replyId: string;
    reportCommentReplyBody: ReportCommentReplyBody;
}

export interface ReportPostRequest {
    userId: string;
    postId: string;
    postType: ReportPostPostTypeEnum;
}

export interface RespondToPollRequest {
    userId: string;
    pollId: string;
    respondToPollBody: RespondToPollBody;
}

export interface SharePostRequest {
    userId: string;
    parentPostId: string;
    parentPostType: SharePostParentPostTypeEnum;
    body: string;
}

/**
 * 
 */
export class SocialServiceApi extends runtime.BaseAPI {

    /**
     * This endpoint enables a client to accept a follow request from a source a user profile
     * Accepts a user\'s follow request
     */
    async acceptFollowProfileRaw(requestParameters: AcceptFollowProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AcceptFollowProfileResponse>> {
        if (requestParameters['followRecordId'] == null) {
            throw new runtime.RequiredError(
                'followRecordId',
                'Required parameter "followRecordId" was null or undefined when calling acceptFollowProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/follow-requests/{followRecordId}/accept`.replace(`{${"followRecordId"}}`, encodeURIComponent(String(requestParameters['followRecordId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcceptFollowProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to accept a follow request from a source a user profile
     * Accepts a user\'s follow request
     */
    async acceptFollowProfile(requestParameters: AcceptFollowProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AcceptFollowProfileResponse> {
        const response = await this.acceptFollowProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to add a quality score to a comment
     * Add Comment Quality Score
     */
    async addCommentQualityScoreRaw(requestParameters: AddCommentQualityScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCommentQualityScoreResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling addCommentQualityScore().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling addCommentQualityScore().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling addCommentQualityScore().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling addCommentQualityScore().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling addCommentQualityScore().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/quality`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddCommentQualityScoreResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to add a quality score to a comment
     * Add Comment Quality Score
     */
    async addCommentQualityScore(requestParameters: AddCommentQualityScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCommentQualityScoreResponse> {
        const response = await this.addCommentQualityScoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client add a quality score to a post
     * Adds a quality score to a post
     */
    async addPostQualityScoreRaw(requestParameters: AddPostQualityScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPostQualityScoreResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling addPostQualityScore().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling addPostQualityScore().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling addPostQualityScore().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling addPostQualityScore().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/quality`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPostQualityScoreResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client add a quality score to a post
     * Adds a quality score to a post
     */
    async addPostQualityScore(requestParameters: AddPostQualityScoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPostQualityScoreResponse> {
        const response = await this.addPostQualityScoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to add a post to a publication
     * Add a post to a publication
     */
    async addPostToPublicationRaw(requestParameters: AddPostToPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPostToPublicationResponse>> {
        if (requestParameters['editorUserId'] == null) {
            throw new runtime.RequiredError(
                'editorUserId',
                'Required parameter "editorUserId" was null or undefined when calling addPostToPublication().'
            );
        }

        if (requestParameters['publicationId'] == null) {
            throw new runtime.RequiredError(
                'publicationId',
                'Required parameter "publicationId" was null or undefined when calling addPostToPublication().'
            );
        }

        if (requestParameters['post'] == null) {
            throw new runtime.RequiredError(
                'post',
                'Required parameter "post" was null or undefined when calling addPostToPublication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/editor/{editorUserId}/publication/{publicationId}`.replace(`{${"editorUserId"}}`, encodeURIComponent(String(requestParameters['editorUserId']))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters['publicationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostToJSON(requestParameters['post']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPostToPublicationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to add a post to a publication
     * Add a post to a publication
     */
    async addPostToPublication(requestParameters: AddPostToPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPostToPublicationResponse> {
        const response = await this.addPostToPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to add a post to a thread
     * Adds A Post To A Thread
     */
    async addPostToThreadRaw(requestParameters: AddPostToThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPostToThreadResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling addPostToThread().'
            );
        }

        if (requestParameters['parentPostId'] == null) {
            throw new runtime.RequiredError(
                'parentPostId',
                'Required parameter "parentPostId" was null or undefined when calling addPostToThread().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling addPostToThread().'
            );
        }

        if (requestParameters['post'] == null) {
            throw new runtime.RequiredError(
                'post',
                'Required parameter "post" was null or undefined when calling addPostToThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/thread/{parentPostId}/type/{postType}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"parentPostId"}}`, encodeURIComponent(String(requestParameters['parentPostId']))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters['postType']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostToJSON(requestParameters['post']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPostToThreadResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to add a post to a thread
     * Adds A Post To A Thread
     */
    async addPostToThread(requestParameters: AddPostToThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPostToThreadResponse> {
        const response = await this.addPostToThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to add an editor to a publication
     * Adds an editor to a publication
     */
    async addPublicationEditorRaw(requestParameters: AddPublicationEditorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPublicationEditorResponse>> {
        if (requestParameters['adminUserId'] == null) {
            throw new runtime.RequiredError(
                'adminUserId',
                'Required parameter "adminUserId" was null or undefined when calling addPublicationEditor().'
            );
        }

        if (requestParameters['publicationId'] == null) {
            throw new runtime.RequiredError(
                'publicationId',
                'Required parameter "publicationId" was null or undefined when calling addPublicationEditor().'
            );
        }

        if (requestParameters['editorUserId'] == null) {
            throw new runtime.RequiredError(
                'editorUserId',
                'Required parameter "editorUserId" was null or undefined when calling addPublicationEditor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/admin/{adminUserId}/publication/{publicationId}/editor/{editorUserId}`.replace(`{${"adminUserId"}}`, encodeURIComponent(String(requestParameters['adminUserId']))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters['publicationId']))).replace(`{${"editorUserId"}}`, encodeURIComponent(String(requestParameters['editorUserId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPublicationEditorResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to add an editor to a publication
     * Adds an editor to a publication
     */
    async addPublicationEditor(requestParameters: AddPublicationEditorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPublicationEditorResponse> {
        const response = await this.addPublicationEditorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to block a user profile
     * blocks a user profile
     */
    async blockUserProfileRaw(requestParameters: BlockUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockUserProfileResponse>> {
        if (requestParameters['sourceUserId'] == null) {
            throw new runtime.RequiredError(
                'sourceUserId',
                'Required parameter "sourceUserId" was null or undefined when calling blockUserProfile().'
            );
        }

        if (requestParameters['targetUserId'] == null) {
            throw new runtime.RequiredError(
                'targetUserId',
                'Required parameter "targetUserId" was null or undefined when calling blockUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/source/{sourceUserId}/block/target/{targetUserId}`.replace(`{${"sourceUserId"}}`, encodeURIComponent(String(requestParameters['sourceUserId']))).replace(`{${"targetUserId"}}`, encodeURIComponent(String(requestParameters['targetUserId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockUserProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to block a user profile
     * blocks a user profile
     */
    async blockUserProfile(requestParameters: BlockUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockUserProfileResponse> {
        const response = await this.blockUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to bookmark a post
     * Bookmarks a post
     */
    async bookmarkPostRaw(requestParameters: BookmarkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkPostResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling bookmarkPost().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling bookmarkPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/bookmark/{postId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkPostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to bookmark a post
     * Bookmarks a post
     */
    async bookmarkPost(requestParameters: BookmarkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkPostResponse> {
        const response = await this.bookmarkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to bookmark a publication
     * Bookmarks a publication
     */
    async bookmarkPublicationRaw(requestParameters: BookmarkPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkPublicationResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling bookmarkPublication().'
            );
        }

        if (requestParameters['publicationId'] == null) {
            throw new runtime.RequiredError(
                'publicationId',
                'Required parameter "publicationId" was null or undefined when calling bookmarkPublication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/publication/{publicationId}/bookmark`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters['publicationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkPublicationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to bookmark a publication
     * Bookmarks a publication
     */
    async bookmarkPublication(requestParameters: BookmarkPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkPublicationResponse> {
        const response = await this.bookmarkPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to create a comment
     * Create A Commnet
     */
    async createCommentRaw(requestParameters: CreateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommentResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createComment().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling createComment().'
            );
        }

        if (requestParameters['accountType'] == null) {
            throw new runtime.RequiredError(
                'accountType',
                'Required parameter "accountType" was null or undefined when calling createComment().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling createComment().'
            );
        }

        if (requestParameters['comment'] == null) {
            throw new runtime.RequiredError(
                'comment',
                'Required parameter "comment" was null or undefined when calling createComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['communityProfileId'] != null) {
            queryParameters['communityProfileId'] = requestParameters['communityProfileId'];
        }

        if (requestParameters['accountType'] != null) {
            queryParameters['accountType'] = requestParameters['accountType'];
        }

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/comment`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentToJSON(requestParameters['comment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommentResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create a comment
     * Create A Commnet
     */
    async createComment(requestParameters: CreateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommentResponse> {
        const response = await this.createCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to reply to a comment
     * Reply To A Comment
     */
    async createCommentReplyRaw(requestParameters: CreateCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommentReplyResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createCommentReply().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling createCommentReply().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling createCommentReply().'
            );
        }

        if (requestParameters['createCommentReplyBody'] == null) {
            throw new runtime.RequiredError(
                'createCommentReplyBody',
                'Required parameter "createCommentReplyBody" was null or undefined when calling createCommentReply().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCommentReplyBodyToJSON(requestParameters['createCommentReplyBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommentReplyResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to reply to a comment
     * Reply To A Comment
     */
    async createCommentReply(requestParameters: CreateCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommentReplyResponse> {
        const response = await this.createCommentReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to create a community profile
     * Create a community Profile
     */
    async createCommunityProfileRaw(requestParameters: CreateCommunityProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommunityProfileResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createCommunityProfile().'
            );
        }

        if (requestParameters['createCommunityProfileBody'] == null) {
            throw new runtime.RequiredError(
                'createCommunityProfileBody',
                'Required parameter "createCommunityProfileBody" was null or undefined when calling createCommunityProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/community-profiles/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCommunityProfileBodyToJSON(requestParameters['createCommunityProfileBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommunityProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create a community profile
     * Create a community Profile
     */
    async createCommunityProfile(requestParameters: CreateCommunityProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommunityProfileResponse> {
        const response = await this.createCommunityProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to create and associate a not to a post
     * Creates and associates a note to a given post
     */
    async createNoteRaw(requestParameters: CreateNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateNoteResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createNote().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling createNote().'
            );
        }

        if (requestParameters['createNoteBody'] == null) {
            throw new runtime.RequiredError(
                'createNoteBody',
                'Required parameter "createNoteBody" was null or undefined when calling createNote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/note`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNoteBodyToJSON(requestParameters['createNoteBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNoteResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create and associate a not to a post
     * Creates and associates a note to a given post
     */
    async createNote(requestParameters: CreateNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateNoteResponse> {
        const response = await this.createNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to create a poll
     * Create a poll
     */
    async createPollRaw(requestParameters: CreatePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePollResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createPoll().'
            );
        }

        if (requestParameters['pollPost'] == null) {
            throw new runtime.RequiredError(
                'pollPost',
                'Required parameter "pollPost" was null or undefined when calling createPoll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/poll`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PollPostToJSON(requestParameters['pollPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePollResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create a poll
     * Create a poll
     */
    async createPoll(requestParameters: CreatePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePollResponse> {
        const response = await this.createPollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to create a post
     * Create a post
     */
    async createPostRaw(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePostResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createPost().'
            );
        }

        if (requestParameters['accountType'] == null) {
            throw new runtime.RequiredError(
                'accountType',
                'Required parameter "accountType" was null or undefined when calling createPost().'
            );
        }

        if (requestParameters['post'] == null) {
            throw new runtime.RequiredError(
                'post',
                'Required parameter "post" was null or undefined when calling createPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['communityProfileId'] != null) {
            queryParameters['communityProfileId'] = requestParameters['communityProfileId'];
        }

        if (requestParameters['accountType'] != null) {
            queryParameters['accountType'] = requestParameters['accountType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostToJSON(requestParameters['post']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create a post
     * Create a post
     */
    async createPost(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePostResponse> {
        const response = await this.createPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to creare a publication
     * Creates a publication
     */
    async createPublicationRaw(requestParameters: CreatePublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePublicationResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createPublication().'
            );
        }

        if (requestParameters['publication'] == null) {
            throw new runtime.RequiredError(
                'publication',
                'Required parameter "publication" was null or undefined when calling createPublication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/publication`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicationToJSON(requestParameters['publication']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePublicationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to creare a publication
     * Creates a publication
     */
    async createPublication(requestParameters: CreatePublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePublicationResponse> {
        const response = await this.createPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to create a topic
     * Create A Topic
     */
    async createTopicRaw(requestParameters: CreateTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTopicResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling createTopic().'
            );
        }

        if (requestParameters['communityProfileId'] == null) {
            throw new runtime.RequiredError(
                'communityProfileId',
                'Required parameter "communityProfileId" was null or undefined when calling createTopic().'
            );
        }

        if (requestParameters['topic'] == null) {
            throw new runtime.RequiredError(
                'topic',
                'Required parameter "topic" was null or undefined when calling createTopic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/community/{communityProfileId}/topic`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"communityProfileId"}}`, encodeURIComponent(String(requestParameters['communityProfileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TopicToJSON(requestParameters['topic']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTopicResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create a topic
     * Create A Topic
     */
    async createTopic(requestParameters: CreateTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTopicResponse> {
        const response = await this.createTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to create a user profile
     * creates a user profile
     */
    async createUserProfileRaw(requestParameters: CreateUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserProfileResponse>> {
        if (requestParameters['createUserProfileRequest'] == null) {
            throw new runtime.RequiredError(
                'createUserProfileRequest',
                'Required parameter "createUserProfileRequest" was null or undefined when calling createUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserProfileRequestToJSON(requestParameters['createUserProfileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to create a user profile
     * creates a user profile
     */
    async createUserProfile(requestParameters: CreateUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserProfileResponse> {
        const response = await this.createUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a comment
     * Delete A Comment
     */
    async deleteCommentRaw(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommentResponse>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling deleteComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling deleteComment().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling deleteComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/post/{postId}/comment/{commentId}`.replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommentResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a comment
     * Delete A Comment
     */
    async deleteComment(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommentResponse> {
        const response = await this.deleteCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a comment reply
     * Delete A Comment Reply
     */
    async deleteCommentReplyRaw(requestParameters: DeleteCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCommentReplyResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteCommentReply().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling deleteCommentReply().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling deleteCommentReply().'
            );
        }

        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling deleteCommentReply().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling deleteCommentReply().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))).replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCommentReplyResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a comment reply
     * Delete A Comment Reply
     */
    async deleteCommentReply(requestParameters: DeleteCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCommentReplyResponse> {
        const response = await this.deleteCommentReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a community profile
     * Delete Community Profile
     */
    async deleteCommunityProfileRaw(requestParameters: DeleteCommunityProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCommunityProfileResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteCommunityProfile().'
            );
        }

        if (requestParameters['communityProfileId'] == null) {
            throw new runtime.RequiredError(
                'communityProfileId',
                'Required parameter "communityProfileId" was null or undefined when calling deleteCommunityProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/community-profiles/{communityProfileId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"communityProfileId"}}`, encodeURIComponent(String(requestParameters['communityProfileId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCommunityProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a community profile
     * Delete Community Profile
     */
    async deleteCommunityProfile(requestParameters: DeleteCommunityProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCommunityProfileResponse> {
        const response = await this.deleteCommunityProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a note
     * Delete a note
     */
    async deleteNoteRaw(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteNoteResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteNote().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling deleteNote().'
            );
        }

        if (requestParameters['noteId'] == null) {
            throw new runtime.RequiredError(
                'noteId',
                'Required parameter "noteId" was null or undefined when calling deleteNote().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling deleteNote().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/note/{noteId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters['noteId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNoteResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a note
     * Delete a note
     */
    async deleteNote(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteNoteResponse> {
        const response = await this.deleteNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a poll
     * Delete a poll
     */
    async deletePollRaw(requestParameters: DeletePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePollResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deletePoll().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling deletePoll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/poll/{postId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePollResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a poll
     * Delete a poll
     */
    async deletePoll(requestParameters: DeletePollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePollResponse> {
        const response = await this.deletePollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a post
     * Delete a post
     */
    async deletePostRaw(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePostResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deletePost().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling deletePost().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling deletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/type/{postType}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters['postType']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a post
     * Delete a post
     */
    async deletePost(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePostResponse> {
        const response = await this.deletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a post from a publication
     * Deletes a post from a publication
     */
    async deletePostFromPublicationRaw(requestParameters: DeletePostFromPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePostFromPublicationResponse>> {
        if (requestParameters['editorUserId'] == null) {
            throw new runtime.RequiredError(
                'editorUserId',
                'Required parameter "editorUserId" was null or undefined when calling deletePostFromPublication().'
            );
        }

        if (requestParameters['publicationId'] == null) {
            throw new runtime.RequiredError(
                'publicationId',
                'Required parameter "publicationId" was null or undefined when calling deletePostFromPublication().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling deletePostFromPublication().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling deletePostFromPublication().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/editor/{editorUserId}/publication/{publicationId}/post/{postId}`.replace(`{${"editorUserId"}}`, encodeURIComponent(String(requestParameters['editorUserId']))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters['publicationId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePostFromPublicationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a post from a publication
     * Deletes a post from a publication
     */
    async deletePostFromPublication(requestParameters: DeletePostFromPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePostFromPublicationResponse> {
        const response = await this.deletePostFromPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a publication
     * Deletes a publication
     */
    async deletePublicationRaw(requestParameters: DeletePublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePublicationResponse>> {
        if (requestParameters['adminUserId'] == null) {
            throw new runtime.RequiredError(
                'adminUserId',
                'Required parameter "adminUserId" was null or undefined when calling deletePublication().'
            );
        }

        if (requestParameters['publicationId'] == null) {
            throw new runtime.RequiredError(
                'publicationId',
                'Required parameter "publicationId" was null or undefined when calling deletePublication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/admin/{adminUserId}/publication/{publicationId}`.replace(`{${"adminUserId"}}`, encodeURIComponent(String(requestParameters['adminUserId']))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters['publicationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePublicationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a publication
     * Deletes a publication
     */
    async deletePublication(requestParameters: DeletePublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePublicationResponse> {
        const response = await this.deletePublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to add an editor to a publication
     * Deletes an editor to a publication
     */
    async deletePublicationEditorRaw(requestParameters: DeletePublicationEditorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePublicationEditorResponse>> {
        if (requestParameters['adminUserId'] == null) {
            throw new runtime.RequiredError(
                'adminUserId',
                'Required parameter "adminUserId" was null or undefined when calling deletePublicationEditor().'
            );
        }

        if (requestParameters['publicationId'] == null) {
            throw new runtime.RequiredError(
                'publicationId',
                'Required parameter "publicationId" was null or undefined when calling deletePublicationEditor().'
            );
        }

        if (requestParameters['editorUserId'] == null) {
            throw new runtime.RequiredError(
                'editorUserId',
                'Required parameter "editorUserId" was null or undefined when calling deletePublicationEditor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/admin/{adminUserId}/publication/{publicationId}/editor/{editorUserId}`.replace(`{${"adminUserId"}}`, encodeURIComponent(String(requestParameters['adminUserId']))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters['publicationId']))).replace(`{${"editorUserId"}}`, encodeURIComponent(String(requestParameters['editorUserId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePublicationEditorResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to add an editor to a publication
     * Deletes an editor to a publication
     */
    async deletePublicationEditor(requestParameters: DeletePublicationEditorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePublicationEditorResponse> {
        const response = await this.deletePublicationEditorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a user profile
     * deletes a user profile
     */
    async deleteUserProfileRaw(requestParameters: DeleteUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUserProfileResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUserProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a user profile
     * deletes a user profile
     */
    async deleteUserProfile(requestParameters: DeleteUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUserProfileResponse> {
        const response = await this.deleteUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to discover a set of profiles he/she does not follow
     * Discover Profiles
     */
    async discoverProfilesRaw(requestParameters: DiscoverProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoverProfilesResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling discoverProfiles().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling discoverProfiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/discover/limit/{limit}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"limit"}}`, encodeURIComponent(String(requestParameters['limit']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscoverProfilesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to discover a set of profiles he/she does not follow
     * Discover Profiles
     */
    async discoverProfiles(requestParameters: DiscoverProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoverProfilesResponse> {
        const response = await this.discoverProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to edit a comment reply
     * Edit A Comment Reply
     */
    async editCommentReplyRaw(requestParameters: EditCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditCommentReplyResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling editCommentReply().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling editCommentReply().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling editCommentReply().'
            );
        }

        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling editCommentReply().'
            );
        }

        if (requestParameters['editCommentReplyBody'] == null) {
            throw new runtime.RequiredError(
                'editCommentReplyBody',
                'Required parameter "editCommentReplyBody" was null or undefined when calling editCommentReply().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))).replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditCommentReplyBodyToJSON(requestParameters['editCommentReplyBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditCommentReplyResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to edit a comment reply
     * Edit A Comment Reply
     */
    async editCommentReply(requestParameters: EditCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditCommentReplyResponse> {
        const response = await this.editCommentReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to update a community profile
     * Edit a community Profile
     */
    async editCommunityProfileRaw(requestParameters: EditCommunityProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditCommunityProfileRequest>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling editCommunityProfile().'
            );
        }

        if (requestParameters['communityProfileId'] == null) {
            throw new runtime.RequiredError(
                'communityProfileId',
                'Required parameter "communityProfileId" was null or undefined when calling editCommunityProfile().'
            );
        }

        if (requestParameters['communityProfile'] == null) {
            throw new runtime.RequiredError(
                'communityProfile',
                'Required parameter "communityProfile" was null or undefined when calling editCommunityProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/community-profiles/{communityProfileId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"communityProfileId"}}`, encodeURIComponent(String(requestParameters['communityProfileId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CommunityProfileToJSON(requestParameters['communityProfile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditCommunityProfileRequestFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to update a community profile
     * Edit a community Profile
     */
    async editCommunityProfile(requestParameters: EditCommunityProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditCommunityProfileRequest> {
        const response = await this.editCommunityProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to update a note
     * Update a note
     */
    async editNoteRaw(requestParameters: EditNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditNoteResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling editNote().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling editNote().'
            );
        }

        if (requestParameters['noteId'] == null) {
            throw new runtime.RequiredError(
                'noteId',
                'Required parameter "noteId" was null or undefined when calling editNote().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling editNote().'
            );
        }

        if (requestParameters['note'] == null) {
            throw new runtime.RequiredError(
                'note',
                'Required parameter "note" was null or undefined when calling editNote().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/note/{noteId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters['noteId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NoteToJSON(requestParameters['note']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditNoteResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to update a note
     * Update a note
     */
    async editNote(requestParameters: EditNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditNoteResponse> {
        const response = await this.editNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to edit a post by id
     * Edits a post by id
     */
    async editPostRaw(requestParameters: EditPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditPostResponse>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling editPost().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling editPost().'
            );
        }

        if (requestParameters['post'] == null) {
            throw new runtime.RequiredError(
                'post',
                'Required parameter "post" was null or undefined when calling editPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/post/{postId}/type/{postType}`.replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters['postType']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostToJSON(requestParameters['post']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditPostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to edit a post by id
     * Edits a post by id
     */
    async editPost(requestParameters: EditPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditPostResponse> {
        const response = await this.editPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs an updates operation on a user profile based on the provided parametersThis update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)All update operations are atomic by nature hence we should not expect any form of divergent state
     * update a user profile
     */
    async editUserProfileRaw(requestParameters: EditUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EditUserProfileResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling editUserProfile().'
            );
        }

        if (requestParameters['userProfile'] == null) {
            throw new runtime.RequiredError(
                'userProfile',
                'Required parameter "userProfile" was null or undefined when calling editUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileToJSON(requestParameters['userProfile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EditUserProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs an updates operation on a user profile based on the provided parametersThis update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)All update operations are atomic by nature hence we should not expect any form of divergent state
     * update a user profile
     */
    async editUserProfile(requestParameters: EditUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EditUserProfileResponse> {
        const response = await this.editUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to follow a community profile
     * Follows A Community Profile
     */
    async followCommunityProfileRaw(requestParameters: FollowCommunityProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FollowCommunityProfileResponse>> {
        if (requestParameters['sourceUserId'] == null) {
            throw new runtime.RequiredError(
                'sourceUserId',
                'Required parameter "sourceUserId" was null or undefined when calling followCommunityProfile().'
            );
        }

        if (requestParameters['targetCommunityProfileId'] == null) {
            throw new runtime.RequiredError(
                'targetCommunityProfileId',
                'Required parameter "targetCommunityProfileId" was null or undefined when calling followCommunityProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/source/{sourceUserId}/follow/community-profiles/{targetCommunityProfileId}`.replace(`{${"sourceUserId"}}`, encodeURIComponent(String(requestParameters['sourceUserId']))).replace(`{${"targetCommunityProfileId"}}`, encodeURIComponent(String(requestParameters['targetCommunityProfileId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FollowCommunityProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to follow a community profile
     * Follows A Community Profile
     */
    async followCommunityProfile(requestParameters: FollowCommunityProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FollowCommunityProfileResponse> {
        const response = await this.followCommunityProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to follow a user profile
     * follow a user profile
     */
    async followProfileRaw(requestParameters: FollowProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FollowProfileResponse>> {
        if (requestParameters['sourceUserId'] == null) {
            throw new runtime.RequiredError(
                'sourceUserId',
                'Required parameter "sourceUserId" was null or undefined when calling followProfile().'
            );
        }

        if (requestParameters['targetUserId'] == null) {
            throw new runtime.RequiredError(
                'targetUserId',
                'Required parameter "targetUserId" was null or undefined when calling followProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/source/{sourceUserId}/follow/target/{targetUserId}`.replace(`{${"sourceUserId"}}`, encodeURIComponent(String(requestParameters['sourceUserId']))).replace(`{${"targetUserId"}}`, encodeURIComponent(String(requestParameters['targetUserId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FollowProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to follow a user profile
     * follow a user profile
     */
    async followProfile(requestParameters: FollowProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FollowProfileResponse> {
        const response = await this.followProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get all the accounts a given user follows
     * Get Communities and users you are following
     */
    async getAccountsFollowingRaw(requestParameters: GetAccountsFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountsFollowingResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getAccountsFollowing().'
            );
        }

        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getAccountsFollowing().'
            );
        }

        if (requestParameters['accountType'] == null) {
            throw new runtime.RequiredError(
                'accountType',
                'Required parameter "accountType" was null or undefined when calling getAccountsFollowing().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling getAccountsFollowing().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/profile/{profileId}/account-type/{accountType}/following`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))).replace(`{${"accountType"}}`, encodeURIComponent(String(requestParameters['accountType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountsFollowingResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get all the accounts a given user follows
     * Get Communities and users you are following
     */
    async getAccountsFollowing(requestParameters: GetAccountsFollowingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountsFollowingResponse> {
        const response = await this.getAccountsFollowingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to query a set of blog posts tied to a tag
     * Get blog posts by tag
     */
    async getBlogPostsByTagRaw(requestParameters: GetBlogPostsByTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBlogPostsByTagResponse>> {
        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling getBlogPostsByTag().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling getBlogPostsByTag().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/posts/blog/tag/{tag}`.replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters['tag']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBlogPostsByTagResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to query a set of blog posts tied to a tag
     * Get blog posts by tag
     */
    async getBlogPostsByTag(requestParameters: GetBlogPostsByTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBlogPostsByTagResponse> {
        const response = await this.getBlogPostsByTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get all bookmarked posts of a given user
     * Get Bookmarked Posts
     */
    async getBookmarkedPostsRaw(requestParameters: GetBookmarkedPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBookmarkedPostsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getBookmarkedPosts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/bookmarks/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBookmarkedPostsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get all bookmarked posts of a given user
     * Get Bookmarked Posts
     */
    async getBookmarkedPosts(requestParameters: GetBookmarkedPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBookmarkedPostsResponse> {
        const response = await this.getBookmarkedPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a user sso token for canny
     * Retrieves user sso token for canny
     */
    async getCannyUserSSOToken1Raw(requestParameters: GetCannyUserSSOToken1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCannyUserSSOTokenResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getCannyUserSSOToken1().'
            );
        }

        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling getCannyUserSSOToken1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/user/{userId}/canny/email/{email}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"email"}}`, encodeURIComponent(String(requestParameters['email']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCannyUserSSOTokenResponseFromJSON(jsonValue));
    }

    /**
     * Fetches a user sso token for canny
     * Retrieves user sso token for canny
     */
    async getCannyUserSSOToken1(requestParameters: GetCannyUserSSOToken1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCannyUserSSOTokenResponse> {
        const response = await this.getCannyUserSSOToken1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get comment replies
     * Get Comment Replies
     */
    async getCommentRepliesRaw(requestParameters: GetCommentRepliesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommentRepliesResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getCommentReplies().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling getCommentReplies().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling getCommentReplies().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling getCommentReplies().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/replies`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommentRepliesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get comment replies
     * Get Comment Replies
     */
    async getCommentReplies(requestParameters: GetCommentRepliesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommentRepliesResponse> {
        const response = await this.getCommentRepliesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get all the communities a user follows
     * Gets all the communities a user follows
     */
    async getCommunitiesUserFollowsRaw(requestParameters: GetCommunitiesUserFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommunitiesUserFollowsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getCommunitiesUserFollows().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling getCommunitiesUserFollows().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/communities-followed`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommunitiesUserFollowsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get all the communities a user follows
     * Gets all the communities a user follows
     */
    async getCommunitiesUserFollows(requestParameters: GetCommunitiesUserFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommunitiesUserFollowsResponse> {
        const response = await this.getCommunitiesUserFollowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get community blog posts
     * Get community blog posts
     */
    async getCommunityBlogPostsRaw(requestParameters: GetCommunityBlogPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommunityBlogPostsResponse>> {
        if (requestParameters['communityProfileId'] == null) {
            throw new runtime.RequiredError(
                'communityProfileId',
                'Required parameter "communityProfileId" was null or undefined when calling getCommunityBlogPosts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/community-profiles/{communityProfileId}/posts/blog`.replace(`{${"communityProfileId"}}`, encodeURIComponent(String(requestParameters['communityProfileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommunityBlogPostsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get community blog posts
     * Get community blog posts
     */
    async getCommunityBlogPosts(requestParameters: GetCommunityBlogPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommunityBlogPostsResponse> {
        const response = await this.getCommunityBlogPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client query a community feed
     * Gets A Community Feed
     */
    async getCommunityFeedRaw(requestParameters: GetCommunityFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommunityFeedResponse>> {
        if (requestParameters['communityProfileId'] == null) {
            throw new runtime.RequiredError(
                'communityProfileId',
                'Required parameter "communityProfileId" was null or undefined when calling getCommunityFeed().'
            );
        }

        if (requestParameters['feedType'] == null) {
            throw new runtime.RequiredError(
                'feedType',
                'Required parameter "feedType" was null or undefined when calling getCommunityFeed().'
            );
        }

        if (requestParameters['accountType'] == null) {
            throw new runtime.RequiredError(
                'accountType',
                'Required parameter "accountType" was null or undefined when calling getCommunityFeed().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['feedType'] != null) {
            queryParameters['feedType'] = requestParameters['feedType'];
        }

        if (requestParameters['accountType'] != null) {
            queryParameters['accountType'] = requestParameters['accountType'];
        }

        if (requestParameters['nextPageToken'] != null) {
            queryParameters['nextPageToken'] = requestParameters['nextPageToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/community-profiles/{communityProfileId}/timeline`.replace(`{${"communityProfileId"}}`, encodeURIComponent(String(requestParameters['communityProfileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommunityFeedResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client query a community feed
     * Gets A Community Feed
     */
    async getCommunityFeed(requestParameters: GetCommunityFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommunityFeedResponse> {
        const response = await this.getCommunityFeedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get a community profile
     * Get a community Profile
     */
    async getCommunityProfileRaw(requestParameters: GetCommunityProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommunityProfileResponse>> {
        if (requestParameters['communityId'] == null) {
            throw new runtime.RequiredError(
                'communityId',
                'Required parameter "communityId" was null or undefined when calling getCommunityProfile().'
            );
        }

        if (requestParameters['requestorProfileId'] == null) {
            throw new runtime.RequiredError(
                'requestorProfileId',
                'Required parameter "requestorProfileId" was null or undefined when calling getCommunityProfile().'
            );
        }

        if (requestParameters['requestorProfileType'] == null) {
            throw new runtime.RequiredError(
                'requestorProfileType',
                'Required parameter "requestorProfileType" was null or undefined when calling getCommunityProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/social/community-profiles/{communityId}/requestor/{requestorProfileId}/profile-type/{requestorProfileType}`.replace(`{${"communityId"}}`, encodeURIComponent(String(requestParameters['communityId']))).replace(`{${"requestorProfileId"}}`, encodeURIComponent(String(requestParameters['requestorProfileId']))).replace(`{${"requestorProfileType"}}`, encodeURIComponent(String(requestParameters['requestorProfileType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommunityProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get a community profile
     * Get a community Profile
     */
    async getCommunityProfile(requestParameters: GetCommunityProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommunityProfileResponse> {
        const response = await this.getCommunityProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get community profiles
     * Get Community Profiles
     */
    async getCommunityProfilesRaw(requestParameters: GetCommunityProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommunityProfilesResponse>> {
        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling getCommunityProfiles().'
            );
        }

        if (requestParameters['pageNumber'] == null) {
            throw new runtime.RequiredError(
                'pageNumber',
                'Required parameter "pageNumber" was null or undefined when calling getCommunityProfiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/community-profiles/page-size/{pageSize}/page-number/{pageNumber}`.replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters['pageSize']))).replace(`{${"pageNumber"}}`, encodeURIComponent(String(requestParameters['pageNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommunityProfilesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get community profiles
     * Get Community Profiles
     */
    async getCommunityProfiles(requestParameters: GetCommunityProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommunityProfilesResponse> {
        const response = await this.getCommunityProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get all the followers following a given user
     * Get Users Following you
     */
    async getFollowersRaw(requestParameters: GetFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFollowersResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getFollowers().'
            );
        }

        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getFollowers().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling getFollowers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/profile/{profileId}/followers`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFollowersResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get all the followers following a given user
     * Get Users Following you
     */
    async getFollowers(requestParameters: GetFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFollowersResponse> {
        const response = await this.getFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get all the pending follow requests
     * Get Pending Follow Requests
     */
    async getPendingFollowsRaw(requestParameters: GetPendingFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPendingFollowsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getPendingFollows().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/follow/pending-requests`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPendingFollowsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get all the pending follow requests
     * Get Pending Follow Requests
     */
    async getPendingFollows(requestParameters: GetPendingFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPendingFollowsResponse> {
        const response = await this.getPendingFollowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to query a poll by id
     * Get a poll
     */
    async getPollRaw(requestParameters: GetPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPollResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getPoll().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling getPoll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/poll/{postId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPollResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to query a poll by id
     * Get a poll
     */
    async getPoll(requestParameters: GetPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPollResponse> {
        const response = await this.getPollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to query all polls tied to a given user id
     * Get all the polls of a given user
     */
    async getPollsRaw(requestParameters: GetPollsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPollsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getPolls().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/polls`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPollsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to query all polls tied to a given user id
     * Get all the polls of a given user
     */
    async getPolls(requestParameters: GetPollsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPollsResponse> {
        const response = await this.getPollsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get a post
     * Get a post
     */
    async getPostRaw(requestParameters: GetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPostResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getPost().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling getPost().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling getPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/type/{postType}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters['postType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get a post
     * Get a post
     */
    async getPost(requestParameters: GetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPostResponse> {
        const response = await this.getPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to query a post\'s thread
     * Gets A Post\'s Thread
     */
    async getPostThreadRaw(requestParameters: GetPostThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPostThreadResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getPostThread().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling getPostThread().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling getPostThread().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/thread/{postId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostThreadResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to query a post\'s thread
     * Gets A Post\'s Thread
     */
    async getPostThread(requestParameters: GetPostThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPostThreadResponse> {
        const response = await this.getPostThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to query all posts tied to a given user id
     * Get all the posts of a given user
     */
    async getPostsRaw(requestParameters: GetPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPostsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getPosts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/posts`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to query all posts tied to a given user id
     * Get all the posts of a given user
     */
    async getPosts(requestParameters: GetPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPostsResponse> {
        const response = await this.getPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get all posts tied to a category
     * Get all posts associated with a category
     */
    async getPostsByCategoryRaw(requestParameters: GetPostsByCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPostsByCategoryResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getPostsByCategory().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling getPostsByCategory().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling getPostsByCategory().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling getPostsByCategory().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling getPostsByCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/user/{userId}/category/{category}/posts/{postType}/limit/{limit}/offset/{offset}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters['postType']))).replace(`{${"limit"}}`, encodeURIComponent(String(requestParameters['limit']))).replace(`{${"offset"}}`, encodeURIComponent(String(requestParameters['offset']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostsByCategoryResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get all posts tied to a category
     * Get all posts associated with a category
     */
    async getPostsByCategory(requestParameters: GetPostsByCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPostsByCategoryResponse> {
        const response = await this.getPostsByCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get all posts tied to a topic
     * Get all posts associated with a topic
     */
    async getPostsByTopicRaw(requestParameters: GetPostsByTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPostsByTopicResponse>> {
        if (requestParameters['communityProfileId'] == null) {
            throw new runtime.RequiredError(
                'communityProfileId',
                'Required parameter "communityProfileId" was null or undefined when calling getPostsByTopic().'
            );
        }

        if (requestParameters['topicName'] == null) {
            throw new runtime.RequiredError(
                'topicName',
                'Required parameter "topicName" was null or undefined when calling getPostsByTopic().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/community/{communityProfileId}/topic/{topicName}/posts`.replace(`{${"communityProfileId"}}`, encodeURIComponent(String(requestParameters['communityProfileId']))).replace(`{${"topicName"}}`, encodeURIComponent(String(requestParameters['topicName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostsByTopicResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get all posts tied to a topic
     * Get all posts associated with a topic
     */
    async getPostsByTopic(requestParameters: GetPostsByTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPostsByTopicResponse> {
        const response = await this.getPostsByTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get a publication
     * Gets a publication
     */
    async getPublicationRaw(requestParameters: GetPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPublicationResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getPublication().'
            );
        }

        if (requestParameters['publicationId'] == null) {
            throw new runtime.RequiredError(
                'publicationId',
                'Required parameter "publicationId" was null or undefined when calling getPublication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/publication/{publicationId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters['publicationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPublicationResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get a publication
     * Gets a publication
     */
    async getPublication(requestParameters: GetPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPublicationResponse> {
        const response = await this.getPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get topics of communities a user follows
     * Get Topics Of Communities User Follows
     */
    async getTopicsOfCommunitiesUserFollowsRaw(requestParameters: GetTopicsOfCommunitiesUserFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTopicsOfCommunitiesUserFollowsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getTopicsOfCommunitiesUserFollows().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling getTopicsOfCommunitiesUserFollows().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/topics`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTopicsOfCommunitiesUserFollowsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get topics of communities a user follows
     * Get Topics Of Communities User Follows
     */
    async getTopicsOfCommunitiesUserFollows(requestParameters: GetTopicsOfCommunitiesUserFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTopicsOfCommunitiesUserFollowsResponse> {
        const response = await this.getTopicsOfCommunitiesUserFollowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client query a user feed
     * Gets A Userfeed
     */
    async getUserFeedRaw(requestParameters: GetUserFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserFeedResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserFeed().'
            );
        }

        if (requestParameters['feedType'] == null) {
            throw new runtime.RequiredError(
                'feedType',
                'Required parameter "feedType" was null or undefined when calling getUserFeed().'
            );
        }

        if (requestParameters['accountType'] == null) {
            throw new runtime.RequiredError(
                'accountType',
                'Required parameter "accountType" was null or undefined when calling getUserFeed().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['feedType'] != null) {
            queryParameters['feedType'] = requestParameters['feedType'];
        }

        if (requestParameters['accountType'] != null) {
            queryParameters['accountType'] = requestParameters['accountType'];
        }

        if (requestParameters['nextPageToken'] != null) {
            queryParameters['nextPageToken'] = requestParameters['nextPageToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/timeline`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserFeedResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client query a user feed
     * Gets A Userfeed
     */
    async getUserFeed(requestParameters: GetUserFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserFeedResponse> {
        const response = await this.getUserFeedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a query against the social service to obtain a user profile
     * gets a user profile
     */
    async getUserProfileRaw(requestParameters: GetUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserProfileResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserProfile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['requestorProfileId'] != null) {
            queryParameters['requestorProfileId'] = requestParameters['requestorProfileId'];
        }

        if (requestParameters['requestorProfileType'] != null) {
            queryParameters['requestorProfileType'] = requestParameters['requestorProfileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs a query against the social service to obtain a user profile
     * gets a user profile
     */
    async getUserProfile(requestParameters: GetUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserProfileResponse> {
        const response = await this.getUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to get a number of user profiles in a paginated manner
     * Gets a set of user profiles
     */
    async getUserProfilesRaw(requestParameters: GetUserProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserProfilesResponse>> {
        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling getUserProfiles().'
            );
        }

        if (requestParameters['pageNumber'] == null) {
            throw new runtime.RequiredError(
                'pageNumber',
                'Required parameter "pageNumber" was null or undefined when calling getUserProfiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/page-size/{pageSize}/page-number/{pageNumber}`.replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters['pageSize']))).replace(`{${"pageNumber"}}`, encodeURIComponent(String(requestParameters['pageNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserProfilesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to get a number of user profiles in a paginated manner
     * Gets a set of user profiles
     */
    async getUserProfiles(requestParameters: GetUserProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserProfilesResponse> {
        const response = await this.getUserProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a healc check on the service
     * health check
     */
    async healthCheck1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckResponse1>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckResponse1FromJSON(jsonValue));
    }

    /**
     * This endpoint performs a healc check on the service
     * health check
     */
    async healthCheck1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckResponse1> {
        const response = await this.healthCheck1Raw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to react to a comment
     * Reacts to a comment
     */
    async reactToCommentRaw(requestParameters: ReactToCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactToCommentResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling reactToComment().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling reactToComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling reactToComment().'
            );
        }

        if (requestParameters['accountType'] == null) {
            throw new runtime.RequiredError(
                'accountType',
                'Required parameter "accountType" was null or undefined when calling reactToComment().'
            );
        }

        if (requestParameters['reaction'] == null) {
            throw new runtime.RequiredError(
                'reaction',
                'Required parameter "reaction" was null or undefined when calling reactToComment().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling reactToComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/account-type/{accountType}/reaction/{reaction}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))).replace(`{${"accountType"}}`, encodeURIComponent(String(requestParameters['accountType']))).replace(`{${"reaction"}}`, encodeURIComponent(String(requestParameters['reaction']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactToCommentResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to react to a comment
     * Reacts to a comment
     */
    async reactToComment(requestParameters: ReactToCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactToCommentResponse> {
        const response = await this.reactToCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to react to a comment reply
     * Reacts to a comment reply
     */
    async reactToCommentReplyRaw(requestParameters: ReactToCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactToCommentReplyResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling reactToCommentReply().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling reactToCommentReply().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling reactToCommentReply().'
            );
        }

        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling reactToCommentReply().'
            );
        }

        if (requestParameters['accountType'] == null) {
            throw new runtime.RequiredError(
                'accountType',
                'Required parameter "accountType" was null or undefined when calling reactToCommentReply().'
            );
        }

        if (requestParameters['reaction'] == null) {
            throw new runtime.RequiredError(
                'reaction',
                'Required parameter "reaction" was null or undefined when calling reactToCommentReply().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling reactToCommentReply().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}/account-type/{accountType}/reaction/{reaction}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))).replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))).replace(`{${"accountType"}}`, encodeURIComponent(String(requestParameters['accountType']))).replace(`{${"reaction"}}`, encodeURIComponent(String(requestParameters['reaction']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactToCommentReplyResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to react to a comment reply
     * Reacts to a comment reply
     */
    async reactToCommentReply(requestParameters: ReactToCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactToCommentReplyResponse> {
        const response = await this.reactToCommentReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to react to a post
     * Reacts to a post
     */
    async reactToPostRaw(requestParameters: ReactToPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactToPostResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling reactToPost().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling reactToPost().'
            );
        }

        if (requestParameters['accountType'] == null) {
            throw new runtime.RequiredError(
                'accountType',
                'Required parameter "accountType" was null or undefined when calling reactToPost().'
            );
        }

        if (requestParameters['reaction'] == null) {
            throw new runtime.RequiredError(
                'reaction',
                'Required parameter "reaction" was null or undefined when calling reactToPost().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling reactToPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/account-type/{accountType}/reaction/{reaction}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"accountType"}}`, encodeURIComponent(String(requestParameters['accountType']))).replace(`{${"reaction"}}`, encodeURIComponent(String(requestParameters['reaction']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactToPostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to react to a post
     * Reacts to a post
     */
    async reactToPost(requestParameters: ReactToPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactToPostResponse> {
        const response = await this.reactToPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a readiness check on the service
     * readyness check
     */
    async readynessCheck1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadynessCheckResponse1>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadynessCheckResponse1FromJSON(jsonValue));
    }

    /**
     * This endpoint performs a readiness check on the service
     * readyness check
     */
    async readynessCheck1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadynessCheckResponse1> {
        const response = await this.readynessCheck1Raw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a bookmarked post
     * Deletes A Bookmarked Post
     */
    async removeBookmarkedPostRaw(requestParameters: RemoveBookmarkedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveBookmarkedPostResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeBookmarkedPost().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling removeBookmarkedPost().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling removeBookmarkedPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postType'] != null) {
            queryParameters['postType'] = requestParameters['postType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/bookmark`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoveBookmarkedPostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a bookmarked post
     * Deletes A Bookmarked Post
     */
    async removeBookmarkedPost(requestParameters: RemoveBookmarkedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveBookmarkedPostResponse> {
        const response = await this.removeBookmarkedPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a bookmarked publication
     * Deletes A Bookmarked Publication
     */
    async removeBookmarkedPublicationRaw(requestParameters: RemoveBookmarkedPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveBookmarkedPostResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removeBookmarkedPublication().'
            );
        }

        if (requestParameters['publicationId'] == null) {
            throw new runtime.RequiredError(
                'publicationId',
                'Required parameter "publicationId" was null or undefined when calling removeBookmarkedPublication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/publication/{publicationId}/bookmark`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"publicationId"}}`, encodeURIComponent(String(requestParameters['publicationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoveBookmarkedPostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a bookmarked publication
     * Deletes A Bookmarked Publication
     */
    async removeBookmarkedPublication(requestParameters: RemoveBookmarkedPublicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveBookmarkedPostResponse> {
        const response = await this.removeBookmarkedPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to delete a post from a thread
     * Deletes A Post From A Thread
     */
    async removePostFromThreadRaw(requestParameters: RemovePostFromThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemovePostFromThreadResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling removePostFromThread().'
            );
        }

        if (requestParameters['parentPostId'] == null) {
            throw new runtime.RequiredError(
                'parentPostId',
                'Required parameter "parentPostId" was null or undefined when calling removePostFromThread().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling removePostFromThread().'
            );
        }

        if (requestParameters['participantPostId'] == null) {
            throw new runtime.RequiredError(
                'participantPostId',
                'Required parameter "participantPostId" was null or undefined when calling removePostFromThread().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/thread/{parentPostId}/type/{postType}/target/{participantPostId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"parentPostId"}}`, encodeURIComponent(String(requestParameters['parentPostId']))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters['postType']))).replace(`{${"participantPostId"}}`, encodeURIComponent(String(requestParameters['participantPostId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemovePostFromThreadResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to delete a post from a thread
     * Deletes A Post From A Thread
     */
    async removePostFromThread(requestParameters: RemovePostFromThreadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemovePostFromThreadResponse> {
        const response = await this.removePostFromThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to report a comment
     * Report A Comment
     */
    async reportCommentRaw(requestParameters: ReportCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportCommentResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling reportComment().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling reportComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling reportComment().'
            );
        }

        if (requestParameters['reportCommentBody'] == null) {
            throw new runtime.RequiredError(
                'reportCommentBody',
                'Required parameter "reportCommentBody" was null or undefined when calling reportComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/report`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportCommentBodyToJSON(requestParameters['reportCommentBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportCommentResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to report a comment
     * Report A Comment
     */
    async reportComment(requestParameters: ReportCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportCommentResponse> {
        const response = await this.reportCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to report a comment reply
     * Report A Comment Reply
     */
    async reportCommentReplyRaw(requestParameters: ReportCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportCommentReplyResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling reportCommentReply().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling reportCommentReply().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling reportCommentReply().'
            );
        }

        if (requestParameters['replyId'] == null) {
            throw new runtime.RequiredError(
                'replyId',
                'Required parameter "replyId" was null or undefined when calling reportCommentReply().'
            );
        }

        if (requestParameters['reportCommentReplyBody'] == null) {
            throw new runtime.RequiredError(
                'reportCommentReplyBody',
                'Required parameter "reportCommentReplyBody" was null or undefined when calling reportCommentReply().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/comment/{commentId}/reply/{replyId}/report`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))).replace(`{${"replyId"}}`, encodeURIComponent(String(requestParameters['replyId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportCommentReplyBodyToJSON(requestParameters['reportCommentReplyBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportCommentReplyResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to report a comment reply
     * Report A Comment Reply
     */
    async reportCommentReply(requestParameters: ReportCommentReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportCommentReplyResponse> {
        const response = await this.reportCommentReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to report a post
     * Report a post
     */
    async reportPostRaw(requestParameters: ReportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportPostResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling reportPost().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling reportPost().'
            );
        }

        if (requestParameters['postType'] == null) {
            throw new runtime.RequiredError(
                'postType',
                'Required parameter "postType" was null or undefined when calling reportPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/{postId}/type/{postType}/report`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"postType"}}`, encodeURIComponent(String(requestParameters['postType']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportPostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to report a post
     * Report a post
     */
    async reportPost(requestParameters: ReportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportPostResponse> {
        const response = await this.reportPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to response to a poll
     * Adds a user response to a given poll by a user
     */
    async respondToPollRaw(requestParameters: RespondToPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RespondToPollResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling respondToPoll().'
            );
        }

        if (requestParameters['pollId'] == null) {
            throw new runtime.RequiredError(
                'pollId',
                'Required parameter "pollId" was null or undefined when calling respondToPoll().'
            );
        }

        if (requestParameters['respondToPollBody'] == null) {
            throw new runtime.RequiredError(
                'respondToPollBody',
                'Required parameter "respondToPollBody" was null or undefined when calling respondToPoll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/poll/{pollId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"pollId"}}`, encodeURIComponent(String(requestParameters['pollId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RespondToPollBodyToJSON(requestParameters['respondToPollBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RespondToPollResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to response to a poll
     * Adds a user response to a given poll by a user
     */
    async respondToPoll(requestParameters: RespondToPollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RespondToPollResponse> {
        const response = await this.respondToPollRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enables a client to share a post
     * Share a post
     */
    async sharePostRaw(requestParameters: SharePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SharePostResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling sharePost().'
            );
        }

        if (requestParameters['parentPostId'] == null) {
            throw new runtime.RequiredError(
                'parentPostId',
                'Required parameter "parentPostId" was null or undefined when calling sharePost().'
            );
        }

        if (requestParameters['parentPostType'] == null) {
            throw new runtime.RequiredError(
                'parentPostType',
                'Required parameter "parentPostType" was null or undefined when calling sharePost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling sharePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/social-microservice/api/v1/users/{userId}/post/share/{parentPostId}/type/{parentPostType}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"parentPostId"}}`, encodeURIComponent(String(requestParameters['parentPostId']))).replace(`{${"parentPostType"}}`, encodeURIComponent(String(requestParameters['parentPostType']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharePostResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enables a client to share a post
     * Share a post
     */
    async sharePost(requestParameters: SharePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SharePostResponse> {
        const response = await this.sharePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddCommentQualityScorePostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type AddCommentQualityScorePostTypeEnum = typeof AddCommentQualityScorePostTypeEnum[keyof typeof AddCommentQualityScorePostTypeEnum];
/**
 * @export
 */
export const AddPostQualityScorePostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type AddPostQualityScorePostTypeEnum = typeof AddPostQualityScorePostTypeEnum[keyof typeof AddPostQualityScorePostTypeEnum];
/**
 * @export
 */
export const AddPostToThreadPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type AddPostToThreadPostTypeEnum = typeof AddPostToThreadPostTypeEnum[keyof typeof AddPostToThreadPostTypeEnum];
/**
 * @export
 */
export const CreateCommentAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type CreateCommentAccountTypeEnum = typeof CreateCommentAccountTypeEnum[keyof typeof CreateCommentAccountTypeEnum];
/**
 * @export
 */
export const CreateCommentPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type CreateCommentPostTypeEnum = typeof CreateCommentPostTypeEnum[keyof typeof CreateCommentPostTypeEnum];
/**
 * @export
 */
export const CreatePostAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type CreatePostAccountTypeEnum = typeof CreatePostAccountTypeEnum[keyof typeof CreatePostAccountTypeEnum];
/**
 * @export
 */
export const DeleteCommentPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type DeleteCommentPostTypeEnum = typeof DeleteCommentPostTypeEnum[keyof typeof DeleteCommentPostTypeEnum];
/**
 * @export
 */
export const DeleteCommentReplyPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type DeleteCommentReplyPostTypeEnum = typeof DeleteCommentReplyPostTypeEnum[keyof typeof DeleteCommentReplyPostTypeEnum];
/**
 * @export
 */
export const DeleteNotePostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type DeleteNotePostTypeEnum = typeof DeleteNotePostTypeEnum[keyof typeof DeleteNotePostTypeEnum];
/**
 * @export
 */
export const DeletePostPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type DeletePostPostTypeEnum = typeof DeletePostPostTypeEnum[keyof typeof DeletePostPostTypeEnum];
/**
 * @export
 */
export const DeletePostFromPublicationPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type DeletePostFromPublicationPostTypeEnum = typeof DeletePostFromPublicationPostTypeEnum[keyof typeof DeletePostFromPublicationPostTypeEnum];
/**
 * @export
 */
export const EditNotePostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type EditNotePostTypeEnum = typeof EditNotePostTypeEnum[keyof typeof EditNotePostTypeEnum];
/**
 * @export
 */
export const EditPostPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type EditPostPostTypeEnum = typeof EditPostPostTypeEnum[keyof typeof EditPostPostTypeEnum];
/**
 * @export
 */
export const GetAccountsFollowingAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type GetAccountsFollowingAccountTypeEnum = typeof GetAccountsFollowingAccountTypeEnum[keyof typeof GetAccountsFollowingAccountTypeEnum];
/**
 * @export
 */
export const GetBlogPostsByTagPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type GetBlogPostsByTagPostTypeEnum = typeof GetBlogPostsByTagPostTypeEnum[keyof typeof GetBlogPostsByTagPostTypeEnum];
/**
 * @export
 */
export const GetCommentRepliesPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type GetCommentRepliesPostTypeEnum = typeof GetCommentRepliesPostTypeEnum[keyof typeof GetCommentRepliesPostTypeEnum];
/**
 * @export
 */
export const GetCommunityFeedFeedTypeEnum = {
    Unspecified: 'FEED_TYPE_UNSPECIFIED',
    Personal: 'FEED_TYPE_PERSONAL',
    News: 'FEED_TYPE_NEWS',
    Notification: 'FEED_TYPE_NOTIFICATION'
} as const;
export type GetCommunityFeedFeedTypeEnum = typeof GetCommunityFeedFeedTypeEnum[keyof typeof GetCommunityFeedFeedTypeEnum];
/**
 * @export
 */
export const GetCommunityFeedAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type GetCommunityFeedAccountTypeEnum = typeof GetCommunityFeedAccountTypeEnum[keyof typeof GetCommunityFeedAccountTypeEnum];
/**
 * @export
 */
export const GetCommunityProfileRequestorProfileTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type GetCommunityProfileRequestorProfileTypeEnum = typeof GetCommunityProfileRequestorProfileTypeEnum[keyof typeof GetCommunityProfileRequestorProfileTypeEnum];
/**
 * @export
 */
export const GetPostPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type GetPostPostTypeEnum = typeof GetPostPostTypeEnum[keyof typeof GetPostPostTypeEnum];
/**
 * @export
 */
export const GetPostThreadPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type GetPostThreadPostTypeEnum = typeof GetPostThreadPostTypeEnum[keyof typeof GetPostThreadPostTypeEnum];
/**
 * @export
 */
export const GetPostsByCategoryCategoryEnum = {
    Unspecified: 'CATEGORY_UNSPECIFIED',
    World: 'CATEGORY_WORLD',
    Business: 'CATEGORY_BUSINESS',
    Economics: 'CATEGORY_ECONOMICS',
    ForeignPolicy: 'CATEGORY_FOREIGN_POLICY',
    Politics: 'CATEGORY_POLITICS',
    Technology: 'CATEGORY_TECHNOLOGY',
    Other: 'CATEGORY_OTHER'
} as const;
export type GetPostsByCategoryCategoryEnum = typeof GetPostsByCategoryCategoryEnum[keyof typeof GetPostsByCategoryCategoryEnum];
/**
 * @export
 */
export const GetPostsByCategoryPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type GetPostsByCategoryPostTypeEnum = typeof GetPostsByCategoryPostTypeEnum[keyof typeof GetPostsByCategoryPostTypeEnum];
/**
 * @export
 */
export const GetUserFeedFeedTypeEnum = {
    Unspecified: 'FEED_TYPE_UNSPECIFIED',
    Personal: 'FEED_TYPE_PERSONAL',
    News: 'FEED_TYPE_NEWS',
    Notification: 'FEED_TYPE_NOTIFICATION'
} as const;
export type GetUserFeedFeedTypeEnum = typeof GetUserFeedFeedTypeEnum[keyof typeof GetUserFeedFeedTypeEnum];
/**
 * @export
 */
export const GetUserFeedAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type GetUserFeedAccountTypeEnum = typeof GetUserFeedAccountTypeEnum[keyof typeof GetUserFeedAccountTypeEnum];
/**
 * @export
 */
export const GetUserProfileRequestorProfileTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type GetUserProfileRequestorProfileTypeEnum = typeof GetUserProfileRequestorProfileTypeEnum[keyof typeof GetUserProfileRequestorProfileTypeEnum];
/**
 * @export
 */
export const ReactToCommentAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type ReactToCommentAccountTypeEnum = typeof ReactToCommentAccountTypeEnum[keyof typeof ReactToCommentAccountTypeEnum];
/**
 * @export
 */
export const ReactToCommentReactionEnum = {
    Unspecified: 'REACTION_UNSPECIFIED',
    Like: 'REACTION_LIKE',
    Love: 'REACTION_LOVE',
    Haha: 'REACTION_HAHA',
    Wow: 'REACTION_WOW',
    Sad: 'REACTION_SAD',
    Angry: 'REACTION_ANGRY',
    Dislike: 'REACTION_DISLIKE'
} as const;
export type ReactToCommentReactionEnum = typeof ReactToCommentReactionEnum[keyof typeof ReactToCommentReactionEnum];
/**
 * @export
 */
export const ReactToCommentPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type ReactToCommentPostTypeEnum = typeof ReactToCommentPostTypeEnum[keyof typeof ReactToCommentPostTypeEnum];
/**
 * @export
 */
export const ReactToCommentReplyAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type ReactToCommentReplyAccountTypeEnum = typeof ReactToCommentReplyAccountTypeEnum[keyof typeof ReactToCommentReplyAccountTypeEnum];
/**
 * @export
 */
export const ReactToCommentReplyReactionEnum = {
    Unspecified: 'REACTION_UNSPECIFIED',
    Like: 'REACTION_LIKE',
    Love: 'REACTION_LOVE',
    Haha: 'REACTION_HAHA',
    Wow: 'REACTION_WOW',
    Sad: 'REACTION_SAD',
    Angry: 'REACTION_ANGRY',
    Dislike: 'REACTION_DISLIKE'
} as const;
export type ReactToCommentReplyReactionEnum = typeof ReactToCommentReplyReactionEnum[keyof typeof ReactToCommentReplyReactionEnum];
/**
 * @export
 */
export const ReactToCommentReplyPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type ReactToCommentReplyPostTypeEnum = typeof ReactToCommentReplyPostTypeEnum[keyof typeof ReactToCommentReplyPostTypeEnum];
/**
 * @export
 */
export const ReactToPostAccountTypeEnum = {
    Unspecified: 'ACCOUNT_TYPE_UNSPECIFIED',
    User: 'ACCOUNT_TYPE_USER',
    Community: 'ACCOUNT_TYPE_COMMUNITY'
} as const;
export type ReactToPostAccountTypeEnum = typeof ReactToPostAccountTypeEnum[keyof typeof ReactToPostAccountTypeEnum];
/**
 * @export
 */
export const ReactToPostReactionEnum = {
    Unspecified: 'REACTION_UNSPECIFIED',
    Like: 'REACTION_LIKE',
    Love: 'REACTION_LOVE',
    Haha: 'REACTION_HAHA',
    Wow: 'REACTION_WOW',
    Sad: 'REACTION_SAD',
    Angry: 'REACTION_ANGRY',
    Dislike: 'REACTION_DISLIKE'
} as const;
export type ReactToPostReactionEnum = typeof ReactToPostReactionEnum[keyof typeof ReactToPostReactionEnum];
/**
 * @export
 */
export const ReactToPostPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type ReactToPostPostTypeEnum = typeof ReactToPostPostTypeEnum[keyof typeof ReactToPostPostTypeEnum];
/**
 * @export
 */
export const RemoveBookmarkedPostPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type RemoveBookmarkedPostPostTypeEnum = typeof RemoveBookmarkedPostPostTypeEnum[keyof typeof RemoveBookmarkedPostPostTypeEnum];
/**
 * @export
 */
export const RemovePostFromThreadPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type RemovePostFromThreadPostTypeEnum = typeof RemovePostFromThreadPostTypeEnum[keyof typeof RemovePostFromThreadPostTypeEnum];
/**
 * @export
 */
export const ReportPostPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type ReportPostPostTypeEnum = typeof ReportPostPostTypeEnum[keyof typeof ReportPostPostTypeEnum];
/**
 * @export
 */
export const SharePostParentPostTypeEnum = {
    Unspecified: 'POST_TYPE_UNSPECIFIED',
    Post: 'POST_TYPE_POST',
    Repost: 'POST_TYPE_REPOST',
    Question: 'POST_TYPE_QUESTION',
    Achievement: 'POST_TYPE_ACHIEVEMENT',
    Announcement: 'POST_TYPE_ANNOUNCEMENT',
    Poll: 'POST_TYPE_POLL',
    Article: 'POST_TYPE_ARTICLE',
    ShortStory: 'POST_TYPE_SHORT_STORY'
} as const;
export type SharePostParentPostTypeEnum = typeof SharePostParentPostTypeEnum[keyof typeof SharePostParentPostTypeEnum];
