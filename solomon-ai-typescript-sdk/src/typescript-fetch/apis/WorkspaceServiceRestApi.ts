/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkspaceservicehttpFileUploadResponse,
} from '../models/index';
import {
    WorkspaceservicehttpFileUploadResponseFromJSON,
    WorkspaceservicehttpFileUploadResponseToJSON,
} from '../models/index';

export interface WorkspaceMicroserviceRestApiV1FileUploadPostRequest {
    workspaceId: string;
    folderId: string;
    userId: string;
    attachment: Blob;
    filename?: string;
}

/**
 * 
 */
export class WorkspaceServiceRestApi extends runtime.BaseAPI {

    /**
     * This endpoint allows for the uploading of a file to the server. Upon successful upload,
     * Uploads a file to the server
     */
    async workspaceMicroserviceRestApiV1FileUploadPostRaw(requestParameters: WorkspaceMicroserviceRestApiV1FileUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkspaceservicehttpFileUploadResponse>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling workspaceMicroserviceRestApiV1FileUploadPost.');
        }

        if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
            throw new runtime.RequiredError('folderId','Required parameter requestParameters.folderId was null or undefined when calling workspaceMicroserviceRestApiV1FileUploadPost.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling workspaceMicroserviceRestApiV1FileUploadPost.');
        }

        if (requestParameters.attachment === null || requestParameters.attachment === undefined) {
            throw new runtime.RequiredError('attachment','Required parameter requestParameters.attachment was null or undefined when calling workspaceMicroserviceRestApiV1FileUploadPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.workspaceId !== undefined) {
            formParams.append('workspaceId', requestParameters.workspaceId as any);
        }

        if (requestParameters.folderId !== undefined) {
            formParams.append('folderId', requestParameters.folderId as any);
        }

        if (requestParameters.filename !== undefined) {
            formParams.append('filename', requestParameters.filename as any);
        }

        if (requestParameters.userId !== undefined) {
            formParams.append('userId', requestParameters.userId as any);
        }

        if (requestParameters.attachment !== undefined) {
            formParams.append('attachment', requestParameters.attachment as any);
        }

        const response = await this.request({
            path: `/workspace-microservice/rest-api/v1/file/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkspaceservicehttpFileUploadResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows for the uploading of a file to the server. Upon successful upload,
     * Uploads a file to the server
     */
    async workspaceMicroserviceRestApiV1FileUploadPost(requestParameters: WorkspaceMicroserviceRestApiV1FileUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkspaceservicehttpFileUploadResponse> {
        const response = await this.workspaceMicroserviceRestApiV1FileUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
