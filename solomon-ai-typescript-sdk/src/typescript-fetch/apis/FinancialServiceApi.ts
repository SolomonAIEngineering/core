/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddDefaultPocketsToBankAccountRequest,
  AddDefaultPocketsToBankAccountResponse,
  AddNoteToFinancialUserProfileRequest,
  AddNoteToFinancialUserProfileResponse,
  AddNoteToRecurringTransactionRequest,
  AddNoteToRecurringTransactionResponse,
  AddNoteToSmartGoalRequest,
  AddNoteToSmartGoalResponse,
  AddNoteToTransactionRequest,
  AddNoteToTransactionResponse,
  AddTransactionsToManuallyLinkedAccountRequest,
  AddTransactionsToManuallyLinkedAccountResponse,
  BulkUpdateRecurringTransactionRequest,
  BulkUpdateRecurringTransactionResponse,
  BulkUpdateTransactionRequest,
  BulkUpdateTransactionResponse,
  CheckIfQuotaExceededResponse,
  CreateBankAccountRequest,
  CreateBankAccountResponse,
  CreateBudgetRequest,
  CreateBudgetResponse,
  CreateCreditAccountRequest,
  CreateCreditAccountResponse,
  CreateManualLinkRequest,
  CreateManualLinkResponse,
  CreateMilestoneRequest,
  CreateMilestoneResponse,
  CreateSmartGoalRequest,
  CreateSmartGoalResponse,
  CreateSubscriptionRequest,
  CreateSubscriptionResponse,
  CreateUserProfileRequest1,
  CreateUserProfileResponse1,
  DeleteBankAccountResponse,
  DeleteBudgetResponse,
  DeleteLinkResponse,
  DeleteMilestoneResponse,
  DeleteNoteFromRecurringTransactionResponse,
  DeleteNoteFromSmartGoalResponse,
  DeleteNoteFromTransactionResponse,
  DeletePocketResponse,
  DeleteRecurringTransactionResponse,
  DeleteSmartGoalResponse,
  DeleteTransactionResponse,
  DeleteUserProfileResponse1,
  GetAccountBalanceHistoryResponse,
  GetAllBudgetsResponse,
  GetBankAccountResponse,
  GetBudgetResponse,
  GetCategoryMetricsFinancialSubProfileOverTimeResponse,
  GetCategoryMonthlyTransactionCountResponse,
  GetDebtToIncomeRatioResponse,
  GetExpenseMetricsFinancialSubProfileOverTimeResponse,
  GetExpenseMetricsResponse,
  GetFinancialProfileResponse,
  GetForecastResponse,
  GetHistoricalAccountBalanceResponse,
  GetIncomeExpenseRatioResponse,
  GetIncomeMetricsFinancialSubProfileOverTimeResponse,
  GetIncomeMetricsResponse,
  GetInvestmentAcccountResponse,
  GetLiabilityAccountResponse,
  GetLinkResponse,
  GetLinksResponse,
  GetLocationMetricsFinancialSubProfileOverTimeResponse,
  GetMelodyFinancialContextResponse,
  GetMerchantMetricsFinancialSubProfileOverTimeResponse,
  GetMerchantMonthlyExpenditureResponse,
  GetMilestoneResponse,
  GetMilestonesBySmartGoalIdResponse,
  GetMonthlyBalanceResponse,
  GetMonthlyExpenditureResponse,
  GetMonthlyIncomeResponse,
  GetMonthlySavingsResponse,
  GetMonthlyTotalQuantityBySecurityAndUserResponse,
  GetMonthlyTransactionCountResponse,
  GetMortgageAccountResponse,
  GetNoteFromSmartGoalResponse,
  GetNoteFromTransactionResponse,
  GetNotesFromFinancialUserProfileResponse,
  GetNotesFromSmartGoalResponse,
  GetPaymentChannelFinancialSubProfileOverTimeResponse,
  GetPaymentChannelMonthlyExpenditureResponse,
  GetPocketResponse,
  GetRecurringTransactionsForUserResponse,
  GetSingleRecurringTransactionResponse,
  GetSmartGoalsByPocketIdResponse,
  GetSplitTransactionResponse,
  GetStudentLoanAccountResponse,
  GetTotalInvestmentBySecurityResponse,
  GetTransactionAggregatesResponse,
  GetTransactionResponse,
  GetTransactionsBetweenTimeRangesResponse,
  GetTransactionsForBankAccountResponse,
  GetTransactionsForPastMonthResponse,
  GetTransactionsForPastWeekResponse,
  GetTransactionsResponse,
  GetUserAccountBalanceHistoryResponse,
  GetUserCategoryMonthlyExpenditureResponse,
  GetUserCategoryMonthlyIncomeResponse,
  GetUserProfileResponse1,
  HealthCheckResponse,
  InternalErrorMessageResponse,
  ListRecurringTransactionNotesResponse,
  ListRecurringTransactionsForUserAndAccountResponse,
  ListTransactionNotesResponse,
  ListTransactionsAcrossAllAccountsResponse,
  ListTransactionsResponse,
  PathUnknownErrorMessageResponse,
  PlaidExchangeTokenRequest,
  PlaidExchangeTokenResponse,
  PlaidInitiateTokenExchangeRequest,
  PlaidInitiateTokenExchangeResponse,
  PlaidInitiateTokenUpdateRequest,
  PlaidInitiateTokenUpdateResponse,
  PollAsyncTaskExecutionStatusResponse,
  ReadynessCheckResponse,
  RecordAskCopilotQuestionRequest,
  RecordAskCopilotQuestionResponse,
  SearchTransactionsRequest,
  SearchTransactionsResponse,
  SplitTransactionRequest,
  SplitTransactionResponse,
  Status1,
  TriggerSyncRequest,
  TriggerSyncResponse,
  UnSplitTransactionsRequest,
  UnSplitTransactionsResponse,
  UpdateBankAccountRequest,
  UpdateBankAccountResponse,
  UpdateBudgetRequest,
  UpdateBudgetResponse,
  UpdateMilestoneRequest,
  UpdateMilestoneResponse,
  UpdateNoteToRecurringTransactionRequest,
  UpdateNoteToRecurringTransactionResponse,
  UpdateNoteToSmartGoalRequest,
  UpdateNoteToSmartGoalResponse,
  UpdateNoteToTransactionRequest,
  UpdateNoteToTransactionResponse,
  UpdatePocketRequest,
  UpdatePocketResponse,
  UpdateRecurringTransactionRequest,
  UpdateRecurringTransactionResponse,
  UpdateSingleTransactionRequest,
  UpdateSingleTransactionResponse,
  UpdateSmartGoalRequest,
  UpdateSmartGoalResponse,
  UpdateUserProfileRequest,
  UpdateUserProfileResponse,
  ValidationErrorMessageResponse,
} from '../models/index';
import {
    AddDefaultPocketsToBankAccountRequestFromJSON,
    AddDefaultPocketsToBankAccountRequestToJSON,
    AddDefaultPocketsToBankAccountResponseFromJSON,
    AddDefaultPocketsToBankAccountResponseToJSON,
    AddNoteToFinancialUserProfileRequestFromJSON,
    AddNoteToFinancialUserProfileRequestToJSON,
    AddNoteToFinancialUserProfileResponseFromJSON,
    AddNoteToFinancialUserProfileResponseToJSON,
    AddNoteToRecurringTransactionRequestFromJSON,
    AddNoteToRecurringTransactionRequestToJSON,
    AddNoteToRecurringTransactionResponseFromJSON,
    AddNoteToRecurringTransactionResponseToJSON,
    AddNoteToSmartGoalRequestFromJSON,
    AddNoteToSmartGoalRequestToJSON,
    AddNoteToSmartGoalResponseFromJSON,
    AddNoteToSmartGoalResponseToJSON,
    AddNoteToTransactionRequestFromJSON,
    AddNoteToTransactionRequestToJSON,
    AddNoteToTransactionResponseFromJSON,
    AddNoteToTransactionResponseToJSON,
    AddTransactionsToManuallyLinkedAccountRequestFromJSON,
    AddTransactionsToManuallyLinkedAccountRequestToJSON,
    AddTransactionsToManuallyLinkedAccountResponseFromJSON,
    AddTransactionsToManuallyLinkedAccountResponseToJSON,
    BulkUpdateRecurringTransactionRequestFromJSON,
    BulkUpdateRecurringTransactionRequestToJSON,
    BulkUpdateRecurringTransactionResponseFromJSON,
    BulkUpdateRecurringTransactionResponseToJSON,
    BulkUpdateTransactionRequestFromJSON,
    BulkUpdateTransactionRequestToJSON,
    BulkUpdateTransactionResponseFromJSON,
    BulkUpdateTransactionResponseToJSON,
    CheckIfQuotaExceededResponseFromJSON,
    CheckIfQuotaExceededResponseToJSON,
    CreateBankAccountRequestFromJSON,
    CreateBankAccountRequestToJSON,
    CreateBankAccountResponseFromJSON,
    CreateBankAccountResponseToJSON,
    CreateBudgetRequestFromJSON,
    CreateBudgetRequestToJSON,
    CreateBudgetResponseFromJSON,
    CreateBudgetResponseToJSON,
    CreateCreditAccountRequestFromJSON,
    CreateCreditAccountRequestToJSON,
    CreateCreditAccountResponseFromJSON,
    CreateCreditAccountResponseToJSON,
    CreateManualLinkRequestFromJSON,
    CreateManualLinkRequestToJSON,
    CreateManualLinkResponseFromJSON,
    CreateManualLinkResponseToJSON,
    CreateMilestoneRequestFromJSON,
    CreateMilestoneRequestToJSON,
    CreateMilestoneResponseFromJSON,
    CreateMilestoneResponseToJSON,
    CreateSmartGoalRequestFromJSON,
    CreateSmartGoalRequestToJSON,
    CreateSmartGoalResponseFromJSON,
    CreateSmartGoalResponseToJSON,
    CreateSubscriptionRequestFromJSON,
    CreateSubscriptionRequestToJSON,
    CreateSubscriptionResponseFromJSON,
    CreateSubscriptionResponseToJSON,
    CreateUserProfileRequest1FromJSON,
    CreateUserProfileRequest1ToJSON,
    CreateUserProfileResponse1FromJSON,
    CreateUserProfileResponse1ToJSON,
    DeleteBankAccountResponseFromJSON,
    DeleteBankAccountResponseToJSON,
    DeleteBudgetResponseFromJSON,
    DeleteBudgetResponseToJSON,
    DeleteLinkResponseFromJSON,
    DeleteLinkResponseToJSON,
    DeleteMilestoneResponseFromJSON,
    DeleteMilestoneResponseToJSON,
    DeleteNoteFromRecurringTransactionResponseFromJSON,
    DeleteNoteFromRecurringTransactionResponseToJSON,
    DeleteNoteFromSmartGoalResponseFromJSON,
    DeleteNoteFromSmartGoalResponseToJSON,
    DeleteNoteFromTransactionResponseFromJSON,
    DeleteNoteFromTransactionResponseToJSON,
    DeletePocketResponseFromJSON,
    DeletePocketResponseToJSON,
    DeleteRecurringTransactionResponseFromJSON,
    DeleteRecurringTransactionResponseToJSON,
    DeleteSmartGoalResponseFromJSON,
    DeleteSmartGoalResponseToJSON,
    DeleteTransactionResponseFromJSON,
    DeleteTransactionResponseToJSON,
    DeleteUserProfileResponse1FromJSON,
    DeleteUserProfileResponse1ToJSON,
    GetAccountBalanceHistoryResponseFromJSON,
    GetAccountBalanceHistoryResponseToJSON,
    GetAllBudgetsResponseFromJSON,
    GetAllBudgetsResponseToJSON,
    GetBankAccountResponseFromJSON,
    GetBankAccountResponseToJSON,
    GetBudgetResponseFromJSON,
    GetBudgetResponseToJSON,
    GetCategoryMetricsFinancialSubProfileOverTimeResponseFromJSON,
    GetCategoryMetricsFinancialSubProfileOverTimeResponseToJSON,
    GetCategoryMonthlyTransactionCountResponseFromJSON,
    GetCategoryMonthlyTransactionCountResponseToJSON,
    GetDebtToIncomeRatioResponseFromJSON,
    GetDebtToIncomeRatioResponseToJSON,
    GetExpenseMetricsFinancialSubProfileOverTimeResponseFromJSON,
    GetExpenseMetricsFinancialSubProfileOverTimeResponseToJSON,
    GetExpenseMetricsResponseFromJSON,
    GetExpenseMetricsResponseToJSON,
    GetFinancialProfileResponseFromJSON,
    GetFinancialProfileResponseToJSON,
    GetForecastResponseFromJSON,
    GetForecastResponseToJSON,
    GetHistoricalAccountBalanceResponseFromJSON,
    GetHistoricalAccountBalanceResponseToJSON,
    GetIncomeExpenseRatioResponseFromJSON,
    GetIncomeExpenseRatioResponseToJSON,
    GetIncomeMetricsFinancialSubProfileOverTimeResponseFromJSON,
    GetIncomeMetricsFinancialSubProfileOverTimeResponseToJSON,
    GetIncomeMetricsResponseFromJSON,
    GetIncomeMetricsResponseToJSON,
    GetInvestmentAcccountResponseFromJSON,
    GetInvestmentAcccountResponseToJSON,
    GetLiabilityAccountResponseFromJSON,
    GetLiabilityAccountResponseToJSON,
    GetLinkResponseFromJSON,
    GetLinkResponseToJSON,
    GetLinksResponseFromJSON,
    GetLinksResponseToJSON,
    GetLocationMetricsFinancialSubProfileOverTimeResponseFromJSON,
    GetLocationMetricsFinancialSubProfileOverTimeResponseToJSON,
    GetMelodyFinancialContextResponseFromJSON,
    GetMelodyFinancialContextResponseToJSON,
    GetMerchantMetricsFinancialSubProfileOverTimeResponseFromJSON,
    GetMerchantMetricsFinancialSubProfileOverTimeResponseToJSON,
    GetMerchantMonthlyExpenditureResponseFromJSON,
    GetMerchantMonthlyExpenditureResponseToJSON,
    GetMilestoneResponseFromJSON,
    GetMilestoneResponseToJSON,
    GetMilestonesBySmartGoalIdResponseFromJSON,
    GetMilestonesBySmartGoalIdResponseToJSON,
    GetMonthlyBalanceResponseFromJSON,
    GetMonthlyBalanceResponseToJSON,
    GetMonthlyExpenditureResponseFromJSON,
    GetMonthlyExpenditureResponseToJSON,
    GetMonthlyIncomeResponseFromJSON,
    GetMonthlyIncomeResponseToJSON,
    GetMonthlySavingsResponseFromJSON,
    GetMonthlySavingsResponseToJSON,
    GetMonthlyTotalQuantityBySecurityAndUserResponseFromJSON,
    GetMonthlyTotalQuantityBySecurityAndUserResponseToJSON,
    GetMonthlyTransactionCountResponseFromJSON,
    GetMonthlyTransactionCountResponseToJSON,
    GetMortgageAccountResponseFromJSON,
    GetMortgageAccountResponseToJSON,
    GetNoteFromSmartGoalResponseFromJSON,
    GetNoteFromSmartGoalResponseToJSON,
    GetNoteFromTransactionResponseFromJSON,
    GetNoteFromTransactionResponseToJSON,
    GetNotesFromFinancialUserProfileResponseFromJSON,
    GetNotesFromFinancialUserProfileResponseToJSON,
    GetNotesFromSmartGoalResponseFromJSON,
    GetNotesFromSmartGoalResponseToJSON,
    GetPaymentChannelFinancialSubProfileOverTimeResponseFromJSON,
    GetPaymentChannelFinancialSubProfileOverTimeResponseToJSON,
    GetPaymentChannelMonthlyExpenditureResponseFromJSON,
    GetPaymentChannelMonthlyExpenditureResponseToJSON,
    GetPocketResponseFromJSON,
    GetPocketResponseToJSON,
    GetRecurringTransactionsForUserResponseFromJSON,
    GetRecurringTransactionsForUserResponseToJSON,
    GetSingleRecurringTransactionResponseFromJSON,
    GetSingleRecurringTransactionResponseToJSON,
    GetSmartGoalsByPocketIdResponseFromJSON,
    GetSmartGoalsByPocketIdResponseToJSON,
    GetSplitTransactionResponseFromJSON,
    GetSplitTransactionResponseToJSON,
    GetStudentLoanAccountResponseFromJSON,
    GetStudentLoanAccountResponseToJSON,
    GetTotalInvestmentBySecurityResponseFromJSON,
    GetTotalInvestmentBySecurityResponseToJSON,
    GetTransactionAggregatesResponseFromJSON,
    GetTransactionAggregatesResponseToJSON,
    GetTransactionResponseFromJSON,
    GetTransactionResponseToJSON,
    GetTransactionsBetweenTimeRangesResponseFromJSON,
    GetTransactionsBetweenTimeRangesResponseToJSON,
    GetTransactionsForBankAccountResponseFromJSON,
    GetTransactionsForBankAccountResponseToJSON,
    GetTransactionsForPastMonthResponseFromJSON,
    GetTransactionsForPastMonthResponseToJSON,
    GetTransactionsForPastWeekResponseFromJSON,
    GetTransactionsForPastWeekResponseToJSON,
    GetTransactionsResponseFromJSON,
    GetTransactionsResponseToJSON,
    GetUserAccountBalanceHistoryResponseFromJSON,
    GetUserAccountBalanceHistoryResponseToJSON,
    GetUserCategoryMonthlyExpenditureResponseFromJSON,
    GetUserCategoryMonthlyExpenditureResponseToJSON,
    GetUserCategoryMonthlyIncomeResponseFromJSON,
    GetUserCategoryMonthlyIncomeResponseToJSON,
    GetUserProfileResponse1FromJSON,
    GetUserProfileResponse1ToJSON,
    HealthCheckResponseFromJSON,
    HealthCheckResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    ListRecurringTransactionNotesResponseFromJSON,
    ListRecurringTransactionNotesResponseToJSON,
    ListRecurringTransactionsForUserAndAccountResponseFromJSON,
    ListRecurringTransactionsForUserAndAccountResponseToJSON,
    ListTransactionNotesResponseFromJSON,
    ListTransactionNotesResponseToJSON,
    ListTransactionsAcrossAllAccountsResponseFromJSON,
    ListTransactionsAcrossAllAccountsResponseToJSON,
    ListTransactionsResponseFromJSON,
    ListTransactionsResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    PlaidExchangeTokenRequestFromJSON,
    PlaidExchangeTokenRequestToJSON,
    PlaidExchangeTokenResponseFromJSON,
    PlaidExchangeTokenResponseToJSON,
    PlaidInitiateTokenExchangeRequestFromJSON,
    PlaidInitiateTokenExchangeRequestToJSON,
    PlaidInitiateTokenExchangeResponseFromJSON,
    PlaidInitiateTokenExchangeResponseToJSON,
    PlaidInitiateTokenUpdateRequestFromJSON,
    PlaidInitiateTokenUpdateRequestToJSON,
    PlaidInitiateTokenUpdateResponseFromJSON,
    PlaidInitiateTokenUpdateResponseToJSON,
    PollAsyncTaskExecutionStatusResponseFromJSON,
    PollAsyncTaskExecutionStatusResponseToJSON,
    ReadynessCheckResponseFromJSON,
    ReadynessCheckResponseToJSON,
    RecordAskCopilotQuestionRequestFromJSON,
    RecordAskCopilotQuestionRequestToJSON,
    RecordAskCopilotQuestionResponseFromJSON,
    RecordAskCopilotQuestionResponseToJSON,
    SearchTransactionsRequestFromJSON,
    SearchTransactionsRequestToJSON,
    SearchTransactionsResponseFromJSON,
    SearchTransactionsResponseToJSON,
    SplitTransactionRequestFromJSON,
    SplitTransactionRequestToJSON,
    SplitTransactionResponseFromJSON,
    SplitTransactionResponseToJSON,
    Status1FromJSON,
    Status1ToJSON,
    TriggerSyncRequestFromJSON,
    TriggerSyncRequestToJSON,
    TriggerSyncResponseFromJSON,
    TriggerSyncResponseToJSON,
    UnSplitTransactionsRequestFromJSON,
    UnSplitTransactionsRequestToJSON,
    UnSplitTransactionsResponseFromJSON,
    UnSplitTransactionsResponseToJSON,
    UpdateBankAccountRequestFromJSON,
    UpdateBankAccountRequestToJSON,
    UpdateBankAccountResponseFromJSON,
    UpdateBankAccountResponseToJSON,
    UpdateBudgetRequestFromJSON,
    UpdateBudgetRequestToJSON,
    UpdateBudgetResponseFromJSON,
    UpdateBudgetResponseToJSON,
    UpdateMilestoneRequestFromJSON,
    UpdateMilestoneRequestToJSON,
    UpdateMilestoneResponseFromJSON,
    UpdateMilestoneResponseToJSON,
    UpdateNoteToRecurringTransactionRequestFromJSON,
    UpdateNoteToRecurringTransactionRequestToJSON,
    UpdateNoteToRecurringTransactionResponseFromJSON,
    UpdateNoteToRecurringTransactionResponseToJSON,
    UpdateNoteToSmartGoalRequestFromJSON,
    UpdateNoteToSmartGoalRequestToJSON,
    UpdateNoteToSmartGoalResponseFromJSON,
    UpdateNoteToSmartGoalResponseToJSON,
    UpdateNoteToTransactionRequestFromJSON,
    UpdateNoteToTransactionRequestToJSON,
    UpdateNoteToTransactionResponseFromJSON,
    UpdateNoteToTransactionResponseToJSON,
    UpdatePocketRequestFromJSON,
    UpdatePocketRequestToJSON,
    UpdatePocketResponseFromJSON,
    UpdatePocketResponseToJSON,
    UpdateRecurringTransactionRequestFromJSON,
    UpdateRecurringTransactionRequestToJSON,
    UpdateRecurringTransactionResponseFromJSON,
    UpdateRecurringTransactionResponseToJSON,
    UpdateSingleTransactionRequestFromJSON,
    UpdateSingleTransactionRequestToJSON,
    UpdateSingleTransactionResponseFromJSON,
    UpdateSingleTransactionResponseToJSON,
    UpdateSmartGoalRequestFromJSON,
    UpdateSmartGoalRequestToJSON,
    UpdateSmartGoalResponseFromJSON,
    UpdateSmartGoalResponseToJSON,
    UpdateUserProfileRequestFromJSON,
    UpdateUserProfileRequestToJSON,
    UpdateUserProfileResponseFromJSON,
    UpdateUserProfileResponseToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
} from '../models/index';

export interface AddDefaultPocketsToBankAccountOperationRequest {
    addDefaultPocketsToBankAccountRequest: AddDefaultPocketsToBankAccountRequest;
}

export interface AddNoteToFinancialUserProfileOperationRequest {
    addNoteToFinancialUserProfileRequest: AddNoteToFinancialUserProfileRequest;
}

export interface AddNoteToRecurringTransactionOperationRequest {
    addNoteToRecurringTransactionRequest: AddNoteToRecurringTransactionRequest;
}

export interface AddNoteToSmartGoalOperationRequest {
    addNoteToSmartGoalRequest: AddNoteToSmartGoalRequest;
}

export interface AddNoteToTransactionOperationRequest {
    addNoteToTransactionRequest: AddNoteToTransactionRequest;
}

export interface AddTransactionsToManuallyLinkedAccountOperationRequest {
    addTransactionsToManuallyLinkedAccountRequest: AddTransactionsToManuallyLinkedAccountRequest;
}

export interface AskCopilotQuestionRequest {
    recordAskCopilotQuestionRequest: RecordAskCopilotQuestionRequest;
}

export interface BulkUpdateRecurringTransactionOperationRequest {
    bulkUpdateRecurringTransactionRequest: BulkUpdateRecurringTransactionRequest;
}

export interface BulkUpdateTransactionOperationRequest {
    bulkUpdateTransactionRequest: BulkUpdateTransactionRequest;
}

export interface CheckIfQuotaExceededRequest {
    userId: string;
    profileType: CheckIfQuotaExceededProfileTypeEnum;
}

export interface CreateBankAccountOperationRequest {
    createBankAccountRequest: CreateBankAccountRequest;
}

export interface CreateBudgetOperationRequest {
    createBudgetRequest: CreateBudgetRequest;
}

export interface CreateCreditAccountOperationRequest {
    createCreditAccountRequest: CreateCreditAccountRequest;
}

export interface CreateLinkRequest {
    createManualLinkRequest: CreateManualLinkRequest;
}

export interface CreateMilestoneOperationRequest {
    createMilestoneRequest: CreateMilestoneRequest;
}

export interface CreateSmartGoalOperationRequest {
    createSmartGoalRequest: CreateSmartGoalRequest;
}

export interface CreateSubscriptionOperationRequest {
    createSubscriptionRequest: CreateSubscriptionRequest;
}

export interface CreateUserProfile1Request {
    createUserProfileRequest1: CreateUserProfileRequest1;
}

export interface DeleteBudgetRequest {
    budgetId: string;
}

export interface DeleteLinkRequest {
    linkId: string;
    userId: string;
    profileType: DeleteLinkProfileTypeEnum;
}

export interface DeleteMilestoneRequest {
    milestoneId: string;
}

export interface DeleteNoteFromRecurringTransactionRequest {
    transactionId: string;
    noteId: string;
}

export interface DeleteNoteFromSmartGoalRequest {
    noteId: string;
    smartGoalId: string;
}

export interface DeleteNoteFromTransactionRequest {
    transactionId: string;
    noteId: string;
}

export interface DeletePocketRequest {
    pocketId: string;
}

export interface DeleteSmartGoalRequest {
    smartGoalId: string;
}

export interface DeleteTransactionRequest {
    transactionId: string;
}

export interface DeleteTransaction1Request {
    transactionId: string;
}

export interface DeleteUserProfile1Request {
    bankAccountId: string;
    userId: string;
    profileType: DeleteUserProfile1ProfileTypeEnum;
}

export interface DeleteUserProfile2Request {
    userId: string;
    profileType: DeleteUserProfile2ProfileTypeEnum;
}

export interface ExchangePlaidTokenRequest {
    plaidExchangeTokenRequest: PlaidExchangeTokenRequest;
}

export interface GetAccountBalanceRequest {
    userId: string;
    plaidAccountId: string;
    profileType?: GetAccountBalanceProfileTypeEnum;
}

export interface GetAccountBalanceHistoryRequest {
    plaidAccountId: string;
    pageNumber: string;
    pageSize: string;
}

export interface GetAllBudgetsRequest {
    pocketId: string;
    smartGoalId: string;
    milestoneId: string;
}

export interface GetBankAccountRequest {
    bankAccountId: string;
}

export interface GetBudgetRequest {
    budgetId: string;
}

export interface GetCategoryMetricsFinancialSubProfileOverTimeRequest {
    userId?: string;
    profileType?: GetCategoryMetricsFinancialSubProfileOverTimeProfileTypeEnum;
    personalFinanceCategoryPrimary?: string;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
}

export interface GetCategoryMonthlyTransactionCountRequest {
    userId: string;
    month?: number;
    personalFinanceCategoryPrimary?: string;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetCategoryMonthlyTransactionCountProfileTypeEnum;
}

export interface GetDebtToIncomeRatioRequest {
    userId: string;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetDebtToIncomeRatioProfileTypeEnum;
}

export interface GetExpenseMetricsRequest {
    userId: string;
    month?: number;
    personalFinanceCategoryPrimary?: string;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetExpenseMetricsProfileTypeEnum;
}

export interface GetExpenseMetricsFinancialSubProfileOverTimeRequest {
    userId?: string;
    profileType?: GetExpenseMetricsFinancialSubProfileOverTimeProfileTypeEnum;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
}

export interface GetFinancialProfileRequest {
    userId: string;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetFinancialProfileProfileTypeEnum;
}

export interface GetForecastRequest {
    smartGoalId: string;
}

export interface GetIncomeExpenseRatioRequest {
    userId: string;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetIncomeExpenseRatioProfileTypeEnum;
}

export interface GetIncomeMetricsRequest {
    userId: string;
    month?: number;
    personalFinanceCategoryPrimary?: string;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetIncomeMetricsProfileTypeEnum;
}

export interface GetIncomeMetricsFinancialSubProfileOverTimeRequest {
    userId?: string;
    profileType?: GetIncomeMetricsFinancialSubProfileOverTimeProfileTypeEnum;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
}

export interface GetInvestmentAccountRequest {
    userId: string;
    investmentAccountId: string;
    profileType: GetInvestmentAccountProfileTypeEnum;
}

export interface GetLiabilityAccountRequest {
    userId: string;
    liabilityAccountId: string;
    profileType: GetLiabilityAccountProfileTypeEnum;
}

export interface GetLinkRequest {
    linkId: string;
    userId: string;
    profileType: GetLinkProfileTypeEnum;
}

export interface GetLinksRequest {
    userId: string;
    profileType: GetLinksProfileTypeEnum;
}

export interface GetLocationMetricsFinancialSubProfileOverTimeRequest {
    userId?: string;
    profileType?: GetLocationMetricsFinancialSubProfileOverTimeProfileTypeEnum;
    month?: number;
    locationCity?: string;
    pageNumber?: string;
    pageSize?: string;
}

export interface GetMelodyFinancialContextRequest {
    userId: string;
    profileType?: GetMelodyFinancialContextProfileTypeEnum;
}

export interface GetMerchantMetricsFinancialSubProfileOverTimeRequest {
    userId?: string;
    profileType?: GetMerchantMetricsFinancialSubProfileOverTimeProfileTypeEnum;
    month?: number;
    merchantName?: string;
    pageNumber?: string;
    pageSize?: string;
}

export interface GetMerchantMonthlyExpenditureRequest {
    userId: string;
    month?: number;
    merchantName?: string;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetMerchantMonthlyExpenditureProfileTypeEnum;
}

export interface GetMilestoneRequest {
    milestoneId: string;
}

export interface GetMilestonesRequest {
    smartGoalId: string;
}

export interface GetMonthlyBalanceRequest {
    userId: string;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetMonthlyBalanceProfileTypeEnum;
}

export interface GetMonthlyExpenditureRequest {
    userId: string;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetMonthlyExpenditureProfileTypeEnum;
}

export interface GetMonthlyIncomeRequest {
    userId: string;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetMonthlyIncomeProfileTypeEnum;
}

export interface GetMonthlySavingsRequest {
    userId: string;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetMonthlySavingsProfileTypeEnum;
}

export interface GetMonthlyTotalQuantityBySecurityAndUserRequest {
    userId: string;
    month?: number;
    securityId?: string;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetMonthlyTotalQuantityBySecurityAndUserProfileTypeEnum;
}

export interface GetMonthlyTransactionCountRequest {
    userId: string;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetMonthlyTransactionCountProfileTypeEnum;
}

export interface GetMortageAccountRequest {
    userId: string;
    mortgageAccountId: string;
    profileType: GetMortageAccountProfileTypeEnum;
}

export interface GetNoteFromSmartGoalRequest {
    noteId: string;
}

export interface GetNoteFromTransactionRequest {
    transactionId: string;
    noteId: string;
}

export interface GetNotesFromFinancialUserProfileRequest {
    businessAccountUserId: string;
    profileType: GetNotesFromFinancialUserProfileProfileTypeEnum;
}

export interface GetNotesFromSmartGoalRequest {
    smartGoalId: string;
}

export interface GetPaymentChannelFinancialSubProfileOverTimeRequest {
    userId?: string;
    profileType?: GetPaymentChannelFinancialSubProfileOverTimeProfileTypeEnum;
    month?: number;
    paymentChannel?: string;
    pageNumber?: string;
    pageSize?: string;
}

export interface GetPaymentChannelMonthlyExpenditureRequest {
    userId: string;
    month?: number;
    paymentChannel?: string;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetPaymentChannelMonthlyExpenditureProfileTypeEnum;
}

export interface GetPocketRequest {
    pocketId: string;
}

export interface GetRecurringTransactionRequest {
    transactionId: string;
}

export interface GetRecurringTransactionsForUserRequest {
    userId: string;
    profileType: GetRecurringTransactionsForUserProfileTypeEnum;
    pageNumber?: string;
    pageSize?: string;
}

export interface GetSmartGoalsByPocketIdRequest {
    pocketId: string;
}

export interface GetSplitTransactionRequest {
    transactionId: string;
}

export interface GetStudentLoanAccountRequest {
    userId: string;
    studentLoanAccountId: string;
    profileType: GetStudentLoanAccountProfileTypeEnum;
}

export interface GetTotalInvestmentBySecurityRequest {
    userId: string;
    securityId?: string;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetTotalInvestmentBySecurityProfileTypeEnum;
}

export interface GetTransactionRequest {
    transactionId: string;
}

export interface GetTransactionsRequest {
    userId: string;
    plaidAccountId: string;
    pageNumber: string;
    pageSize: string;
    profileType: GetTransactionsProfileTypeEnum;
}

export interface GetTransactions1Request {
    userId: string;
    pageNumber: string;
    pageSize: string;
    profileType: GetTransactions1ProfileTypeEnum;
}

export interface GetTransactionsByTimeRequest {
    userId: string;
    plaidAccountId: string;
    profileType: GetTransactionsByTimeProfileTypeEnum;
    startDate?: Date;
    endDate?: Date;
    page?: number;
    limit?: number;
    financialAccountType?: GetTransactionsByTimeFinancialAccountTypeEnum;
}

export interface GetTransactionsForPastMonthRequest {
    userId: string;
    plaidAccountId: string;
    profileType: GetTransactionsForPastMonthProfileTypeEnum;
    page?: number;
    limit?: number;
    financialAccountType?: GetTransactionsForPastMonthFinancialAccountTypeEnum;
}

export interface GetTransactionsForPastWeekRequest {
    userId: string;
    plaidAccountId: string;
    profileType: GetTransactionsForPastWeekProfileTypeEnum;
    page?: number;
    limit?: number;
    financialAccountType?: GetTransactionsForPastWeekFinancialAccountTypeEnum;
}

export interface GetUserAccountBalanceHistoryRequest {
    userId: string;
    pageNumber: string;
    pageSize: string;
    profileType?: GetUserAccountBalanceHistoryProfileTypeEnum;
}

export interface GetUserCategoryMonthlyExpenditureRequest {
    userId: string;
    personalFinanceCategoryPrimary?: string;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetUserCategoryMonthlyExpenditureProfileTypeEnum;
}

export interface GetUserCategoryMonthlyIncomeRequest {
    userId: string;
    personalFinanceCategoryPrimary?: string;
    month?: number;
    pageNumber?: string;
    pageSize?: string;
    profileType?: GetUserCategoryMonthlyIncomeProfileTypeEnum;
}

export interface GetUserProfile1Request {
    userId: string;
    profileType: GetUserProfile1ProfileTypeEnum;
    bypassCache?: boolean;
}

export interface InitiatePlaidSetupRequest {
    plaidInitiateTokenExchangeRequest: PlaidInitiateTokenExchangeRequest;
}

export interface InitiatePlaidTokenUpdateRequest {
    plaidInitiateTokenUpdateRequest: PlaidInitiateTokenUpdateRequest;
}

export interface ListRecurringTransactionNotesRequest {
    transactionId: string;
}

export interface ListRecurringTransactionsForUserAndAccountRequest {
    accountId: string;
    userId: string;
    profileType: ListRecurringTransactionsForUserAndAccountProfileTypeEnum;
    pageNumber?: string;
    pageSize?: string;
    financialAccountType?: ListRecurringTransactionsForUserAndAccountFinancialAccountTypeEnum;
}

export interface ListTransactionNotesRequest {
    transactionId: string;
}

export interface ListTransactionsRequest {
    accountId: string;
    userId: string;
    profileType: ListTransactionsProfileTypeEnum;
    pageNumber?: string;
    pageSize?: string;
    financialAccountType?: ListTransactionsFinancialAccountTypeEnum;
}

export interface ListTransactions1Request {
    userId: string;
    profileType: ListTransactions1ProfileTypeEnum;
    pageNumber?: string;
    pageSize?: string;
}

export interface PollAsyncTaskExecutionStatusRequest {
    workflowId: string;
    runId: string;
}

export interface SearchTransactionsOperationRequest {
    searchTransactionsRequest: SearchTransactionsRequest;
}

export interface SplitTransactionOperationRequest {
    splitTransactionRequest: SplitTransactionRequest;
}

export interface TransactionAggregatesRequest {
    userId: string;
    month?: number;
    personalFinanceCategoryPrimary?: string;
    locationCity?: string;
    paymentChannel?: string;
    merchantName?: string;
    pageNumber?: string;
    pageSize?: string;
    profileType?: TransactionAggregatesProfileTypeEnum;
}

export interface TriggerSyncOperationRequest {
    triggerSyncRequest: TriggerSyncRequest;
}

export interface UnsplitTransactionsRequest {
    unSplitTransactionsRequest: UnSplitTransactionsRequest;
}

export interface UpdateBankAccountOperationRequest {
    updateBankAccountRequest: UpdateBankAccountRequest;
}

export interface UpdateNoteToRecurringTransactionOperationRequest {
    updateNoteToRecurringTransactionRequest: UpdateNoteToRecurringTransactionRequest;
}

export interface UpdateNoteToSmartGoalOperationRequest {
    updateNoteToSmartGoalRequest: UpdateNoteToSmartGoalRequest;
}

export interface UpdateNoteToTransactionOperationRequest {
    updateNoteToTransactionRequest: UpdateNoteToTransactionRequest;
}

export interface UpdatePocketOperationRequest {
    updatePocketRequest: UpdatePocketRequest;
}

export interface UpdateSingleTransactionOperationRequest {
    updateSingleTransactionRequest: UpdateSingleTransactionRequest;
}

export interface UpdateSmartGoalOperationRequest {
    updateSmartGoalRequest: UpdateSmartGoalRequest;
}

export interface UpdateTransactionRequest {
    updateRecurringTransactionRequest: UpdateRecurringTransactionRequest;
}

export interface UpdateUserProfileOperationRequest {
    updateUserProfileRequest: UpdateUserProfileRequest;
}

export interface UpdatesBudgetRequest {
    updateBudgetRequest: UpdateBudgetRequest;
}

export interface UpdatesMilestoneRequest {
    updateMilestoneRequest: UpdateMilestoneRequest;
}

/**
 * 
 */
export class FinancialServiceApi extends runtime.BaseAPI {

    /**
     * This endpoint adds a default pocket to a specific bank account of interest
     * adds a default set of pockets to a specific bank account of interest
     */
    async addDefaultPocketsToBankAccountRaw(requestParameters: AddDefaultPocketsToBankAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddDefaultPocketsToBankAccountResponse>> {
        if (requestParameters['addDefaultPocketsToBankAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'addDefaultPocketsToBankAccountRequest',
                'Required parameter "addDefaultPocketsToBankAccountRequest" was null or undefined when calling addDefaultPocketsToBankAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/pocket/bank-account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDefaultPocketsToBankAccountRequestToJSON(requestParameters['addDefaultPocketsToBankAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddDefaultPocketsToBankAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint adds a default pocket to a specific bank account of interest
     * adds a default set of pockets to a specific bank account of interest
     */
    async addDefaultPocketsToBankAccount(requestParameters: AddDefaultPocketsToBankAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddDefaultPocketsToBankAccountResponse> {
        const response = await this.addDefaultPocketsToBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint adds a note to a business account
     * Adds a note to a business account
     */
    async addNoteToFinancialUserProfileRaw(requestParameters: AddNoteToFinancialUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddNoteToFinancialUserProfileResponse>> {
        if (requestParameters['addNoteToFinancialUserProfileRequest'] == null) {
            throw new runtime.RequiredError(
                'addNoteToFinancialUserProfileRequest',
                'Required parameter "addNoteToFinancialUserProfileRequest" was null or undefined when calling addNoteToFinancialUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/financial-profile/business/note`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNoteToFinancialUserProfileRequestToJSON(requestParameters['addNoteToFinancialUserProfileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddNoteToFinancialUserProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint adds a note to a business account
     * Adds a note to a business account
     */
    async addNoteToFinancialUserProfile(requestParameters: AddNoteToFinancialUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddNoteToFinancialUserProfileResponse> {
        const response = await this.addNoteToFinancialUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint adds a note to a transaction
     * adds a note to a transaction
     */
    async addNoteToRecurringTransactionRaw(requestParameters: AddNoteToRecurringTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddNoteToRecurringTransactionResponse>> {
        if (requestParameters['addNoteToRecurringTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'addNoteToRecurringTransactionRequest',
                'Required parameter "addNoteToRecurringTransactionRequest" was null or undefined when calling addNoteToRecurringTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/recurring/note`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNoteToRecurringTransactionRequestToJSON(requestParameters['addNoteToRecurringTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddNoteToRecurringTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint adds a note to a transaction
     * adds a note to a transaction
     */
    async addNoteToRecurringTransaction(requestParameters: AddNoteToRecurringTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddNoteToRecurringTransactionResponse> {
        const response = await this.addNoteToRecurringTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint adds a note to a smart goal
     * adds a note to a smart goal
     */
    async addNoteToSmartGoalRaw(requestParameters: AddNoteToSmartGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddNoteToSmartGoalResponse>> {
        if (requestParameters['addNoteToSmartGoalRequest'] == null) {
            throw new runtime.RequiredError(
                'addNoteToSmartGoalRequest',
                'Required parameter "addNoteToSmartGoalRequest" was null or undefined when calling addNoteToSmartGoal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/smart-goal/note`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNoteToSmartGoalRequestToJSON(requestParameters['addNoteToSmartGoalRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddNoteToSmartGoalResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint adds a note to a smart goal
     * adds a note to a smart goal
     */
    async addNoteToSmartGoal(requestParameters: AddNoteToSmartGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddNoteToSmartGoalResponse> {
        const response = await this.addNoteToSmartGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint adds a note to a transaction
     * adds a note to a transaction
     */
    async addNoteToTransactionRaw(requestParameters: AddNoteToTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddNoteToTransactionResponse>> {
        if (requestParameters['addNoteToTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'addNoteToTransactionRequest',
                'Required parameter "addNoteToTransactionRequest" was null or undefined when calling addNoteToTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/note`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNoteToTransactionRequestToJSON(requestParameters['addNoteToTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddNoteToTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint adds a note to a transaction
     * adds a note to a transaction
     */
    async addNoteToTransaction(requestParameters: AddNoteToTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddNoteToTransactionResponse> {
        const response = await this.addNoteToTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint adds transactions to a manually linked account
     * Adds transactions to a manually linked account
     */
    async addTransactionsToManuallyLinkedAccountRaw(requestParameters: AddTransactionsToManuallyLinkedAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddTransactionsToManuallyLinkedAccountResponse>> {
        if (requestParameters['addTransactionsToManuallyLinkedAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'addTransactionsToManuallyLinkedAccountRequest',
                'Required parameter "addTransactionsToManuallyLinkedAccountRequest" was null or undefined when calling addTransactionsToManuallyLinkedAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/manual-linked-account/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTransactionsToManuallyLinkedAccountRequestToJSON(requestParameters['addTransactionsToManuallyLinkedAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddTransactionsToManuallyLinkedAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint adds transactions to a manually linked account
     * Adds transactions to a manually linked account
     */
    async addTransactionsToManuallyLinkedAccount(requestParameters: AddTransactionsToManuallyLinkedAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddTransactionsToManuallyLinkedAccountResponse> {
        const response = await this.addTransactionsToManuallyLinkedAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint checks if a user can ask his/her copilot a question
     * Ask a question to copilot
     */
    async askCopilotQuestionRaw(requestParameters: AskCopilotQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecordAskCopilotQuestionResponse>> {
        if (requestParameters['recordAskCopilotQuestionRequest'] == null) {
            throw new runtime.RequiredError(
                'recordAskCopilotQuestionRequest',
                'Required parameter "recordAskCopilotQuestionRequest" was null or undefined when calling askCopilotQuestion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/copilot/quota/question`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecordAskCopilotQuestionRequestToJSON(requestParameters['recordAskCopilotQuestionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecordAskCopilotQuestionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint checks if a user can ask his/her copilot a question
     * Ask a question to copilot
     */
    async askCopilotQuestion(requestParameters: AskCopilotQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecordAskCopilotQuestionResponse> {
        const response = await this.askCopilotQuestionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates a set of transactions
     * update a transaction
     */
    async bulkUpdateRecurringTransactionRaw(requestParameters: BulkUpdateRecurringTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkUpdateRecurringTransactionResponse>> {
        if (requestParameters['bulkUpdateRecurringTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'bulkUpdateRecurringTransactionRequest',
                'Required parameter "bulkUpdateRecurringTransactionRequest" was null or undefined when calling bulkUpdateRecurringTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/recurring/bulk`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUpdateRecurringTransactionRequestToJSON(requestParameters['bulkUpdateRecurringTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkUpdateRecurringTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint updates a set of transactions
     * update a transaction
     */
    async bulkUpdateRecurringTransaction(requestParameters: BulkUpdateRecurringTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkUpdateRecurringTransactionResponse> {
        const response = await this.bulkUpdateRecurringTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates a set of transactions
     * update a transaction
     */
    async bulkUpdateTransactionRaw(requestParameters: BulkUpdateTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkUpdateTransactionResponse>> {
        if (requestParameters['bulkUpdateTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'bulkUpdateTransactionRequest',
                'Required parameter "bulkUpdateTransactionRequest" was null or undefined when calling bulkUpdateTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/bulk`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUpdateTransactionRequestToJSON(requestParameters['bulkUpdateTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkUpdateTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint updates a set of transactions
     * update a transaction
     */
    async bulkUpdateTransaction(requestParameters: BulkUpdateTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkUpdateTransactionResponse> {
        const response = await this.bulkUpdateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint checks if a user has exceeded his/her copilot question quota
     * Checks if the question quota has been exceeded
     */
    async checkIfQuotaExceededRaw(requestParameters: CheckIfQuotaExceededRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckIfQuotaExceededResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling checkIfQuotaExceeded().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling checkIfQuotaExceeded().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/copilot/quota/exceeded/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckIfQuotaExceededResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint checks if a user has exceeded his/her copilot question quota
     * Checks if the question quota has been exceeded
     */
    async checkIfQuotaExceeded(requestParameters: CheckIfQuotaExceededRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckIfQuotaExceededResponse> {
        const response = await this.checkIfQuotaExceededRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint creates a bank account for a given user profile
     * create a bank account for a given user profile
     */
    async createBankAccountRaw(requestParameters: CreateBankAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateBankAccountResponse>> {
        if (requestParameters['createBankAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'createBankAccountRequest',
                'Required parameter "createBankAccountRequest" was null or undefined when calling createBankAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/bank-account/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBankAccountRequestToJSON(requestParameters['createBankAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateBankAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a bank account for a given user profile
     * create a bank account for a given user profile
     */
    async createBankAccount(requestParameters: CreateBankAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateBankAccountResponse> {
        const response = await this.createBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint creates a budget
     * create a budget
     */
    async createBudgetRaw(requestParameters: CreateBudgetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateBudgetResponse>> {
        if (requestParameters['createBudgetRequest'] == null) {
            throw new runtime.RequiredError(
                'createBudgetRequest',
                'Required parameter "createBudgetRequest" was null or undefined when calling createBudget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/budget`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBudgetRequestToJSON(requestParameters['createBudgetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateBudgetResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a budget
     * create a budget
     */
    async createBudget(requestParameters: CreateBudgetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateBudgetResponse> {
        const response = await this.createBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint creates a credit account for a given user profile
     * create a credit account for a given user profile
     */
    async createCreditAccountRaw(requestParameters: CreateCreditAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCreditAccountResponse>> {
        if (requestParameters['createCreditAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'createCreditAccountRequest',
                'Required parameter "createCreditAccountRequest" was null or undefined when calling createCreditAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/credit-account/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCreditAccountRequestToJSON(requestParameters['createCreditAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCreditAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a credit account for a given user profile
     * create a credit account for a given user profile
     */
    async createCreditAccount(requestParameters: CreateCreditAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCreditAccountResponse> {
        const response = await this.createCreditAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint creates a link
     * create link
     */
    async createLinkRaw(requestParameters: CreateLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateManualLinkResponse>> {
        if (requestParameters['createManualLinkRequest'] == null) {
            throw new runtime.RequiredError(
                'createManualLinkRequest',
                'Required parameter "createManualLinkRequest" was null or undefined when calling createLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/link`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateManualLinkRequestToJSON(requestParameters['createManualLinkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateManualLinkResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a link
     * create link
     */
    async createLink(requestParameters: CreateLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateManualLinkResponse> {
        const response = await this.createLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint creates a milestone
     * create a milestone
     */
    async createMilestoneRaw(requestParameters: CreateMilestoneOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMilestoneResponse>> {
        if (requestParameters['createMilestoneRequest'] == null) {
            throw new runtime.RequiredError(
                'createMilestoneRequest',
                'Required parameter "createMilestoneRequest" was null or undefined when calling createMilestone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/milestone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMilestoneRequestToJSON(requestParameters['createMilestoneRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMilestoneResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a milestone
     * create a milestone
     */
    async createMilestone(requestParameters: CreateMilestoneOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMilestoneResponse> {
        const response = await this.createMilestoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint creates a smart goal
     * create a smart goal
     */
    async createSmartGoalRaw(requestParameters: CreateSmartGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSmartGoalResponse>> {
        if (requestParameters['createSmartGoalRequest'] == null) {
            throw new runtime.RequiredError(
                'createSmartGoalRequest',
                'Required parameter "createSmartGoalRequest" was null or undefined when calling createSmartGoal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/smart-goal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSmartGoalRequestToJSON(requestParameters['createSmartGoalRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSmartGoalResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a smart goal
     * create a smart goal
     */
    async createSmartGoal(requestParameters: CreateSmartGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSmartGoalResponse> {
        const response = await this.createSmartGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint enabled a user to create a new subscription against stripe
     * Creates a new subscription for a given customer against stripe
     */
    async createSubscriptionRaw(requestParameters: CreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSubscriptionResponse>> {
        if (requestParameters['createSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'createSubscriptionRequest',
                'Required parameter "createSubscriptionRequest" was null or undefined when calling createSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/stripe/subscription`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubscriptionRequestToJSON(requestParameters['createSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSubscriptionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint enabled a user to create a new subscription against stripe
     * Creates a new subscription for a given customer against stripe
     */
    async createSubscription(requestParameters: CreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSubscriptionResponse> {
        const response = await this.createSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs an a creation operation of a user profile based on the provided parametersThis operation is implemented as a distributed transactions as this operation can span multiple services
     * create a user profile
     */
    async createUserProfile1Raw(requestParameters: CreateUserProfile1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserProfileResponse1>> {
        if (requestParameters['createUserProfileRequest1'] == null) {
            throw new runtime.RequiredError(
                'createUserProfileRequest1',
                'Required parameter "createUserProfileRequest1" was null or undefined when calling createUserProfile1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserProfileRequest1ToJSON(requestParameters['createUserProfileRequest1']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserProfileResponse1FromJSON(jsonValue));
    }

    /**
     * This endpoint performs an a creation operation of a user profile based on the provided parametersThis operation is implemented as a distributed transactions as this operation can span multiple services
     * create a user profile
     */
    async createUserProfile1(requestParameters: CreateUserProfile1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserProfileResponse1> {
        const response = await this.createUserProfile1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a budget
     * delete a budget
     */
    async deleteBudgetRaw(requestParameters: DeleteBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteBudgetResponse>> {
        if (requestParameters['budgetId'] == null) {
            throw new runtime.RequiredError(
                'budgetId',
                'Required parameter "budgetId" was null or undefined when calling deleteBudget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/budget/{budgetId}`.replace(`{${"budgetId"}}`, encodeURIComponent(String(requestParameters['budgetId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteBudgetResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a budget
     * delete a budget
     */
    async deleteBudget(requestParameters: DeleteBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteBudgetResponse> {
        const response = await this.deleteBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes the link if the link exists
     * delete link by id
     */
    async deleteLinkRaw(requestParameters: DeleteLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteLinkResponse>> {
        if (requestParameters['linkId'] == null) {
            throw new runtime.RequiredError(
                'linkId',
                'Required parameter "linkId" was null or undefined when calling deleteLink().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteLink().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling deleteLink().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/link/{linkId}/user/{userId}`.replace(`{${"linkId"}}`, encodeURIComponent(String(requestParameters['linkId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteLinkResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes the link if the link exists
     * delete link by id
     */
    async deleteLink(requestParameters: DeleteLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteLinkResponse> {
        const response = await this.deleteLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a milestone
     * delete a milestone
     */
    async deleteMilestoneRaw(requestParameters: DeleteMilestoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteMilestoneResponse>> {
        if (requestParameters['milestoneId'] == null) {
            throw new runtime.RequiredError(
                'milestoneId',
                'Required parameter "milestoneId" was null or undefined when calling deleteMilestone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/milestone/{milestoneId}`.replace(`{${"milestoneId"}}`, encodeURIComponent(String(requestParameters['milestoneId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteMilestoneResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a milestone
     * delete a milestone
     */
    async deleteMilestone(requestParameters: DeleteMilestoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteMilestoneResponse> {
        const response = await this.deleteMilestoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a note from a transaction
     * deletes a note from a transaction
     */
    async deleteNoteFromRecurringTransactionRaw(requestParameters: DeleteNoteFromRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteNoteFromRecurringTransactionResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling deleteNoteFromRecurringTransaction().'
            );
        }

        if (requestParameters['noteId'] == null) {
            throw new runtime.RequiredError(
                'noteId',
                'Required parameter "noteId" was null or undefined when calling deleteNoteFromRecurringTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/recurring/{transactionId}/note/{noteId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters['noteId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNoteFromRecurringTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a note from a transaction
     * deletes a note from a transaction
     */
    async deleteNoteFromRecurringTransaction(requestParameters: DeleteNoteFromRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteNoteFromRecurringTransactionResponse> {
        const response = await this.deleteNoteFromRecurringTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a note from a smart goal
     * deletes a note from a smart goal
     */
    async deleteNoteFromSmartGoalRaw(requestParameters: DeleteNoteFromSmartGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteNoteFromSmartGoalResponse>> {
        if (requestParameters['noteId'] == null) {
            throw new runtime.RequiredError(
                'noteId',
                'Required parameter "noteId" was null or undefined when calling deleteNoteFromSmartGoal().'
            );
        }

        if (requestParameters['smartGoalId'] == null) {
            throw new runtime.RequiredError(
                'smartGoalId',
                'Required parameter "smartGoalId" was null or undefined when calling deleteNoteFromSmartGoal().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['smartGoalId'] != null) {
            queryParameters['smartGoalId'] = requestParameters['smartGoalId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/smart-goal/note/{noteId}`.replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters['noteId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNoteFromSmartGoalResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a note from a smart goal
     * deletes a note from a smart goal
     */
    async deleteNoteFromSmartGoal(requestParameters: DeleteNoteFromSmartGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteNoteFromSmartGoalResponse> {
        const response = await this.deleteNoteFromSmartGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a note from a transaction
     * deletes a note from a transaction
     */
    async deleteNoteFromTransactionRaw(requestParameters: DeleteNoteFromTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteNoteFromTransactionResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling deleteNoteFromTransaction().'
            );
        }

        if (requestParameters['noteId'] == null) {
            throw new runtime.RequiredError(
                'noteId',
                'Required parameter "noteId" was null or undefined when calling deleteNoteFromTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/{transactionId}/note/{noteId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters['noteId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNoteFromTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a note from a transaction
     * deletes a note from a transaction
     */
    async deleteNoteFromTransaction(requestParameters: DeleteNoteFromTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteNoteFromTransactionResponse> {
        const response = await this.deleteNoteFromTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a pocket
     * deletes a pocket
     */
    async deletePocketRaw(requestParameters: DeletePocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePocketResponse>> {
        if (requestParameters['pocketId'] == null) {
            throw new runtime.RequiredError(
                'pocketId',
                'Required parameter "pocketId" was null or undefined when calling deletePocket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/pocket/{pocketId}`.replace(`{${"pocketId"}}`, encodeURIComponent(String(requestParameters['pocketId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePocketResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a pocket
     * deletes a pocket
     */
    async deletePocket(requestParameters: DeletePocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePocketResponse> {
        const response = await this.deletePocketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a smart goal
     * delete a smart goal
     */
    async deleteSmartGoalRaw(requestParameters: DeleteSmartGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSmartGoalResponse>> {
        if (requestParameters['smartGoalId'] == null) {
            throw new runtime.RequiredError(
                'smartGoalId',
                'Required parameter "smartGoalId" was null or undefined when calling deleteSmartGoal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/smart-goal/{smartGoalId}`.replace(`{${"smartGoalId"}}`, encodeURIComponent(String(requestParameters['smartGoalId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSmartGoalResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a smart goal
     * delete a smart goal
     */
    async deleteSmartGoal(requestParameters: DeleteSmartGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSmartGoalResponse> {
        const response = await this.deleteSmartGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a specific transaction based on the transaction id
     * deletes a transaction by id
     */
    async deleteTransactionRaw(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteRecurringTransactionResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling deleteTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/recurring/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteRecurringTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a specific transaction based on the transaction id
     * deletes a transaction by id
     */
    async deleteTransaction(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteRecurringTransactionResponse> {
        const response = await this.deleteTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a specific transaction based on the transaction id
     * deletes a transaction by id
     */
    async deleteTransaction1Raw(requestParameters: DeleteTransaction1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteTransactionResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling deleteTransaction1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a specific transaction based on the transaction id
     * deletes a transaction by id
     */
    async deleteTransaction1(requestParameters: DeleteTransaction1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteTransactionResponse> {
        const response = await this.deleteTransaction1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a delete operation on a user profile based on the provided parametersThis deletion operation spans multiple services (plaid) as user details are stored across a suite of our backend servicesThe operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the requestDivergent state is not expected to be encountered with this endpoint.
     * deletes a bank account for a given user profile
     */
    async deleteUserProfile1Raw(requestParameters: DeleteUserProfile1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteBankAccountResponse>> {
        if (requestParameters['bankAccountId'] == null) {
            throw new runtime.RequiredError(
                'bankAccountId',
                'Required parameter "bankAccountId" was null or undefined when calling deleteUserProfile1().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUserProfile1().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling deleteUserProfile1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/bank-account/{bankAccountId}`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters['bankAccountId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteBankAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs a delete operation on a user profile based on the provided parametersThis deletion operation spans multiple services (plaid) as user details are stored across a suite of our backend servicesThe operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the requestDivergent state is not expected to be encountered with this endpoint.
     * deletes a bank account for a given user profile
     */
    async deleteUserProfile1(requestParameters: DeleteUserProfile1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteBankAccountResponse> {
        const response = await this.deleteUserProfile1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a delete operation on a user profile based on the provided parameters
     * deletes a user profile
     */
    async deleteUserProfile2Raw(requestParameters: DeleteUserProfile2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUserProfileResponse1>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUserProfile2().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling deleteUserProfile2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/profile/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUserProfileResponse1FromJSON(jsonValue));
    }

    /**
     * This endpoint performs a delete operation on a user profile based on the provided parameters
     * deletes a user profile
     */
    async deleteUserProfile2(requestParameters: DeleteUserProfile2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUserProfileResponse1> {
        const response = await this.deleteUserProfile2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint exchanges a plaid link token for a plaid access token
     * exchange plaid token
     */
    async exchangePlaidTokenRaw(requestParameters: ExchangePlaidTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaidExchangeTokenResponse>> {
        if (requestParameters['plaidExchangeTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'plaidExchangeTokenRequest',
                'Required parameter "plaidExchangeTokenRequest" was null or undefined when calling exchangePlaidToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/plaid/exchange-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaidExchangeTokenRequestToJSON(requestParameters['plaidExchangeTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaidExchangeTokenResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint exchanges a plaid link token for a plaid access token
     * exchange plaid token
     */
    async exchangePlaidToken(requestParameters: ExchangePlaidTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaidExchangeTokenResponse> {
        const response = await this.exchangePlaidTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the historical balance for a given account
     * gets account balance of an account
     */
    async getAccountBalanceRaw(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetHistoricalAccountBalanceResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getAccountBalance().'
            );
        }

        if (requestParameters['plaidAccountId'] == null) {
            throw new runtime.RequiredError(
                'plaidAccountId',
                'Required parameter "plaidAccountId" was null or undefined when calling getAccountBalance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/historical-account-balance/user/{userId}/plaid-account-id/{plaidAccountId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"plaidAccountId"}}`, encodeURIComponent(String(requestParameters['plaidAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetHistoricalAccountBalanceResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the historical balance for a given account
     * gets account balance of an account
     */
    async getAccountBalance(requestParameters: GetAccountBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetHistoricalAccountBalanceResponse> {
        const response = await this.getAccountBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API could accept account_id as input parameters and return the account balance history for that account.
     * Returns the account balance history for an account
     */
    async getAccountBalanceHistoryRaw(requestParameters: GetAccountBalanceHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountBalanceHistoryResponse>> {
        if (requestParameters['plaidAccountId'] == null) {
            throw new runtime.RequiredError(
                'plaidAccountId',
                'Required parameter "plaidAccountId" was null or undefined when calling getAccountBalanceHistory().'
            );
        }

        if (requestParameters['pageNumber'] == null) {
            throw new runtime.RequiredError(
                'pageNumber',
                'Required parameter "pageNumber" was null or undefined when calling getAccountBalanceHistory().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling getAccountBalanceHistory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/balance-history/account/{plaidAccountId}/pagenumber/{pageNumber}/pagesize/{pageSize}`.replace(`{${"plaidAccountId"}}`, encodeURIComponent(String(requestParameters['plaidAccountId']))).replace(`{${"pageNumber"}}`, encodeURIComponent(String(requestParameters['pageNumber']))).replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters['pageSize']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccountBalanceHistoryResponseFromJSON(jsonValue));
    }

    /**
     * This API could accept account_id as input parameters and return the account balance history for that account.
     * Returns the account balance history for an account
     */
    async getAccountBalanceHistory(requestParameters: GetAccountBalanceHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountBalanceHistoryResponse> {
        const response = await this.getAccountBalanceHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns all budgets
     * get all budgets
     */
    async getAllBudgetsRaw(requestParameters: GetAllBudgetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllBudgetsResponse>> {
        if (requestParameters['pocketId'] == null) {
            throw new runtime.RequiredError(
                'pocketId',
                'Required parameter "pocketId" was null or undefined when calling getAllBudgets().'
            );
        }

        if (requestParameters['smartGoalId'] == null) {
            throw new runtime.RequiredError(
                'smartGoalId',
                'Required parameter "smartGoalId" was null or undefined when calling getAllBudgets().'
            );
        }

        if (requestParameters['milestoneId'] == null) {
            throw new runtime.RequiredError(
                'milestoneId',
                'Required parameter "milestoneId" was null or undefined when calling getAllBudgets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pocketId'] != null) {
            queryParameters['pocketId'] = requestParameters['pocketId'];
        }

        if (requestParameters['smartGoalId'] != null) {
            queryParameters['smartGoalId'] = requestParameters['smartGoalId'];
        }

        if (requestParameters['milestoneId'] != null) {
            queryParameters['milestoneId'] = requestParameters['milestoneId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/budget`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllBudgetsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns all budgets
     * get all budgets
     */
    async getAllBudgets(requestParameters: GetAllBudgetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllBudgetsResponse> {
        const response = await this.getAllBudgetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the bank account if the user record id and bank account id exists example: /api/v1/bank-account?user_id=xxxxxx&&bank_account_id=xxxxxxx
     * get a bank account for a given user profile
     */
    async getBankAccountRaw(requestParameters: GetBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBankAccountResponse>> {
        if (requestParameters['bankAccountId'] == null) {
            throw new runtime.RequiredError(
                'bankAccountId',
                'Required parameter "bankAccountId" was null or undefined when calling getBankAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/bank-account/{bankAccountId}`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters['bankAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBankAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the bank account if the user record id and bank account id exists example: /api/v1/bank-account?user_id=xxxxxx&&bank_account_id=xxxxxxx
     * get a bank account for a given user profile
     */
    async getBankAccount(requestParameters: GetBankAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBankAccountResponse> {
        const response = await this.getBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the budget if the budget exists
     * get budget by id
     */
    async getBudgetRaw(requestParameters: GetBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBudgetResponse>> {
        if (requestParameters['budgetId'] == null) {
            throw new runtime.RequiredError(
                'budgetId',
                'Required parameter "budgetId" was null or undefined when calling getBudget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/budget/{budgetId}`.replace(`{${"budgetId"}}`, encodeURIComponent(String(requestParameters['budgetId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBudgetResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the budget if the budget exists
     * get budget by id
     */
    async getBudget(requestParameters: GetBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBudgetResponse> {
        const response = await this.getBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets category metrics for a financial sub profile over time
     * Gets category metrics for a financial sub profile over time
     */
    async getCategoryMetricsFinancialSubProfileOverTimeRaw(requestParameters: GetCategoryMetricsFinancialSubProfileOverTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCategoryMetricsFinancialSubProfileOverTimeResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['personalFinanceCategoryPrimary'] != null) {
            queryParameters['personalFinanceCategoryPrimary'] = requestParameters['personalFinanceCategoryPrimary'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/financial-profile/category-metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCategoryMetricsFinancialSubProfileOverTimeResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets category metrics for a financial sub profile over time
     * Gets category metrics for a financial sub profile over time
     */
    async getCategoryMetricsFinancialSubProfileOverTime(requestParameters: GetCategoryMetricsFinancialSubProfileOverTimeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCategoryMetricsFinancialSubProfileOverTimeResponse> {
        const response = await this.getCategoryMetricsFinancialSubProfileOverTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get monthly transaction count by user, month, and category
     */
    async getCategoryMonthlyTransactionCountRaw(requestParameters: GetCategoryMonthlyTransactionCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCategoryMonthlyTransactionCountResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getCategoryMonthlyTransactionCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['personalFinanceCategoryPrimary'] != null) {
            queryParameters['personalFinanceCategoryPrimary'] = requestParameters['personalFinanceCategoryPrimary'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/category-monthly-transaction-count/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCategoryMonthlyTransactionCountResponseFromJSON(jsonValue));
    }

    /**
     * Get monthly transaction count by user, month, and category
     */
    async getCategoryMonthlyTransactionCount(requestParameters: GetCategoryMonthlyTransactionCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCategoryMonthlyTransactionCountResponse> {
        const response = await this.getCategoryMonthlyTransactionCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Debt-to-Income ratio by user and month
     */
    async getDebtToIncomeRatioRaw(requestParameters: GetDebtToIncomeRatioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDebtToIncomeRatioResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getDebtToIncomeRatio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/debt-to-income-ratio/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDebtToIncomeRatioResponseFromJSON(jsonValue));
    }

    /**
     * Get Debt-to-Income ratio by user and month
     */
    async getDebtToIncomeRatio(requestParameters: GetDebtToIncomeRatioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDebtToIncomeRatioResponse> {
        const response = await this.getDebtToIncomeRatioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Expense Metrics by user, month and category
     */
    async getExpenseMetricsRaw(requestParameters: GetExpenseMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetExpenseMetricsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getExpenseMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['personalFinanceCategoryPrimary'] != null) {
            queryParameters['personalFinanceCategoryPrimary'] = requestParameters['personalFinanceCategoryPrimary'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/expenses/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetExpenseMetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get Expense Metrics by user, month and category
     */
    async getExpenseMetrics(requestParameters: GetExpenseMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetExpenseMetricsResponse> {
        const response = await this.getExpenseMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets expense metrics for a financial sub profile over time
     * Gets expense metrics for a financial sub profile over time
     */
    async getExpenseMetricsFinancialSubProfileOverTimeRaw(requestParameters: GetExpenseMetricsFinancialSubProfileOverTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetExpenseMetricsFinancialSubProfileOverTimeResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/financial-profile/expense-metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetExpenseMetricsFinancialSubProfileOverTimeResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets expense metrics for a financial sub profile over time
     * Gets expense metrics for a financial sub profile over time
     */
    async getExpenseMetricsFinancialSubProfileOverTime(requestParameters: GetExpenseMetricsFinancialSubProfileOverTimeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetExpenseMetricsFinancialSubProfileOverTimeResponse> {
        const response = await this.getExpenseMetricsFinancialSubProfileOverTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Financial Profile by user and month
     */
    async getFinancialProfileRaw(requestParameters: GetFinancialProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFinancialProfileResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getFinancialProfile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/finance-profile/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFinancialProfileResponseFromJSON(jsonValue));
    }

    /**
     * Get Financial Profile by user and month
     */
    async getFinancialProfile(requestParameters: GetFinancialProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFinancialProfileResponse> {
        const response = await this.getFinancialProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the forecast if the forecast exists
     * get forecast by id
     */
    async getForecastRaw(requestParameters: GetForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetForecastResponse>> {
        if (requestParameters['smartGoalId'] == null) {
            throw new runtime.RequiredError(
                'smartGoalId',
                'Required parameter "smartGoalId" was null or undefined when calling getForecast().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/forecast/{smartGoalId}`.replace(`{${"smartGoalId"}}`, encodeURIComponent(String(requestParameters['smartGoalId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetForecastResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the forecast if the forecast exists
     * get forecast by id
     */
    async getForecast(requestParameters: GetForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetForecastResponse> {
        const response = await this.getForecastRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Income Expense Ratio by user and month
     */
    async getIncomeExpenseRatioRaw(requestParameters: GetIncomeExpenseRatioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetIncomeExpenseRatioResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getIncomeExpenseRatio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/income-expense-ratio/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIncomeExpenseRatioResponseFromJSON(jsonValue));
    }

    /**
     * Get Income Expense Ratio by user and month
     */
    async getIncomeExpenseRatio(requestParameters: GetIncomeExpenseRatioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetIncomeExpenseRatioResponse> {
        const response = await this.getIncomeExpenseRatioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Income Metrics by user, month and category
     */
    async getIncomeMetricsRaw(requestParameters: GetIncomeMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetIncomeMetricsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getIncomeMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['personalFinanceCategoryPrimary'] != null) {
            queryParameters['personalFinanceCategoryPrimary'] = requestParameters['personalFinanceCategoryPrimary'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/income/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIncomeMetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get Income Metrics by user, month and category
     */
    async getIncomeMetrics(requestParameters: GetIncomeMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetIncomeMetricsResponse> {
        const response = await this.getIncomeMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets expense metrics for a financial sub profile over time
     * Gets income metrics for a financial sub profile over time
     */
    async getIncomeMetricsFinancialSubProfileOverTimeRaw(requestParameters: GetIncomeMetricsFinancialSubProfileOverTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetIncomeMetricsFinancialSubProfileOverTimeResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/financial-profile/income-metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIncomeMetricsFinancialSubProfileOverTimeResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets expense metrics for a financial sub profile over time
     * Gets income metrics for a financial sub profile over time
     */
    async getIncomeMetricsFinancialSubProfileOverTime(requestParameters: GetIncomeMetricsFinancialSubProfileOverTimeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetIncomeMetricsFinancialSubProfileOverTimeResponse> {
        const response = await this.getIncomeMetricsFinancialSubProfileOverTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the investment account if the investment account exists
     * get investment account by id
     */
    async getInvestmentAccountRaw(requestParameters: GetInvestmentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetInvestmentAcccountResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getInvestmentAccount().'
            );
        }

        if (requestParameters['investmentAccountId'] == null) {
            throw new runtime.RequiredError(
                'investmentAccountId',
                'Required parameter "investmentAccountId" was null or undefined when calling getInvestmentAccount().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getInvestmentAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/account/{userId}/investment/{investmentAccountId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"investmentAccountId"}}`, encodeURIComponent(String(requestParameters['investmentAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInvestmentAcccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the investment account if the investment account exists
     * get investment account by id
     */
    async getInvestmentAccount(requestParameters: GetInvestmentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetInvestmentAcccountResponse> {
        const response = await this.getInvestmentAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the liability account if the liability account exists
     * get liability account by id
     */
    async getLiabilityAccountRaw(requestParameters: GetLiabilityAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLiabilityAccountResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getLiabilityAccount().'
            );
        }

        if (requestParameters['liabilityAccountId'] == null) {
            throw new runtime.RequiredError(
                'liabilityAccountId',
                'Required parameter "liabilityAccountId" was null or undefined when calling getLiabilityAccount().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getLiabilityAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/account/{userId}/liability/{liabilityAccountId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"liabilityAccountId"}}`, encodeURIComponent(String(requestParameters['liabilityAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLiabilityAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the liability account if the liability account exists
     * get liability account by id
     */
    async getLiabilityAccount(requestParameters: GetLiabilityAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLiabilityAccountResponse> {
        const response = await this.getLiabilityAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the link if the link exists
     * get link by id
     */
    async getLinkRaw(requestParameters: GetLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLinkResponse>> {
        if (requestParameters['linkId'] == null) {
            throw new runtime.RequiredError(
                'linkId',
                'Required parameter "linkId" was null or undefined when calling getLink().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getLink().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getLink().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/link/{linkId}`.replace(`{${"linkId"}}`, encodeURIComponent(String(requestParameters['linkId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLinkResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the link if the link exists
     * get link by id
     */
    async getLink(requestParameters: GetLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLinkResponse> {
        const response = await this.getLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the links
     * get links
     */
    async getLinksRaw(requestParameters: GetLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLinksResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getLinks().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getLinks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/links/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLinksResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the links
     * get links
     */
    async getLinks(requestParameters: GetLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLinksResponse> {
        const response = await this.getLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets location metrics for a financial sub profile over time
     * Gets income metrics for a financial sub profile over time
     */
    async getLocationMetricsFinancialSubProfileOverTimeRaw(requestParameters: GetLocationMetricsFinancialSubProfileOverTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLocationMetricsFinancialSubProfileOverTimeResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['locationCity'] != null) {
            queryParameters['locationCity'] = requestParameters['locationCity'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/financial-profile/location-metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLocationMetricsFinancialSubProfileOverTimeResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets location metrics for a financial sub profile over time
     * Gets income metrics for a financial sub profile over time
     */
    async getLocationMetricsFinancialSubProfileOverTime(requestParameters: GetLocationMetricsFinancialSubProfileOverTimeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLocationMetricsFinancialSubProfileOverTimeResponse> {
        const response = await this.getLocationMetricsFinancialSubProfileOverTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Melody Financial Context
     */
    async getMelodyFinancialContextRaw(requestParameters: GetMelodyFinancialContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMelodyFinancialContextResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMelodyFinancialContext().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/melody-financial-context/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMelodyFinancialContextResponseFromJSON(jsonValue));
    }

    /**
     * Get Melody Financial Context
     */
    async getMelodyFinancialContext(requestParameters: GetMelodyFinancialContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMelodyFinancialContextResponse> {
        const response = await this.getMelodyFinancialContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets merchant metrics for a financial sub profile over time
     * Gets merchant metrics for a financial sub profile over time
     */
    async getMerchantMetricsFinancialSubProfileOverTimeRaw(requestParameters: GetMerchantMetricsFinancialSubProfileOverTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMerchantMetricsFinancialSubProfileOverTimeResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['merchantName'] != null) {
            queryParameters['merchantName'] = requestParameters['merchantName'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/financial-profile/merchant-metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMerchantMetricsFinancialSubProfileOverTimeResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets merchant metrics for a financial sub profile over time
     * Gets merchant metrics for a financial sub profile over time
     */
    async getMerchantMetricsFinancialSubProfileOverTime(requestParameters: GetMerchantMetricsFinancialSubProfileOverTimeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMerchantMetricsFinancialSubProfileOverTimeResponse> {
        const response = await this.getMerchantMetricsFinancialSubProfileOverTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Merchant Monthly Expenditure by user, month and merchant name
     */
    async getMerchantMonthlyExpenditureRaw(requestParameters: GetMerchantMonthlyExpenditureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMerchantMonthlyExpenditureResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMerchantMonthlyExpenditure().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['merchantName'] != null) {
            queryParameters['merchantName'] = requestParameters['merchantName'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/merchant-monthly-expenditure/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMerchantMonthlyExpenditureResponseFromJSON(jsonValue));
    }

    /**
     * Get Merchant Monthly Expenditure by user, month and merchant name
     */
    async getMerchantMonthlyExpenditure(requestParameters: GetMerchantMonthlyExpenditureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMerchantMonthlyExpenditureResponse> {
        const response = await this.getMerchantMonthlyExpenditureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the milestone if the milestone exists
     * get milestone by id
     */
    async getMilestoneRaw(requestParameters: GetMilestoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMilestoneResponse>> {
        if (requestParameters['milestoneId'] == null) {
            throw new runtime.RequiredError(
                'milestoneId',
                'Required parameter "milestoneId" was null or undefined when calling getMilestone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/milestone/{milestoneId}`.replace(`{${"milestoneId"}}`, encodeURIComponent(String(requestParameters['milestoneId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMilestoneResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the milestone if the milestone exists
     * get milestone by id
     */
    async getMilestone(requestParameters: GetMilestoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMilestoneResponse> {
        const response = await this.getMilestoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the milestones if the smart goal exists
     * get milestones by smart goal id
     */
    async getMilestonesRaw(requestParameters: GetMilestonesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMilestonesBySmartGoalIdResponse>> {
        if (requestParameters['smartGoalId'] == null) {
            throw new runtime.RequiredError(
                'smartGoalId',
                'Required parameter "smartGoalId" was null or undefined when calling getMilestones().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/milestone/smart-goal/{smartGoalId}`.replace(`{${"smartGoalId"}}`, encodeURIComponent(String(requestParameters['smartGoalId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMilestonesBySmartGoalIdResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the milestones if the smart goal exists
     * get milestones by smart goal id
     */
    async getMilestones(requestParameters: GetMilestonesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMilestonesBySmartGoalIdResponse> {
        const response = await this.getMilestonesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Monthly Balance by user and month
     */
    async getMonthlyBalanceRaw(requestParameters: GetMonthlyBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMonthlyBalanceResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMonthlyBalance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/monthly-balance/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMonthlyBalanceResponseFromJSON(jsonValue));
    }

    /**
     * Get Monthly Balance by user and month
     */
    async getMonthlyBalance(requestParameters: GetMonthlyBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMonthlyBalanceResponse> {
        const response = await this.getMonthlyBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Monthly Expenditure by user and month
     */
    async getMonthlyExpenditureRaw(requestParameters: GetMonthlyExpenditureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMonthlyExpenditureResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMonthlyExpenditure().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/monthly-expenditure/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMonthlyExpenditureResponseFromJSON(jsonValue));
    }

    /**
     * Get Monthly Expenditure by user and month
     */
    async getMonthlyExpenditure(requestParameters: GetMonthlyExpenditureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMonthlyExpenditureResponse> {
        const response = await this.getMonthlyExpenditureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Monthly Income by user and month
     */
    async getMonthlyIncomeRaw(requestParameters: GetMonthlyIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMonthlyIncomeResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMonthlyIncome().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/monthly-income/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMonthlyIncomeResponseFromJSON(jsonValue));
    }

    /**
     * Get Monthly Income by user and month
     */
    async getMonthlyIncome(requestParameters: GetMonthlyIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMonthlyIncomeResponse> {
        const response = await this.getMonthlyIncomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Monthly Savings by user and month
     */
    async getMonthlySavingsRaw(requestParameters: GetMonthlySavingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMonthlySavingsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMonthlySavings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/monthly-savings/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMonthlySavingsResponseFromJSON(jsonValue));
    }

    /**
     * Get Monthly Savings by user and month
     */
    async getMonthlySavings(requestParameters: GetMonthlySavingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMonthlySavingsResponse> {
        const response = await this.getMonthlySavingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Monthly Total Quantity of Security by user, month and security
     */
    async getMonthlyTotalQuantityBySecurityAndUserRaw(requestParameters: GetMonthlyTotalQuantityBySecurityAndUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMonthlyTotalQuantityBySecurityAndUserResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMonthlyTotalQuantityBySecurityAndUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['securityId'] != null) {
            queryParameters['securityId'] = requestParameters['securityId'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/monthly-total-quantity-by-security-and-user/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMonthlyTotalQuantityBySecurityAndUserResponseFromJSON(jsonValue));
    }

    /**
     * Get Monthly Total Quantity of Security by user, month and security
     */
    async getMonthlyTotalQuantityBySecurityAndUser(requestParameters: GetMonthlyTotalQuantityBySecurityAndUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMonthlyTotalQuantityBySecurityAndUserResponse> {
        const response = await this.getMonthlyTotalQuantityBySecurityAndUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Monthly Transaction Count by user and month
     */
    async getMonthlyTransactionCountRaw(requestParameters: GetMonthlyTransactionCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMonthlyTransactionCountResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMonthlyTransactionCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/monthly-transaction-count/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMonthlyTransactionCountResponseFromJSON(jsonValue));
    }

    /**
     * Get Monthly Transaction Count by user and month
     */
    async getMonthlyTransactionCount(requestParameters: GetMonthlyTransactionCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMonthlyTransactionCountResponse> {
        const response = await this.getMonthlyTransactionCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the mortgage account if the mortgage account exists
     * get mortgage account by id
     */
    async getMortageAccountRaw(requestParameters: GetMortageAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMortgageAccountResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getMortageAccount().'
            );
        }

        if (requestParameters['mortgageAccountId'] == null) {
            throw new runtime.RequiredError(
                'mortgageAccountId',
                'Required parameter "mortgageAccountId" was null or undefined when calling getMortageAccount().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getMortageAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/account/{userId}/mortgage/{mortgageAccountId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"mortgageAccountId"}}`, encodeURIComponent(String(requestParameters['mortgageAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMortgageAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the mortgage account if the mortgage account exists
     * get mortgage account by id
     */
    async getMortageAccount(requestParameters: GetMortageAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMortgageAccountResponse> {
        const response = await this.getMortageAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets a note from a smart goal
     * gets a note from a smart goal
     */
    async getNoteFromSmartGoalRaw(requestParameters: GetNoteFromSmartGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNoteFromSmartGoalResponse>> {
        if (requestParameters['noteId'] == null) {
            throw new runtime.RequiredError(
                'noteId',
                'Required parameter "noteId" was null or undefined when calling getNoteFromSmartGoal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/smart-goal/note/{noteId}`.replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters['noteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNoteFromSmartGoalResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets a note from a smart goal
     * gets a note from a smart goal
     */
    async getNoteFromSmartGoal(requestParameters: GetNoteFromSmartGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNoteFromSmartGoalResponse> {
        const response = await this.getNoteFromSmartGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets a note from a transaction
     * gets a note from a transaction
     */
    async getNoteFromTransactionRaw(requestParameters: GetNoteFromTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNoteFromTransactionResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling getNoteFromTransaction().'
            );
        }

        if (requestParameters['noteId'] == null) {
            throw new runtime.RequiredError(
                'noteId',
                'Required parameter "noteId" was null or undefined when calling getNoteFromTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/{transactionId}/note/{noteId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters['noteId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNoteFromTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets a note from a transaction
     * gets a note from a transaction
     */
    async getNoteFromTransaction(requestParameters: GetNoteFromTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNoteFromTransactionResponse> {
        const response = await this.getNoteFromTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets notes from a business account
     * Gets notes from a business account
     */
    async getNotesFromFinancialUserProfileRaw(requestParameters: GetNotesFromFinancialUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNotesFromFinancialUserProfileResponse>> {
        if (requestParameters['businessAccountUserId'] == null) {
            throw new runtime.RequiredError(
                'businessAccountUserId',
                'Required parameter "businessAccountUserId" was null or undefined when calling getNotesFromFinancialUserProfile().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getNotesFromFinancialUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/financial-profile/business/{businessAccountUserId}/{profileType}/note`.replace(`{${"businessAccountUserId"}}`, encodeURIComponent(String(requestParameters['businessAccountUserId']))).replace(`{${"profileType"}}`, encodeURIComponent(String(requestParameters['profileType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNotesFromFinancialUserProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets notes from a business account
     * Gets notes from a business account
     */
    async getNotesFromFinancialUserProfile(requestParameters: GetNotesFromFinancialUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNotesFromFinancialUserProfileResponse> {
        const response = await this.getNotesFromFinancialUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets notes from a smart goal
     * gets notes from a smart goal
     */
    async getNotesFromSmartGoalRaw(requestParameters: GetNotesFromSmartGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNotesFromSmartGoalResponse>> {
        if (requestParameters['smartGoalId'] == null) {
            throw new runtime.RequiredError(
                'smartGoalId',
                'Required parameter "smartGoalId" was null or undefined when calling getNotesFromSmartGoal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/smart-goal/{smartGoalId}/note`.replace(`{${"smartGoalId"}}`, encodeURIComponent(String(requestParameters['smartGoalId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNotesFromSmartGoalResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets notes from a smart goal
     * gets notes from a smart goal
     */
    async getNotesFromSmartGoal(requestParameters: GetNotesFromSmartGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNotesFromSmartGoalResponse> {
        const response = await this.getNotesFromSmartGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets payment metrics for a financial sub profile over time
     * Gets payment metrics for a financial sub profile over time
     */
    async getPaymentChannelFinancialSubProfileOverTimeRaw(requestParameters: GetPaymentChannelFinancialSubProfileOverTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPaymentChannelFinancialSubProfileOverTimeResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['paymentChannel'] != null) {
            queryParameters['paymentChannel'] = requestParameters['paymentChannel'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/financial-profile/payment-channel-metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPaymentChannelFinancialSubProfileOverTimeResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets payment metrics for a financial sub profile over time
     * Gets payment metrics for a financial sub profile over time
     */
    async getPaymentChannelFinancialSubProfileOverTime(requestParameters: GetPaymentChannelFinancialSubProfileOverTimeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPaymentChannelFinancialSubProfileOverTimeResponse> {
        const response = await this.getPaymentChannelFinancialSubProfileOverTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Payment Channel Monthly Expenditure by user, month, and payment channel
     */
    async getPaymentChannelMonthlyExpenditureRaw(requestParameters: GetPaymentChannelMonthlyExpenditureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPaymentChannelMonthlyExpenditureResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getPaymentChannelMonthlyExpenditure().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['paymentChannel'] != null) {
            queryParameters['paymentChannel'] = requestParameters['paymentChannel'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/payment-channel-expenditure/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPaymentChannelMonthlyExpenditureResponseFromJSON(jsonValue));
    }

    /**
     * Get Payment Channel Monthly Expenditure by user, month, and payment channel
     */
    async getPaymentChannelMonthlyExpenditure(requestParameters: GetPaymentChannelMonthlyExpenditureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPaymentChannelMonthlyExpenditureResponse> {
        const response = await this.getPaymentChannelMonthlyExpenditureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the pocket if the pocket exists example: /api/v1/pocket/xxxxxxx
     * get a pocket
     */
    async getPocketRaw(requestParameters: GetPocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPocketResponse>> {
        if (requestParameters['pocketId'] == null) {
            throw new runtime.RequiredError(
                'pocketId',
                'Required parameter "pocketId" was null or undefined when calling getPocket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/pocket/{pocketId}`.replace(`{${"pocketId"}}`, encodeURIComponent(String(requestParameters['pocketId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPocketResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the pocket if the pocket exists example: /api/v1/pocket/xxxxxxx
     * get a pocket
     */
    async getPocket(requestParameters: GetPocketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPocketResponse> {
        const response = await this.getPocketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets a specific transaction based on the transaction id
     * lists a set of transactions against a given account of interest
     */
    async getRecurringTransactionRaw(requestParameters: GetRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSingleRecurringTransactionResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling getRecurringTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/recurring/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSingleRecurringTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets a specific transaction based on the transaction id
     * lists a set of transactions against a given account of interest
     */
    async getRecurringTransaction(requestParameters: GetRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSingleRecurringTransactionResponse> {
        const response = await this.getRecurringTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the recurring transactions for a given user id
     * get recurring transactions
     */
    async getRecurringTransactionsForUserRaw(requestParameters: GetRecurringTransactionsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRecurringTransactionsForUserResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getRecurringTransactionsForUser().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getRecurringTransactionsForUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/recurring-transactions/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRecurringTransactionsForUserResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the recurring transactions for a given user id
     * get recurring transactions
     */
    async getRecurringTransactionsForUser(requestParameters: GetRecurringTransactionsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRecurringTransactionsForUserResponse> {
        const response = await this.getRecurringTransactionsForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the smart goals if the pocket exists
     * get smart goals by pocket id
     */
    async getSmartGoalsByPocketIdRaw(requestParameters: GetSmartGoalsByPocketIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSmartGoalsByPocketIdResponse>> {
        if (requestParameters['pocketId'] == null) {
            throw new runtime.RequiredError(
                'pocketId',
                'Required parameter "pocketId" was null or undefined when calling getSmartGoalsByPocketId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/smart-goal/pocket/{pocketId}`.replace(`{${"pocketId"}}`, encodeURIComponent(String(requestParameters['pocketId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSmartGoalsByPocketIdResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the smart goals if the pocket exists
     * get smart goals by pocket id
     */
    async getSmartGoalsByPocketId(requestParameters: GetSmartGoalsByPocketIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSmartGoalsByPocketIdResponse> {
        const response = await this.getSmartGoalsByPocketIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets a split transaction that was split previously into multiple transactions
     * gets a split transaction
     */
    async getSplitTransactionRaw(requestParameters: GetSplitTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSplitTransactionResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling getSplitTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/{transactionId}/split`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSplitTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets a split transaction that was split previously into multiple transactions
     * gets a split transaction
     */
    async getSplitTransaction(requestParameters: GetSplitTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSplitTransactionResponse> {
        const response = await this.getSplitTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the student loan account if the student loan account exists
     * get student loan account by id
     */
    async getStudentLoanAccountRaw(requestParameters: GetStudentLoanAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStudentLoanAccountResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getStudentLoanAccount().'
            );
        }

        if (requestParameters['studentLoanAccountId'] == null) {
            throw new runtime.RequiredError(
                'studentLoanAccountId',
                'Required parameter "studentLoanAccountId" was null or undefined when calling getStudentLoanAccount().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getStudentLoanAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/account/{userId}/student-loan/{studentLoanAccountId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"studentLoanAccountId"}}`, encodeURIComponent(String(requestParameters['studentLoanAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStudentLoanAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the student loan account if the student loan account exists
     * get student loan account by id
     */
    async getStudentLoanAccount(requestParameters: GetStudentLoanAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStudentLoanAccountResponse> {
        const response = await this.getStudentLoanAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Total Investment by user and security
     */
    async getTotalInvestmentBySecurityRaw(requestParameters: GetTotalInvestmentBySecurityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTotalInvestmentBySecurityResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getTotalInvestmentBySecurity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['securityId'] != null) {
            queryParameters['securityId'] = requestParameters['securityId'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/total-investment/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTotalInvestmentBySecurityResponseFromJSON(jsonValue));
    }

    /**
     * Get Total Investment by user and security
     */
    async getTotalInvestmentBySecurity(requestParameters: GetTotalInvestmentBySecurityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTotalInvestmentBySecurityResponse> {
        const response = await this.getTotalInvestmentBySecurityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets a specific transaction based on the transaction id
     * lists a set of transactions against a given account of interest
     */
    async getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling getTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets a specific transaction based on the transaction id
     * lists a set of transactions against a given account of interest
     */
    async getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionResponse> {
        const response = await this.getTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the transactions for a given user id and a business account id
     * get transactions tied to a bank account and account id
     */
    async getTransactionsRaw(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionsForBankAccountResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getTransactions().'
            );
        }

        if (requestParameters['plaidAccountId'] == null) {
            throw new runtime.RequiredError(
                'plaidAccountId',
                'Required parameter "plaidAccountId" was null or undefined when calling getTransactions().'
            );
        }

        if (requestParameters['pageNumber'] == null) {
            throw new runtime.RequiredError(
                'pageNumber',
                'Required parameter "pageNumber" was null or undefined when calling getTransactions().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling getTransactions().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getTransactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/user/{userId}/plaid-account-id/{plaidAccountId}/pageNumber/{pageNumber}/pageSize/{pageSize}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"plaidAccountId"}}`, encodeURIComponent(String(requestParameters['plaidAccountId']))).replace(`{${"pageNumber"}}`, encodeURIComponent(String(requestParameters['pageNumber']))).replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters['pageSize']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionsForBankAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the transactions for a given user id and a business account id
     * get transactions tied to a bank account and account id
     */
    async getTransactions(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionsForBankAccountResponse> {
        const response = await this.getTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the transactions for a given user id
     * get transactions
     */
    async getTransactions1Raw(requestParameters: GetTransactions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getTransactions1().'
            );
        }

        if (requestParameters['pageNumber'] == null) {
            throw new runtime.RequiredError(
                'pageNumber',
                'Required parameter "pageNumber" was null or undefined when calling getTransactions1().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling getTransactions1().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getTransactions1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/{userId}/pageNumber/{pageNumber}/pageSize/{pageSize}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"pageNumber"}}`, encodeURIComponent(String(requestParameters['pageNumber']))).replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters['pageSize']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the transactions for a given user id
     * get transactions
     */
    async getTransactions1(requestParameters: GetTransactions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionsResponse> {
        const response = await this.getTransactions1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the transactions for a given user id and time example: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions?start_time={start_time}&end_time={end_time}
     * get transactions by time
     */
    async getTransactionsByTimeRaw(requestParameters: GetTransactionsByTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionsBetweenTimeRangesResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getTransactionsByTime().'
            );
        }

        if (requestParameters['plaidAccountId'] == null) {
            throw new runtime.RequiredError(
                'plaidAccountId',
                'Required parameter "plaidAccountId" was null or undefined when calling getTransactionsByTime().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getTransactionsByTime().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['financialAccountType'] != null) {
            queryParameters['financialAccountType'] = requestParameters['financialAccountType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/users/{userId}/accounts/{plaidAccountId}/transactions/range`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"plaidAccountId"}}`, encodeURIComponent(String(requestParameters['plaidAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionsBetweenTimeRangesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the transactions for a given user id and time example: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions?start_time={start_time}&end_time={end_time}
     * get transactions by time
     */
    async getTransactionsByTime(requestParameters: GetTransactionsByTimeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionsBetweenTimeRangesResponse> {
        const response = await this.getTransactionsByTimeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the transactions for a given user id over the past month example: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions/month
     * Get transactions for the past month
     */
    async getTransactionsForPastMonthRaw(requestParameters: GetTransactionsForPastMonthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionsForPastMonthResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getTransactionsForPastMonth().'
            );
        }

        if (requestParameters['plaidAccountId'] == null) {
            throw new runtime.RequiredError(
                'plaidAccountId',
                'Required parameter "plaidAccountId" was null or undefined when calling getTransactionsForPastMonth().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getTransactionsForPastMonth().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['financialAccountType'] != null) {
            queryParameters['financialAccountType'] = requestParameters['financialAccountType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/users/{userId}/accounts/{plaidAccountId}/transactions/month`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"plaidAccountId"}}`, encodeURIComponent(String(requestParameters['plaidAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionsForPastMonthResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the transactions for a given user id over the past month example: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions/month
     * Get transactions for the past month
     */
    async getTransactionsForPastMonth(requestParameters: GetTransactionsForPastMonthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionsForPastMonthResponse> {
        const response = await this.getTransactionsForPastMonthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the transactions for a given user id and time example: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions/week
     * get transactions for the past week
     */
    async getTransactionsForPastWeekRaw(requestParameters: GetTransactionsForPastWeekRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionsForPastWeekResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getTransactionsForPastWeek().'
            );
        }

        if (requestParameters['plaidAccountId'] == null) {
            throw new runtime.RequiredError(
                'plaidAccountId',
                'Required parameter "plaidAccountId" was null or undefined when calling getTransactionsForPastWeek().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getTransactionsForPastWeek().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['financialAccountType'] != null) {
            queryParameters['financialAccountType'] = requestParameters['financialAccountType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/users/{userId}/accounts/{plaidAccountId}/transactions/week`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"plaidAccountId"}}`, encodeURIComponent(String(requestParameters['plaidAccountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionsForPastWeekResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the transactions for a given user id and time example: /api/v1/users/{user_id}/accounts/{plaid_account_id}/transactions/week
     * get transactions for the past week
     */
    async getTransactionsForPastWeek(requestParameters: GetTransactionsForPastWeekRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionsForPastWeekResponse> {
        const response = await this.getTransactionsForPastWeekRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API could accept user_id as input parameters and return the account balance history for that user.
     * Returns the account balance history for a user
     */
    async getUserAccountBalanceHistoryRaw(requestParameters: GetUserAccountBalanceHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserAccountBalanceHistoryResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserAccountBalanceHistory().'
            );
        }

        if (requestParameters['pageNumber'] == null) {
            throw new runtime.RequiredError(
                'pageNumber',
                'Required parameter "pageNumber" was null or undefined when calling getUserAccountBalanceHistory().'
            );
        }

        if (requestParameters['pageSize'] == null) {
            throw new runtime.RequiredError(
                'pageSize',
                'Required parameter "pageSize" was null or undefined when calling getUserAccountBalanceHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/balance-history/user/{userId}/pagenumber/{pageNumber}/pagesize/{pageSize}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"pageNumber"}}`, encodeURIComponent(String(requestParameters['pageNumber']))).replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters['pageSize']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserAccountBalanceHistoryResponseFromJSON(jsonValue));
    }

    /**
     * This API could accept user_id as input parameters and return the account balance history for that user.
     * Returns the account balance history for a user
     */
    async getUserAccountBalanceHistory(requestParameters: GetUserAccountBalanceHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserAccountBalanceHistoryResponse> {
        const response = await this.getUserAccountBalanceHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API could accept user_id as an input parameter and return the monthly category expenditure for that user.
     * Returns the monthly category expenditure for a user
     */
    async getUserCategoryMonthlyExpenditureRaw(requestParameters: GetUserCategoryMonthlyExpenditureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserCategoryMonthlyExpenditureResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserCategoryMonthlyExpenditure().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['personalFinanceCategoryPrimary'] != null) {
            queryParameters['personalFinanceCategoryPrimary'] = requestParameters['personalFinanceCategoryPrimary'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/category-monthly-expenditure/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserCategoryMonthlyExpenditureResponseFromJSON(jsonValue));
    }

    /**
     * This API could accept user_id as an input parameter and return the monthly category expenditure for that user.
     * Returns the monthly category expenditure for a user
     */
    async getUserCategoryMonthlyExpenditure(requestParameters: GetUserCategoryMonthlyExpenditureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserCategoryMonthlyExpenditureResponse> {
        const response = await this.getUserCategoryMonthlyExpenditureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get monthly income by user for a specific category
     */
    async getUserCategoryMonthlyIncomeRaw(requestParameters: GetUserCategoryMonthlyIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserCategoryMonthlyIncomeResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserCategoryMonthlyIncome().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['personalFinanceCategoryPrimary'] != null) {
            queryParameters['personalFinanceCategoryPrimary'] = requestParameters['personalFinanceCategoryPrimary'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/category-monthly-income/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserCategoryMonthlyIncomeResponseFromJSON(jsonValue));
    }

    /**
     * Get monthly income by user for a specific category
     */
    async getUserCategoryMonthlyIncome(requestParameters: GetUserCategoryMonthlyIncomeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserCategoryMonthlyIncomeResponse> {
        const response = await this.getUserCategoryMonthlyIncomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Queries and obtains a user profile based on the provided parameters
     * Gets a user profile
     */
    async getUserProfile1Raw(requestParameters: GetUserProfile1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserProfileResponse1>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserProfile1().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling getUserProfile1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['bypassCache'] != null) {
            queryParameters['bypassCache'] = requestParameters['bypassCache'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/profile/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserProfileResponse1FromJSON(jsonValue));
    }

    /**
     * Queries and obtains a user profile based on the provided parameters
     * Gets a user profile
     */
    async getUserProfile1(requestParameters: GetUserProfile1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserProfileResponse1> {
        const response = await this.getUserProfile1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a healc check on the service
     * health check
     */
    async healthCheck2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs a healc check on the service
     * health check
     */
    async healthCheck2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckResponse> {
        const response = await this.healthCheck2Raw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint initiates a plaid link token creation
     * initiate plaid setup
     */
    async initiatePlaidSetupRaw(requestParameters: InitiatePlaidSetupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaidInitiateTokenExchangeResponse>> {
        if (requestParameters['plaidInitiateTokenExchangeRequest'] == null) {
            throw new runtime.RequiredError(
                'plaidInitiateTokenExchangeRequest',
                'Required parameter "plaidInitiateTokenExchangeRequest" was null or undefined when calling initiatePlaidSetup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/plaid/initiate-token-exchange`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaidInitiateTokenExchangeRequestToJSON(requestParameters['plaidInitiateTokenExchangeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaidInitiateTokenExchangeResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint initiates a plaid link token creation
     * initiate plaid setup
     */
    async initiatePlaidSetup(requestParameters: InitiatePlaidSetupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaidInitiateTokenExchangeResponse> {
        const response = await this.initiatePlaidSetupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint initiates a plaid link token update
     * initiate plaid link token update
     */
    async initiatePlaidTokenUpdateRaw(requestParameters: InitiatePlaidTokenUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaidInitiateTokenUpdateResponse>> {
        if (requestParameters['plaidInitiateTokenUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'plaidInitiateTokenUpdateRequest',
                'Required parameter "plaidInitiateTokenUpdateRequest" was null or undefined when calling initiatePlaidTokenUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/plaid/initiate-token-update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaidInitiateTokenUpdateRequestToJSON(requestParameters['plaidInitiateTokenUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaidInitiateTokenUpdateResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint initiates a plaid link token update
     * initiate plaid link token update
     */
    async initiatePlaidTokenUpdate(requestParameters: InitiatePlaidTokenUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaidInitiateTokenUpdateResponse> {
        const response = await this.initiatePlaidTokenUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint lists notes from a transaction
     * lists notes from a transaction
     */
    async listRecurringTransactionNotesRaw(requestParameters: ListRecurringTransactionNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListRecurringTransactionNotesResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling listRecurringTransactionNotes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/recurring/{transactionId}/notes`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRecurringTransactionNotesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint lists notes from a transaction
     * lists notes from a transaction
     */
    async listRecurringTransactionNotes(requestParameters: ListRecurringTransactionNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListRecurringTransactionNotesResponse> {
        const response = await this.listRecurringTransactionNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets a list of transactions against a given account of interest
     * lists a set of transactions against a given account of interest
     */
    async listRecurringTransactionsForUserAndAccountRaw(requestParameters: ListRecurringTransactionsForUserAndAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListRecurringTransactionsForUserAndAccountResponse>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling listRecurringTransactionsForUserAndAccount().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling listRecurringTransactionsForUserAndAccount().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling listRecurringTransactionsForUserAndAccount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['accountId'] = requestParameters['accountId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['financialAccountType'] != null) {
            queryParameters['financialAccountType'] = requestParameters['financialAccountType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/recurrings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRecurringTransactionsForUserAndAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets a list of transactions against a given account of interest
     * lists a set of transactions against a given account of interest
     */
    async listRecurringTransactionsForUserAndAccount(requestParameters: ListRecurringTransactionsForUserAndAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListRecurringTransactionsForUserAndAccountResponse> {
        const response = await this.listRecurringTransactionsForUserAndAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint lists notes from a transaction
     * lists notes from a transaction
     */
    async listTransactionNotesRaw(requestParameters: ListTransactionNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTransactionNotesResponse>> {
        if (requestParameters['transactionId'] == null) {
            throw new runtime.RequiredError(
                'transactionId',
                'Required parameter "transactionId" was null or undefined when calling listTransactionNotes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/{transactionId}/notes`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters['transactionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTransactionNotesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint lists notes from a transaction
     * lists notes from a transaction
     */
    async listTransactionNotes(requestParameters: ListTransactionNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTransactionNotesResponse> {
        const response = await this.listTransactionNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets a list of transactions against a given account of interest
     * lists a set of transactions against a given account of interest
     */
    async listTransactionsRaw(requestParameters: ListTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTransactionsResponse>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling listTransactions().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling listTransactions().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling listTransactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['accountId'] = requestParameters['accountId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        if (requestParameters['financialAccountType'] != null) {
            queryParameters['financialAccountType'] = requestParameters['financialAccountType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTransactionsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets a list of transactions against a given account of interest
     * lists a set of transactions against a given account of interest
     */
    async listTransactions(requestParameters: ListTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTransactionsResponse> {
        const response = await this.listTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint gets a list of transactions across all connected accounts
     * lists a set of transactions across all connected accounts
     */
    async listTransactions1Raw(requestParameters: ListTransactions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTransactionsAcrossAllAccountsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling listTransactions1().'
            );
        }

        if (requestParameters['profileType'] == null) {
            throw new runtime.RequiredError(
                'profileType',
                'Required parameter "profileType" was null or undefined when calling listTransactions1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/all_accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTransactionsAcrossAllAccountsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint gets a list of transactions across all connected accounts
     * lists a set of transactions across all connected accounts
     */
    async listTransactions1(requestParameters: ListTransactions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTransactionsAcrossAllAccountsResponse> {
        const response = await this.listTransactions1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint polls the status of an async task
     * polls the status of an async task
     */
    async pollAsyncTaskExecutionStatusRaw(requestParameters: PollAsyncTaskExecutionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollAsyncTaskExecutionStatusResponse>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling pollAsyncTaskExecutionStatus().'
            );
        }

        if (requestParameters['runId'] == null) {
            throw new runtime.RequiredError(
                'runId',
                'Required parameter "runId" was null or undefined when calling pollAsyncTaskExecutionStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/async-task/{workflowId}/run/{runId}`.replace(`{${"workflowId"}}`, encodeURIComponent(String(requestParameters['workflowId']))).replace(`{${"runId"}}`, encodeURIComponent(String(requestParameters['runId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PollAsyncTaskExecutionStatusResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint polls the status of an async task
     * polls the status of an async task
     */
    async pollAsyncTaskExecutionStatus(requestParameters: PollAsyncTaskExecutionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollAsyncTaskExecutionStatusResponse> {
        const response = await this.pollAsyncTaskExecutionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a readiness check on the service
     * readyness check
     */
    async readynessCheck2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadynessCheckResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadynessCheckResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs a readiness check on the service
     * readyness check
     */
    async readynessCheck2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadynessCheckResponse> {
        const response = await this.readynessCheck2Raw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint searches transactions based on a search query and returns a list of transactions that match the search query
     * searches transactions
     */
    async searchTransactionsRaw(requestParameters: SearchTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTransactionsResponse>> {
        if (requestParameters['searchTransactionsRequest'] == null) {
            throw new runtime.RequiredError(
                'searchTransactionsRequest',
                'Required parameter "searchTransactionsRequest" was null or undefined when calling searchTransactions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchTransactionsRequestToJSON(requestParameters['searchTransactionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTransactionsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint searches transactions based on a search query and returns a list of transactions that match the search query
     * searches transactions
     */
    async searchTransactions(requestParameters: SearchTransactionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTransactionsResponse> {
        const response = await this.searchTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint splits a transaction into multiple transactions
     * splits a transaction
     */
    async splitTransactionRaw(requestParameters: SplitTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SplitTransactionResponse>> {
        if (requestParameters['splitTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'splitTransactionRequest',
                'Required parameter "splitTransactionRequest" was null or undefined when calling splitTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/split`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SplitTransactionRequestToJSON(requestParameters['splitTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SplitTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint splits a transaction into multiple transactions
     * splits a transaction
     */
    async splitTransaction(requestParameters: SplitTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SplitTransactionResponse> {
        const response = await this.splitTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API could accept user_id and month as input parameters and return the aggregated transactions for that user and month.
     * Returns the aggregated transactions for a user and month
     */
    async transactionAggregatesRaw(requestParameters: TransactionAggregatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTransactionAggregatesResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling transactionAggregates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['personalFinanceCategoryPrimary'] != null) {
            queryParameters['personalFinanceCategoryPrimary'] = requestParameters['personalFinanceCategoryPrimary'];
        }

        if (requestParameters['locationCity'] != null) {
            queryParameters['locationCity'] = requestParameters['locationCity'];
        }

        if (requestParameters['paymentChannel'] != null) {
            queryParameters['paymentChannel'] = requestParameters['paymentChannel'];
        }

        if (requestParameters['merchantName'] != null) {
            queryParameters['merchantName'] = requestParameters['merchantName'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['profileType'] != null) {
            queryParameters['profileType'] = requestParameters['profileType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/financial-microservice/api/v1/analytics/transaction-aggregates/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTransactionAggregatesResponseFromJSON(jsonValue));
    }

    /**
     * This API could accept user_id and month as input parameters and return the aggregated transactions for that user and month.
     * Returns the aggregated transactions for a user and month
     */
    async transactionAggregates(requestParameters: TransactionAggregatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTransactionAggregatesResponse> {
        const response = await this.transactionAggregatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint triggers a sync
     * Triggers a sync
     */
    async triggerSyncRaw(requestParameters: TriggerSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TriggerSyncResponse>> {
        if (requestParameters['triggerSyncRequest'] == null) {
            throw new runtime.RequiredError(
                'triggerSyncRequest',
                'Required parameter "triggerSyncRequest" was null or undefined when calling triggerSync().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/sync/trigger`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TriggerSyncRequestToJSON(requestParameters['triggerSyncRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TriggerSyncResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint triggers a sync
     * Triggers a sync
     */
    async triggerSync(requestParameters: TriggerSyncOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TriggerSyncResponse> {
        const response = await this.triggerSyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint unsplit a transaction that was split previously into multiple transactions
     * unsplit a transaction
     */
    async unsplitTransactionsRaw(requestParameters: UnsplitTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnSplitTransactionsResponse>> {
        if (requestParameters['unSplitTransactionsRequest'] == null) {
            throw new runtime.RequiredError(
                'unSplitTransactionsRequest',
                'Required parameter "unSplitTransactionsRequest" was null or undefined when calling unsplitTransactions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/unsplit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnSplitTransactionsRequestToJSON(requestParameters['unSplitTransactionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnSplitTransactionsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint unsplit a transaction that was split previously into multiple transactions
     * unsplit a transaction
     */
    async unsplitTransactions(requestParameters: UnsplitTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnSplitTransactionsResponse> {
        const response = await this.unsplitTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates a bank account if the user record id and bank account id exists
     * update a bank account for a given user profile
     */
    async updateBankAccountRaw(requestParameters: UpdateBankAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateBankAccountResponse>> {
        if (requestParameters['updateBankAccountRequest'] == null) {
            throw new runtime.RequiredError(
                'updateBankAccountRequest',
                'Required parameter "updateBankAccountRequest" was null or undefined when calling updateBankAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/bank-account`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBankAccountRequestToJSON(requestParameters['updateBankAccountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateBankAccountResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint updates a bank account if the user record id and bank account id exists
     * update a bank account for a given user profile
     */
    async updateBankAccount(requestParameters: UpdateBankAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateBankAccountResponse> {
        const response = await this.updateBankAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint Updates a note to a transaction
     * Updates a note to a transaction
     */
    async updateNoteToRecurringTransactionRaw(requestParameters: UpdateNoteToRecurringTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateNoteToRecurringTransactionResponse>> {
        if (requestParameters['updateNoteToRecurringTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateNoteToRecurringTransactionRequest',
                'Required parameter "updateNoteToRecurringTransactionRequest" was null or undefined when calling updateNoteToRecurringTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/recurring/note`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNoteToRecurringTransactionRequestToJSON(requestParameters['updateNoteToRecurringTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNoteToRecurringTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint Updates a note to a transaction
     * Updates a note to a transaction
     */
    async updateNoteToRecurringTransaction(requestParameters: UpdateNoteToRecurringTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateNoteToRecurringTransactionResponse> {
        const response = await this.updateNoteToRecurringTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates a note to a smart goal
     * updates a note to a smart goal
     */
    async updateNoteToSmartGoalRaw(requestParameters: UpdateNoteToSmartGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateNoteToSmartGoalResponse>> {
        if (requestParameters['updateNoteToSmartGoalRequest'] == null) {
            throw new runtime.RequiredError(
                'updateNoteToSmartGoalRequest',
                'Required parameter "updateNoteToSmartGoalRequest" was null or undefined when calling updateNoteToSmartGoal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/smart-goal/note`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNoteToSmartGoalRequestToJSON(requestParameters['updateNoteToSmartGoalRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNoteToSmartGoalResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint updates a note to a smart goal
     * updates a note to a smart goal
     */
    async updateNoteToSmartGoal(requestParameters: UpdateNoteToSmartGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateNoteToSmartGoalResponse> {
        const response = await this.updateNoteToSmartGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint Updates a note to a transaction
     * Updates a note to a transaction
     */
    async updateNoteToTransactionRaw(requestParameters: UpdateNoteToTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateNoteToTransactionResponse>> {
        if (requestParameters['updateNoteToTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateNoteToTransactionRequest',
                'Required parameter "updateNoteToTransactionRequest" was null or undefined when calling updateNoteToTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/transaction/note`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNoteToTransactionRequestToJSON(requestParameters['updateNoteToTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNoteToTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint Updates a note to a transaction
     * Updates a note to a transaction
     */
    async updateNoteToTransaction(requestParameters: UpdateNoteToTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateNoteToTransactionResponse> {
        const response = await this.updateNoteToTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates a pocket
     * updates a pocket
     */
    async updatePocketRaw(requestParameters: UpdatePocketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePocketResponse>> {
        if (requestParameters['updatePocketRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePocketRequest',
                'Required parameter "updatePocketRequest" was null or undefined when calling updatePocket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/pocket`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePocketRequestToJSON(requestParameters['updatePocketRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatePocketResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint updates a pocket
     * updates a pocket
     */
    async updatePocket(requestParameters: UpdatePocketOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePocketResponse> {
        const response = await this.updatePocketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates a transaction
     * update a transaction
     */
    async updateSingleTransactionRaw(requestParameters: UpdateSingleTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateSingleTransactionResponse>> {
        if (requestParameters['updateSingleTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateSingleTransactionRequest',
                'Required parameter "updateSingleTransactionRequest" was null or undefined when calling updateSingleTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/single-transaction`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSingleTransactionRequestToJSON(requestParameters['updateSingleTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateSingleTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint updates a transaction
     * update a transaction
     */
    async updateSingleTransaction(requestParameters: UpdateSingleTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateSingleTransactionResponse> {
        const response = await this.updateSingleTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates a smart goal
     * update a smart goal
     */
    async updateSmartGoalRaw(requestParameters: UpdateSmartGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateSmartGoalResponse>> {
        if (requestParameters['updateSmartGoalRequest'] == null) {
            throw new runtime.RequiredError(
                'updateSmartGoalRequest',
                'Required parameter "updateSmartGoalRequest" was null or undefined when calling updateSmartGoal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/smart-goal`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSmartGoalRequestToJSON(requestParameters['updateSmartGoalRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateSmartGoalResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint updates a smart goal
     * update a smart goal
     */
    async updateSmartGoal(requestParameters: UpdateSmartGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateSmartGoalResponse> {
        const response = await this.updateSmartGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates a transaction
     * update a transaction
     */
    async updateTransactionRaw(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateRecurringTransactionResponse>> {
        if (requestParameters['updateRecurringTransactionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateRecurringTransactionRequest',
                'Required parameter "updateRecurringTransactionRequest" was null or undefined when calling updateTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/transactions/recurring`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRecurringTransactionRequestToJSON(requestParameters['updateRecurringTransactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateRecurringTransactionResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint updates a transaction
     * update a transaction
     */
    async updateTransaction(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateRecurringTransactionResponse> {
        const response = await this.updateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs an updates operation on a user profile based on the provided parameters
     * update a user profile
     */
    async updateUserProfileRaw(requestParameters: UpdateUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserProfileResponse>> {
        if (requestParameters['updateUserProfileRequest'] == null) {
            throw new runtime.RequiredError(
                'updateUserProfileRequest',
                'Required parameter "updateUserProfileRequest" was null or undefined when calling updateUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/profile`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserProfileRequestToJSON(requestParameters['updateUserProfileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserProfileResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs an updates operation on a user profile based on the provided parameters
     * update a user profile
     */
    async updateUserProfile(requestParameters: UpdateUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserProfileResponse> {
        const response = await this.updateUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates a budget
     * updates a budget
     */
    async updatesBudgetRaw(requestParameters: UpdatesBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateBudgetResponse>> {
        if (requestParameters['updateBudgetRequest'] == null) {
            throw new runtime.RequiredError(
                'updateBudgetRequest',
                'Required parameter "updateBudgetRequest" was null or undefined when calling updatesBudget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/budget`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBudgetRequestToJSON(requestParameters['updateBudgetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateBudgetResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint updates a budget
     * updates a budget
     */
    async updatesBudget(requestParameters: UpdatesBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateBudgetResponse> {
        const response = await this.updatesBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates a milestone
     * updates a milestone
     */
    async updatesMilestoneRaw(requestParameters: UpdatesMilestoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMilestoneResponse>> {
        if (requestParameters['updateMilestoneRequest'] == null) {
            throw new runtime.RequiredError(
                'updateMilestoneRequest',
                'Required parameter "updateMilestoneRequest" was null or undefined when calling updatesMilestone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/financial-microservice/api/v1/milestone`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMilestoneRequestToJSON(requestParameters['updateMilestoneRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMilestoneResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint updates a milestone
     * updates a milestone
     */
    async updatesMilestone(requestParameters: UpdatesMilestoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMilestoneResponse> {
        const response = await this.updatesMilestoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CheckIfQuotaExceededProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type CheckIfQuotaExceededProfileTypeEnum = typeof CheckIfQuotaExceededProfileTypeEnum[keyof typeof CheckIfQuotaExceededProfileTypeEnum];
/**
 * @export
 */
export const DeleteLinkProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type DeleteLinkProfileTypeEnum = typeof DeleteLinkProfileTypeEnum[keyof typeof DeleteLinkProfileTypeEnum];
/**
 * @export
 */
export const DeleteUserProfile1ProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type DeleteUserProfile1ProfileTypeEnum = typeof DeleteUserProfile1ProfileTypeEnum[keyof typeof DeleteUserProfile1ProfileTypeEnum];
/**
 * @export
 */
export const DeleteUserProfile2ProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type DeleteUserProfile2ProfileTypeEnum = typeof DeleteUserProfile2ProfileTypeEnum[keyof typeof DeleteUserProfile2ProfileTypeEnum];
/**
 * @export
 */
export const GetAccountBalanceProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetAccountBalanceProfileTypeEnum = typeof GetAccountBalanceProfileTypeEnum[keyof typeof GetAccountBalanceProfileTypeEnum];
/**
 * @export
 */
export const GetCategoryMetricsFinancialSubProfileOverTimeProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetCategoryMetricsFinancialSubProfileOverTimeProfileTypeEnum = typeof GetCategoryMetricsFinancialSubProfileOverTimeProfileTypeEnum[keyof typeof GetCategoryMetricsFinancialSubProfileOverTimeProfileTypeEnum];
/**
 * @export
 */
export const GetCategoryMonthlyTransactionCountProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetCategoryMonthlyTransactionCountProfileTypeEnum = typeof GetCategoryMonthlyTransactionCountProfileTypeEnum[keyof typeof GetCategoryMonthlyTransactionCountProfileTypeEnum];
/**
 * @export
 */
export const GetDebtToIncomeRatioProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetDebtToIncomeRatioProfileTypeEnum = typeof GetDebtToIncomeRatioProfileTypeEnum[keyof typeof GetDebtToIncomeRatioProfileTypeEnum];
/**
 * @export
 */
export const GetExpenseMetricsProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetExpenseMetricsProfileTypeEnum = typeof GetExpenseMetricsProfileTypeEnum[keyof typeof GetExpenseMetricsProfileTypeEnum];
/**
 * @export
 */
export const GetExpenseMetricsFinancialSubProfileOverTimeProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetExpenseMetricsFinancialSubProfileOverTimeProfileTypeEnum = typeof GetExpenseMetricsFinancialSubProfileOverTimeProfileTypeEnum[keyof typeof GetExpenseMetricsFinancialSubProfileOverTimeProfileTypeEnum];
/**
 * @export
 */
export const GetFinancialProfileProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetFinancialProfileProfileTypeEnum = typeof GetFinancialProfileProfileTypeEnum[keyof typeof GetFinancialProfileProfileTypeEnum];
/**
 * @export
 */
export const GetIncomeExpenseRatioProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetIncomeExpenseRatioProfileTypeEnum = typeof GetIncomeExpenseRatioProfileTypeEnum[keyof typeof GetIncomeExpenseRatioProfileTypeEnum];
/**
 * @export
 */
export const GetIncomeMetricsProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetIncomeMetricsProfileTypeEnum = typeof GetIncomeMetricsProfileTypeEnum[keyof typeof GetIncomeMetricsProfileTypeEnum];
/**
 * @export
 */
export const GetIncomeMetricsFinancialSubProfileOverTimeProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetIncomeMetricsFinancialSubProfileOverTimeProfileTypeEnum = typeof GetIncomeMetricsFinancialSubProfileOverTimeProfileTypeEnum[keyof typeof GetIncomeMetricsFinancialSubProfileOverTimeProfileTypeEnum];
/**
 * @export
 */
export const GetInvestmentAccountProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetInvestmentAccountProfileTypeEnum = typeof GetInvestmentAccountProfileTypeEnum[keyof typeof GetInvestmentAccountProfileTypeEnum];
/**
 * @export
 */
export const GetLiabilityAccountProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetLiabilityAccountProfileTypeEnum = typeof GetLiabilityAccountProfileTypeEnum[keyof typeof GetLiabilityAccountProfileTypeEnum];
/**
 * @export
 */
export const GetLinkProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetLinkProfileTypeEnum = typeof GetLinkProfileTypeEnum[keyof typeof GetLinkProfileTypeEnum];
/**
 * @export
 */
export const GetLinksProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetLinksProfileTypeEnum = typeof GetLinksProfileTypeEnum[keyof typeof GetLinksProfileTypeEnum];
/**
 * @export
 */
export const GetLocationMetricsFinancialSubProfileOverTimeProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetLocationMetricsFinancialSubProfileOverTimeProfileTypeEnum = typeof GetLocationMetricsFinancialSubProfileOverTimeProfileTypeEnum[keyof typeof GetLocationMetricsFinancialSubProfileOverTimeProfileTypeEnum];
/**
 * @export
 */
export const GetMelodyFinancialContextProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetMelodyFinancialContextProfileTypeEnum = typeof GetMelodyFinancialContextProfileTypeEnum[keyof typeof GetMelodyFinancialContextProfileTypeEnum];
/**
 * @export
 */
export const GetMerchantMetricsFinancialSubProfileOverTimeProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetMerchantMetricsFinancialSubProfileOverTimeProfileTypeEnum = typeof GetMerchantMetricsFinancialSubProfileOverTimeProfileTypeEnum[keyof typeof GetMerchantMetricsFinancialSubProfileOverTimeProfileTypeEnum];
/**
 * @export
 */
export const GetMerchantMonthlyExpenditureProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetMerchantMonthlyExpenditureProfileTypeEnum = typeof GetMerchantMonthlyExpenditureProfileTypeEnum[keyof typeof GetMerchantMonthlyExpenditureProfileTypeEnum];
/**
 * @export
 */
export const GetMonthlyBalanceProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetMonthlyBalanceProfileTypeEnum = typeof GetMonthlyBalanceProfileTypeEnum[keyof typeof GetMonthlyBalanceProfileTypeEnum];
/**
 * @export
 */
export const GetMonthlyExpenditureProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetMonthlyExpenditureProfileTypeEnum = typeof GetMonthlyExpenditureProfileTypeEnum[keyof typeof GetMonthlyExpenditureProfileTypeEnum];
/**
 * @export
 */
export const GetMonthlyIncomeProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetMonthlyIncomeProfileTypeEnum = typeof GetMonthlyIncomeProfileTypeEnum[keyof typeof GetMonthlyIncomeProfileTypeEnum];
/**
 * @export
 */
export const GetMonthlySavingsProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetMonthlySavingsProfileTypeEnum = typeof GetMonthlySavingsProfileTypeEnum[keyof typeof GetMonthlySavingsProfileTypeEnum];
/**
 * @export
 */
export const GetMonthlyTotalQuantityBySecurityAndUserProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetMonthlyTotalQuantityBySecurityAndUserProfileTypeEnum = typeof GetMonthlyTotalQuantityBySecurityAndUserProfileTypeEnum[keyof typeof GetMonthlyTotalQuantityBySecurityAndUserProfileTypeEnum];
/**
 * @export
 */
export const GetMonthlyTransactionCountProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetMonthlyTransactionCountProfileTypeEnum = typeof GetMonthlyTransactionCountProfileTypeEnum[keyof typeof GetMonthlyTransactionCountProfileTypeEnum];
/**
 * @export
 */
export const GetMortageAccountProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetMortageAccountProfileTypeEnum = typeof GetMortageAccountProfileTypeEnum[keyof typeof GetMortageAccountProfileTypeEnum];
/**
 * @export
 */
export const GetNotesFromFinancialUserProfileProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetNotesFromFinancialUserProfileProfileTypeEnum = typeof GetNotesFromFinancialUserProfileProfileTypeEnum[keyof typeof GetNotesFromFinancialUserProfileProfileTypeEnum];
/**
 * @export
 */
export const GetPaymentChannelFinancialSubProfileOverTimeProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetPaymentChannelFinancialSubProfileOverTimeProfileTypeEnum = typeof GetPaymentChannelFinancialSubProfileOverTimeProfileTypeEnum[keyof typeof GetPaymentChannelFinancialSubProfileOverTimeProfileTypeEnum];
/**
 * @export
 */
export const GetPaymentChannelMonthlyExpenditureProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetPaymentChannelMonthlyExpenditureProfileTypeEnum = typeof GetPaymentChannelMonthlyExpenditureProfileTypeEnum[keyof typeof GetPaymentChannelMonthlyExpenditureProfileTypeEnum];
/**
 * @export
 */
export const GetRecurringTransactionsForUserProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetRecurringTransactionsForUserProfileTypeEnum = typeof GetRecurringTransactionsForUserProfileTypeEnum[keyof typeof GetRecurringTransactionsForUserProfileTypeEnum];
/**
 * @export
 */
export const GetStudentLoanAccountProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetStudentLoanAccountProfileTypeEnum = typeof GetStudentLoanAccountProfileTypeEnum[keyof typeof GetStudentLoanAccountProfileTypeEnum];
/**
 * @export
 */
export const GetTotalInvestmentBySecurityProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetTotalInvestmentBySecurityProfileTypeEnum = typeof GetTotalInvestmentBySecurityProfileTypeEnum[keyof typeof GetTotalInvestmentBySecurityProfileTypeEnum];
/**
 * @export
 */
export const GetTransactionsProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetTransactionsProfileTypeEnum = typeof GetTransactionsProfileTypeEnum[keyof typeof GetTransactionsProfileTypeEnum];
/**
 * @export
 */
export const GetTransactions1ProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetTransactions1ProfileTypeEnum = typeof GetTransactions1ProfileTypeEnum[keyof typeof GetTransactions1ProfileTypeEnum];
/**
 * @export
 */
export const GetTransactionsByTimeProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetTransactionsByTimeProfileTypeEnum = typeof GetTransactionsByTimeProfileTypeEnum[keyof typeof GetTransactionsByTimeProfileTypeEnum];
/**
 * @export
 */
export const GetTransactionsByTimeFinancialAccountTypeEnum = {
    Unspecified: 'FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED',
    Bank: 'FINANCIAL_ACCOUNT_TYPE_BANK',
    Investment: 'FINANCIAL_ACCOUNT_TYPE_INVESTMENT',
    Credit: 'FINANCIAL_ACCOUNT_TYPE_CREDIT',
    Mortgage: 'FINANCIAL_ACCOUNT_TYPE_MORTGAGE',
    StudentLoan: 'FINANCIAL_ACCOUNT_TYPE_STUDENT_LOAN'
} as const;
export type GetTransactionsByTimeFinancialAccountTypeEnum = typeof GetTransactionsByTimeFinancialAccountTypeEnum[keyof typeof GetTransactionsByTimeFinancialAccountTypeEnum];
/**
 * @export
 */
export const GetTransactionsForPastMonthProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetTransactionsForPastMonthProfileTypeEnum = typeof GetTransactionsForPastMonthProfileTypeEnum[keyof typeof GetTransactionsForPastMonthProfileTypeEnum];
/**
 * @export
 */
export const GetTransactionsForPastMonthFinancialAccountTypeEnum = {
    Unspecified: 'FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED',
    Bank: 'FINANCIAL_ACCOUNT_TYPE_BANK',
    Investment: 'FINANCIAL_ACCOUNT_TYPE_INVESTMENT',
    Credit: 'FINANCIAL_ACCOUNT_TYPE_CREDIT',
    Mortgage: 'FINANCIAL_ACCOUNT_TYPE_MORTGAGE',
    StudentLoan: 'FINANCIAL_ACCOUNT_TYPE_STUDENT_LOAN'
} as const;
export type GetTransactionsForPastMonthFinancialAccountTypeEnum = typeof GetTransactionsForPastMonthFinancialAccountTypeEnum[keyof typeof GetTransactionsForPastMonthFinancialAccountTypeEnum];
/**
 * @export
 */
export const GetTransactionsForPastWeekProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetTransactionsForPastWeekProfileTypeEnum = typeof GetTransactionsForPastWeekProfileTypeEnum[keyof typeof GetTransactionsForPastWeekProfileTypeEnum];
/**
 * @export
 */
export const GetTransactionsForPastWeekFinancialAccountTypeEnum = {
    Unspecified: 'FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED',
    Bank: 'FINANCIAL_ACCOUNT_TYPE_BANK',
    Investment: 'FINANCIAL_ACCOUNT_TYPE_INVESTMENT',
    Credit: 'FINANCIAL_ACCOUNT_TYPE_CREDIT',
    Mortgage: 'FINANCIAL_ACCOUNT_TYPE_MORTGAGE',
    StudentLoan: 'FINANCIAL_ACCOUNT_TYPE_STUDENT_LOAN'
} as const;
export type GetTransactionsForPastWeekFinancialAccountTypeEnum = typeof GetTransactionsForPastWeekFinancialAccountTypeEnum[keyof typeof GetTransactionsForPastWeekFinancialAccountTypeEnum];
/**
 * @export
 */
export const GetUserAccountBalanceHistoryProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetUserAccountBalanceHistoryProfileTypeEnum = typeof GetUserAccountBalanceHistoryProfileTypeEnum[keyof typeof GetUserAccountBalanceHistoryProfileTypeEnum];
/**
 * @export
 */
export const GetUserCategoryMonthlyExpenditureProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetUserCategoryMonthlyExpenditureProfileTypeEnum = typeof GetUserCategoryMonthlyExpenditureProfileTypeEnum[keyof typeof GetUserCategoryMonthlyExpenditureProfileTypeEnum];
/**
 * @export
 */
export const GetUserCategoryMonthlyIncomeProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetUserCategoryMonthlyIncomeProfileTypeEnum = typeof GetUserCategoryMonthlyIncomeProfileTypeEnum[keyof typeof GetUserCategoryMonthlyIncomeProfileTypeEnum];
/**
 * @export
 */
export const GetUserProfile1ProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type GetUserProfile1ProfileTypeEnum = typeof GetUserProfile1ProfileTypeEnum[keyof typeof GetUserProfile1ProfileTypeEnum];
/**
 * @export
 */
export const ListRecurringTransactionsForUserAndAccountProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type ListRecurringTransactionsForUserAndAccountProfileTypeEnum = typeof ListRecurringTransactionsForUserAndAccountProfileTypeEnum[keyof typeof ListRecurringTransactionsForUserAndAccountProfileTypeEnum];
/**
 * @export
 */
export const ListRecurringTransactionsForUserAndAccountFinancialAccountTypeEnum = {
    Unspecified: 'FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED',
    Bank: 'FINANCIAL_ACCOUNT_TYPE_BANK',
    Investment: 'FINANCIAL_ACCOUNT_TYPE_INVESTMENT',
    Credit: 'FINANCIAL_ACCOUNT_TYPE_CREDIT',
    Mortgage: 'FINANCIAL_ACCOUNT_TYPE_MORTGAGE',
    StudentLoan: 'FINANCIAL_ACCOUNT_TYPE_STUDENT_LOAN'
} as const;
export type ListRecurringTransactionsForUserAndAccountFinancialAccountTypeEnum = typeof ListRecurringTransactionsForUserAndAccountFinancialAccountTypeEnum[keyof typeof ListRecurringTransactionsForUserAndAccountFinancialAccountTypeEnum];
/**
 * @export
 */
export const ListTransactionsProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type ListTransactionsProfileTypeEnum = typeof ListTransactionsProfileTypeEnum[keyof typeof ListTransactionsProfileTypeEnum];
/**
 * @export
 */
export const ListTransactionsFinancialAccountTypeEnum = {
    Unspecified: 'FINANCIAL_ACCOUNT_TYPE_UNSPECIFIED',
    Bank: 'FINANCIAL_ACCOUNT_TYPE_BANK',
    Investment: 'FINANCIAL_ACCOUNT_TYPE_INVESTMENT',
    Credit: 'FINANCIAL_ACCOUNT_TYPE_CREDIT',
    Mortgage: 'FINANCIAL_ACCOUNT_TYPE_MORTGAGE',
    StudentLoan: 'FINANCIAL_ACCOUNT_TYPE_STUDENT_LOAN'
} as const;
export type ListTransactionsFinancialAccountTypeEnum = typeof ListTransactionsFinancialAccountTypeEnum[keyof typeof ListTransactionsFinancialAccountTypeEnum];
/**
 * @export
 */
export const ListTransactions1ProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type ListTransactions1ProfileTypeEnum = typeof ListTransactions1ProfileTypeEnum[keyof typeof ListTransactions1ProfileTypeEnum];
/**
 * @export
 */
export const TransactionAggregatesProfileTypeEnum = {
    Unspecified: 'FINANCIAL_USER_PROFILE_TYPE_UNSPECIFIED',
    User: 'FINANCIAL_USER_PROFILE_TYPE_USER',
    Business: 'FINANCIAL_USER_PROFILE_TYPE_BUSINESS'
} as const;
export type TransactionAggregatesProfileTypeEnum = typeof TransactionAggregatesProfileTypeEnum[keyof typeof TransactionAggregatesProfileTypeEnum];
