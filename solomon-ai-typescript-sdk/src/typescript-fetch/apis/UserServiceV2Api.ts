/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CheckEmailAndAuth0UserIdExistsResponse,
  CheckEmailExistsV2Response,
  CheckUsernameExistsV2Response,
  CreateRoleResponse,
  CreateUserV2Request,
  CreateUserV2Response,
  DeleteRoleResponse,
  DeleteUserV2Response,
  GetBusinessSettingsResponse,
  GetCannyUserSSOTokenResponse,
  GetRoleResponse,
  GetUserByAuth0IDResponse,
  GetUserByAuthnIDV2Response,
  GetUserByEmailOrUsernameV2Response,
  GetUserByEmailV2Response,
  GetUserByUsernameV2Response,
  GetUserIdV2Response,
  GetUserV2Response,
  InternalErrorMessageResponse,
  ListRolesResponse,
  PasswordResetWebhookV2Response,
  PathUnknownErrorMessageResponse,
  Role,
  Status,
  UpdateRoleResponse,
  UpdateUserV2Request,
  UpdateUserV2Response,
  ValidationErrorMessageResponse,
  VerifyUserV2Response,
} from '../models/index';
import {
    CheckEmailAndAuth0UserIdExistsResponseFromJSON,
    CheckEmailAndAuth0UserIdExistsResponseToJSON,
    CheckEmailExistsV2ResponseFromJSON,
    CheckEmailExistsV2ResponseToJSON,
    CheckUsernameExistsV2ResponseFromJSON,
    CheckUsernameExistsV2ResponseToJSON,
    CreateRoleResponseFromJSON,
    CreateRoleResponseToJSON,
    CreateUserV2RequestFromJSON,
    CreateUserV2RequestToJSON,
    CreateUserV2ResponseFromJSON,
    CreateUserV2ResponseToJSON,
    DeleteRoleResponseFromJSON,
    DeleteRoleResponseToJSON,
    DeleteUserV2ResponseFromJSON,
    DeleteUserV2ResponseToJSON,
    GetBusinessSettingsResponseFromJSON,
    GetBusinessSettingsResponseToJSON,
    GetCannyUserSSOTokenResponseFromJSON,
    GetCannyUserSSOTokenResponseToJSON,
    GetRoleResponseFromJSON,
    GetRoleResponseToJSON,
    GetUserByAuth0IDResponseFromJSON,
    GetUserByAuth0IDResponseToJSON,
    GetUserByAuthnIDV2ResponseFromJSON,
    GetUserByAuthnIDV2ResponseToJSON,
    GetUserByEmailOrUsernameV2ResponseFromJSON,
    GetUserByEmailOrUsernameV2ResponseToJSON,
    GetUserByEmailV2ResponseFromJSON,
    GetUserByEmailV2ResponseToJSON,
    GetUserByUsernameV2ResponseFromJSON,
    GetUserByUsernameV2ResponseToJSON,
    GetUserIdV2ResponseFromJSON,
    GetUserIdV2ResponseToJSON,
    GetUserV2ResponseFromJSON,
    GetUserV2ResponseToJSON,
    InternalErrorMessageResponseFromJSON,
    InternalErrorMessageResponseToJSON,
    ListRolesResponseFromJSON,
    ListRolesResponseToJSON,
    PasswordResetWebhookV2ResponseFromJSON,
    PasswordResetWebhookV2ResponseToJSON,
    PathUnknownErrorMessageResponseFromJSON,
    PathUnknownErrorMessageResponseToJSON,
    RoleFromJSON,
    RoleToJSON,
    StatusFromJSON,
    StatusToJSON,
    UpdateRoleResponseFromJSON,
    UpdateRoleResponseToJSON,
    UpdateUserV2RequestFromJSON,
    UpdateUserV2RequestToJSON,
    UpdateUserV2ResponseFromJSON,
    UpdateUserV2ResponseToJSON,
    ValidationErrorMessageResponseFromJSON,
    ValidationErrorMessageResponseToJSON,
    VerifyUserV2ResponseFromJSON,
    VerifyUserV2ResponseToJSON,
} from '../models/index';

export interface CheckEmailAndAuth0UserIdExistsRequest {
    email: string;
    auth0UserId: string;
}

export interface CheckEmailExistsV2Request {
    email: string;
    profileType: CheckEmailExistsV2ProfileTypeEnum;
}

export interface CheckUsernameExistsV2Request {
    username: string;
    profileType: CheckUsernameExistsV2ProfileTypeEnum;
}

export interface CreateRoleRequest {
    role: Role;
}

export interface CreateUserV2OperationRequest {
    createUserV2Request: CreateUserV2Request;
}

export interface DeleteRoleRequest {
    id: string;
}

export interface DeleteUserV2Request {
    userId: string;
    profileType: DeleteUserV2ProfileTypeEnum;
}

export interface GetCannyUserSSOTokenRequest {
    userId: string;
    profileType: GetCannyUserSSOTokenProfileTypeEnum;
}

export interface GetRoleRequest {
    id: string;
}

export interface GetUserByAuth0IDRequest {
    auth0UserId: string;
    profileType: GetUserByAuth0IDProfileTypeEnum;
}

export interface GetUserByAuthnIDV2Request {
    authnId: string;
    profileType: GetUserByAuthnIDV2ProfileTypeEnum;
}

export interface GetUserByEmailOrUsernameV2Request {
    profileType: GetUserByEmailOrUsernameV2ProfileTypeEnum;
    email?: string;
    username?: string;
}

export interface GetUserByEmailV2Request {
    email: string;
    profileType: GetUserByEmailV2ProfileTypeEnum;
}

export interface GetUserByUsernameV2Request {
    username: string;
    profileType: GetUserByUsernameV2ProfileTypeEnum;
}

export interface GetUserIdV2Request {
    profileType: GetUserIdV2ProfileTypeEnum;
    email?: string;
    username?: string;
}

export interface GetUserV2Request {
    userId: string;
    profileType: GetUserV2ProfileTypeEnum;
}

export interface ListRolesRequest {
    page?: number;
    pageSize?: number;
}

export interface PasswordResetWebhookV2Request {
    accountId?: string;
    token?: string;
}

export interface RetrieveBusinessSettingsRequest {
    userId: string;
}

export interface UpdateRoleRequest {
    role: Role;
}

export interface UpdateUserV2OperationRequest {
    updateUserV2Request: UpdateUserV2Request;
}

export interface VerifyUserV2Request {
    userId: string;
    profileType: VerifyUserV2ProfileTypeEnum;
}

/**
 * 
 */
export class UserServiceV2Api extends runtime.BaseAPI {

    /**
     * Checks if an email and auth0 user id exists or not
     * Checks that an email and auth0 user id exists or not
     */
    async checkEmailAndAuth0UserIdExistsRaw(requestParameters: CheckEmailAndAuth0UserIdExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckEmailAndAuth0UserIdExistsResponse>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling checkEmailAndAuth0UserIdExists.');
        }

        if (requestParameters.auth0UserId === null || requestParameters.auth0UserId === undefined) {
            throw new runtime.RequiredError('auth0UserId','Required parameter requestParameters.auth0UserId was null or undefined when calling checkEmailAndAuth0UserIdExists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user/email/{email}/auth0/{auth0UserId}/exists`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))).replace(`{${"auth0UserId"}}`, encodeURIComponent(String(requestParameters.auth0UserId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckEmailAndAuth0UserIdExistsResponseFromJSON(jsonValue));
    }

    /**
     * Checks if an email and auth0 user id exists or not
     * Checks that an email and auth0 user id exists or not
     */
    async checkEmailAndAuth0UserIdExists(requestParameters: CheckEmailAndAuth0UserIdExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckEmailAndAuth0UserIdExistsResponse> {
        const response = await this.checkEmailAndAuth0UserIdExistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checks if an email exists or not
     * Checks that an email exists or not
     */
    async checkEmailExistsV2Raw(requestParameters: CheckEmailExistsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckEmailExistsV2Response>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling checkEmailExistsV2.');
        }

        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling checkEmailExistsV2.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/email/{email}/exists`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckEmailExistsV2ResponseFromJSON(jsonValue));
    }

    /**
     * Checks if an email exists or not
     * Checks that an email exists or not
     */
    async checkEmailExistsV2(requestParameters: CheckEmailExistsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckEmailExistsV2Response> {
        const response = await this.checkEmailExistsV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checks if a username exists or not
     * Checks that a username exists or not
     */
    async checkUsernameExistsV2Raw(requestParameters: CheckUsernameExistsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckUsernameExistsV2Response>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling checkUsernameExistsV2.');
        }

        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling checkUsernameExistsV2.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/username/{username}/exists`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckUsernameExistsV2ResponseFromJSON(jsonValue));
    }

    /**
     * Checks if a username exists or not
     * Checks that a username exists or not
     */
    async checkUsernameExistsV2(requestParameters: CheckUsernameExistsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckUsernameExistsV2Response> {
        const response = await this.checkUsernameExistsV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint adds a new role to the system. It requires role details such as name, type, and permissions.The creation process involves adding the role to the database and initializing its permissions.
     * Creates a new role
     */
    async createRoleRaw(requestParameters: CreateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateRoleResponse>> {
        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling createRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters.role),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateRoleResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint adds a new role to the system. It requires role details such as name, type, and permissions.The creation process involves adding the role to the database and initializing its permissions.
     * Creates a new role
     */
    async createRole(requestParameters: CreateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateRoleResponse> {
        const response = await this.createRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs an a creation operation of a user account based on the provided parametersThis operation is implemented as a distributed transactions as this operation spans multiple services
     * create a user account
     */
    async createUserV2Raw(requestParameters: CreateUserV2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserV2Response>> {
        if (requestParameters.createUserV2Request === null || requestParameters.createUserV2Request === undefined) {
            throw new runtime.RequiredError('createUserV2Request','Required parameter requestParameters.createUserV2Request was null or undefined when calling createUserV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserV2RequestToJSON(requestParameters.createUserV2Request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserV2ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs an a creation operation of a user account based on the provided parametersThis operation is implemented as a distributed transactions as this operation spans multiple services
     * create a user account
     */
    async createUserV2(requestParameters: CreateUserV2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserV2Response> {
        const response = await this.createUserV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a role from the system based on the provided role ID.The deletion process ensures that all related data and permissions are properly removed.
     * Deletes a role
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteRoleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteRoleResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a role from the system based on the provided role ID.The deletion process ensures that all related data and permissions are properly removed.
     * Deletes a role
     */
    async deleteRole(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteRoleResponse> {
        const response = await this.deleteRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs a delete operation on a user account based on the provided parametersThis deletion operation spans multiple services as user details are stored across a suite of our backend servicesThe operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the requestDivergent state is not expected to be encountered with this endpoint.
     * deletes a user account
     */
    async deleteUserV2Raw(requestParameters: DeleteUserV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUserV2Response>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUserV2.');
        }

        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling deleteUserV2.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUserV2ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs a delete operation on a user account based on the provided parametersThis deletion operation spans multiple services as user details are stored across a suite of our backend servicesThe operation itself is an atomic one of nature. Either all services successfully delete the recod or we fail the requestDivergent state is not expected to be encountered with this endpoint.
     * deletes a user account
     */
    async deleteUserV2(requestParameters: DeleteUserV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUserV2Response> {
        const response = await this.deleteUserV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a user sso token for canny
     * Retrieves user sso token for canny
     */
    async getCannyUserSSOTokenRaw(requestParameters: GetCannyUserSSOTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCannyUserSSOTokenResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getCannyUserSSOToken.');
        }

        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling getCannyUserSSOToken.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/canny/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCannyUserSSOTokenResponseFromJSON(jsonValue));
    }

    /**
     * Fetches a user sso token for canny
     * Retrieves user sso token for canny
     */
    async getCannyUserSSOToken(requestParameters: GetCannyUserSSOTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCannyUserSSOTokenResponse> {
        const response = await this.getCannyUserSSOTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint fetches details of a specific role using the role ID.It retrieves the role\'s name, type, permissions, and audit history.
     * Retrieves a role
     */
    async getRoleRaw(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRoleResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint fetches details of a specific role using the role ID.It retrieves the role\'s name, type, permissions, and audit history.
     * Retrieves a role
     */
    async getRole(requestParameters: GetRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoleResponse> {
        const response = await this.getRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches detailed information about a user account based on the specified authn ID.
     * Retrieve user account details by auth0 id and profile type
     */
    async getUserByAuth0IDRaw(requestParameters: GetUserByAuth0IDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserByAuth0IDResponse>> {
        if (requestParameters.auth0UserId === null || requestParameters.auth0UserId === undefined) {
            throw new runtime.RequiredError('auth0UserId','Required parameter requestParameters.auth0UserId was null or undefined when calling getUserByAuth0ID.');
        }

        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling getUserByAuth0ID.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/auth-zero/{auth0UserId}`.replace(`{${"auth0UserId"}}`, encodeURIComponent(String(requestParameters.auth0UserId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserByAuth0IDResponseFromJSON(jsonValue));
    }

    /**
     * Fetches detailed information about a user account based on the specified authn ID.
     * Retrieve user account details by auth0 id and profile type
     */
    async getUserByAuth0ID(requestParameters: GetUserByAuth0IDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserByAuth0IDResponse> {
        const response = await this.getUserByAuth0IDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches detailed information about a user account based on the specified authn ID.
     * Retrieve user account details by authn id
     */
    async getUserByAuthnIDV2Raw(requestParameters: GetUserByAuthnIDV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserByAuthnIDV2Response>> {
        if (requestParameters.authnId === null || requestParameters.authnId === undefined) {
            throw new runtime.RequiredError('authnId','Required parameter requestParameters.authnId was null or undefined when calling getUserByAuthnIDV2.');
        }

        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling getUserByAuthnIDV2.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/authn/{authnId}`.replace(`{${"authnId"}}`, encodeURIComponent(String(requestParameters.authnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserByAuthnIDV2ResponseFromJSON(jsonValue));
    }

    /**
     * Fetches detailed information about a user account based on the specified authn ID.
     * Retrieve user account details by authn id
     */
    async getUserByAuthnIDV2(requestParameters: GetUserByAuthnIDV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserByAuthnIDV2Response> {
        const response = await this.getUserByAuthnIDV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a user account using the provided email or username.
     * Retrieve user account by email or username
     */
    async getUserByEmailOrUsernameV2Raw(requestParameters: GetUserByEmailOrUsernameV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserByEmailOrUsernameV2Response>> {
        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling getUserByEmailOrUsernameV2.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/account/query-by-email-or-username`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserByEmailOrUsernameV2ResponseFromJSON(jsonValue));
    }

    /**
     * Fetches a user account using the provided email or username.
     * Retrieve user account by email or username
     */
    async getUserByEmailOrUsernameV2(requestParameters: GetUserByEmailOrUsernameV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserByEmailOrUsernameV2Response> {
        const response = await this.getUserByEmailOrUsernameV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides detailed information of a user based on the given email.
     * Retrieve user details by email
     */
    async getUserByEmailV2Raw(requestParameters: GetUserByEmailV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserByEmailV2Response>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getUserByEmailV2.');
        }

        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling getUserByEmailV2.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/email/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserByEmailV2ResponseFromJSON(jsonValue));
    }

    /**
     * Provides detailed information of a user based on the given email.
     * Retrieve user details by email
     */
    async getUserByEmailV2(requestParameters: GetUserByEmailV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserByEmailV2Response> {
        const response = await this.getUserByEmailV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides detailed information of a user based on the given username.
     * Retrieve user details by username
     */
    async getUserByUsernameV2Raw(requestParameters: GetUserByUsernameV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserByUsernameV2Response>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getUserByUsernameV2.');
        }

        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling getUserByUsernameV2.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/username/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserByUsernameV2ResponseFromJSON(jsonValue));
    }

    /**
     * Provides detailed information of a user based on the given username.
     * Retrieve user details by username
     */
    async getUserByUsernameV2(requestParameters: GetUserByUsernameV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserByUsernameV2Response> {
        const response = await this.getUserByUsernameV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the user record id if the user record exists example: /api/v1/user-service?email=testuser@gmail.com&&username=testuser
     * get a user account id
     */
    async getUserIdV2Raw(requestParameters: GetUserIdV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserIdV2Response>> {
        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling getUserIdV2.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/query-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserIdV2ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the user record id if the user record exists example: /api/v1/user-service?email=testuser@gmail.com&&username=testuser
     * get a user account id
     */
    async getUserIdV2(requestParameters: GetUserIdV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserIdV2Response> {
        const response = await this.getUserIdV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches detailed information about a user account based on the specified user ID.
     * Retrieve user account details
     */
    async getUserV2Raw(requestParameters: GetUserV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserV2Response>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserV2.');
        }

        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling getUserV2.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserV2ResponseFromJSON(jsonValue));
    }

    /**
     * Fetches detailed information about a user account based on the specified user ID.
     * Retrieve user account details
     */
    async getUserV2(requestParameters: GetUserV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserV2Response> {
        const response = await this.getUserV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint retrieves a list of all roles in the system. It supports pagination to handle large sets of data.Each role in the list includes details like name, type, and permissions.
     * Lists all roles
     */
    async listRolesRaw(requestParameters: ListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListRolesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListRolesResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint retrieves a list of all roles in the system. It supports pagination to handle large sets of data.Each role in the list includes details like name, type, and permissions.
     * Lists all roles
     */
    async listRoles(requestParameters: ListRolesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListRolesResponse> {
        const response = await this.listRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Handles password reset operations for a specified user account through a webhook.
     * Webhook for Password Reset
     */
    async passwordResetWebhookV2Raw(requestParameters: PasswordResetWebhookV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordResetWebhookV2Response>> {
        const queryParameters: any = {};

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/webhook/password-reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordResetWebhookV2ResponseFromJSON(jsonValue));
    }

    /**
     * Handles password reset operations for a specified user account through a webhook.
     * Webhook for Password Reset
     */
    async passwordResetWebhookV2(requestParameters: PasswordResetWebhookV2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordResetWebhookV2Response> {
        const response = await this.passwordResetWebhookV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches settings associated with a specified business account using the user ID.
     * Retrieve Business Account Settings
     */
    async retrieveBusinessSettingsRaw(requestParameters: RetrieveBusinessSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBusinessSettingsResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling retrieveBusinessSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/business/settings/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBusinessSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Fetches settings associated with a specified business account using the user ID.
     * Retrieve Business Account Settings
     */
    async retrieveBusinessSettings(requestParameters: RetrieveBusinessSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBusinessSettingsResponse> {
        const response = await this.retrieveBusinessSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates the details of an existing role. The role ID is used to identify the role to be updated.The update operation can modify the role\'s name, type, and permissions.
     * Updates an existing role
     */
    async updateRoleRaw(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateRoleResponse>> {
        if (requestParameters.role === null || requestParameters.role === undefined) {
            throw new runtime.RequiredError('role','Required parameter requestParameters.role was null or undefined when calling updateRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user-microservice/api/v2/user/role`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters.role),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateRoleResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint updates the details of an existing role. The role ID is used to identify the role to be updated.The update operation can modify the role\'s name, type, and permissions.
     * Updates an existing role
     */
    async updateRole(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateRoleResponse> {
        const response = await this.updateRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint performs an updates operation on a user account based on the provided parametersThis update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)All update operations are atomic by nature hence we should not expect any form of divergent state
     * update a user account
     */
    async updateUserV2Raw(requestParameters: UpdateUserV2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserV2Response>> {
        if (requestParameters.updateUserV2Request === null || requestParameters.updateUserV2Request === undefined) {
            throw new runtime.RequiredError('updateUserV2Request','Required parameter requestParameters.updateUserV2Request was null or undefined when calling updateUserV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserV2RequestToJSON(requestParameters.updateUserV2Request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserV2ResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint performs an updates operation on a user account based on the provided parametersThis update operation can span multiple services on specific cases (such as when the client is explicitly attempting to update the email of the user)All update operations are atomic by nature hence we should not expect any form of divergent state
     * update a user account
     */
    async updateUserV2(requestParameters: UpdateUserV2OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserV2Response> {
        const response = await this.updateUserV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Performs verification of a user account\'s email based on the provided user ID and profile type.
     * User Email Verification
     */
    async verifyUserV2Raw(requestParameters: VerifyUserV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifyUserV2Response>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling verifyUserV2.');
        }

        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling verifyUserV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-microservice/api/v2/user-service/user/verification/{userId}/profile-type/{profileType}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"profileType"}}`, encodeURIComponent(String(requestParameters.profileType))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyUserV2ResponseFromJSON(jsonValue));
    }

    /**
     * Performs verification of a user account\'s email based on the provided user ID and profile type.
     * User Email Verification
     */
    async verifyUserV2(requestParameters: VerifyUserV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifyUserV2Response> {
        const response = await this.verifyUserV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CheckEmailExistsV2ProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type CheckEmailExistsV2ProfileTypeEnum = typeof CheckEmailExistsV2ProfileTypeEnum[keyof typeof CheckEmailExistsV2ProfileTypeEnum];
/**
 * @export
 */
export const CheckUsernameExistsV2ProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type CheckUsernameExistsV2ProfileTypeEnum = typeof CheckUsernameExistsV2ProfileTypeEnum[keyof typeof CheckUsernameExistsV2ProfileTypeEnum];
/**
 * @export
 */
export const DeleteUserV2ProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type DeleteUserV2ProfileTypeEnum = typeof DeleteUserV2ProfileTypeEnum[keyof typeof DeleteUserV2ProfileTypeEnum];
/**
 * @export
 */
export const GetCannyUserSSOTokenProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type GetCannyUserSSOTokenProfileTypeEnum = typeof GetCannyUserSSOTokenProfileTypeEnum[keyof typeof GetCannyUserSSOTokenProfileTypeEnum];
/**
 * @export
 */
export const GetUserByAuth0IDProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type GetUserByAuth0IDProfileTypeEnum = typeof GetUserByAuth0IDProfileTypeEnum[keyof typeof GetUserByAuth0IDProfileTypeEnum];
/**
 * @export
 */
export const GetUserByAuthnIDV2ProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type GetUserByAuthnIDV2ProfileTypeEnum = typeof GetUserByAuthnIDV2ProfileTypeEnum[keyof typeof GetUserByAuthnIDV2ProfileTypeEnum];
/**
 * @export
 */
export const GetUserByEmailOrUsernameV2ProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type GetUserByEmailOrUsernameV2ProfileTypeEnum = typeof GetUserByEmailOrUsernameV2ProfileTypeEnum[keyof typeof GetUserByEmailOrUsernameV2ProfileTypeEnum];
/**
 * @export
 */
export const GetUserByEmailV2ProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type GetUserByEmailV2ProfileTypeEnum = typeof GetUserByEmailV2ProfileTypeEnum[keyof typeof GetUserByEmailV2ProfileTypeEnum];
/**
 * @export
 */
export const GetUserByUsernameV2ProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type GetUserByUsernameV2ProfileTypeEnum = typeof GetUserByUsernameV2ProfileTypeEnum[keyof typeof GetUserByUsernameV2ProfileTypeEnum];
/**
 * @export
 */
export const GetUserIdV2ProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type GetUserIdV2ProfileTypeEnum = typeof GetUserIdV2ProfileTypeEnum[keyof typeof GetUserIdV2ProfileTypeEnum];
/**
 * @export
 */
export const GetUserV2ProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type GetUserV2ProfileTypeEnum = typeof GetUserV2ProfileTypeEnum[keyof typeof GetUserV2ProfileTypeEnum];
/**
 * @export
 */
export const VerifyUserV2ProfileTypeEnum = {
    Unspecified: 'PROFILE_TYPE_UNSPECIFIED',
    User: 'PROFILE_TYPE_USER',
    Business: 'PROFILE_TYPE_BUSINESS'
} as const;
export type VerifyUserV2ProfileTypeEnum = typeof VerifyUserV2ProfileTypeEnum[keyof typeof VerifyUserV2ProfileTypeEnum];
