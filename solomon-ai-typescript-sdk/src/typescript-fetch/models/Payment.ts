/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The Payment object represents general payments made towards a specific transaction.
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    remoteId?: string;
    /**
     * The payment's transaction date.
     * @type {Date}
     * @memberof Payment
     */
    transactionDate?: Date;
    /**
     * The supplier, or customer involved in the payment.
     * @type {string}
     * @memberof Payment
     */
    contact?: string;
    /**
     * The supplier’s or customer’s account in which the payment is made.
     * @type {string}
     * @memberof Payment
     */
    account?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    currency?: string;
    /**
     * The payment's exchange rate.
     * 
     * Assuming string due to the example provided, but could be float or double.
     * @type {string}
     * @memberof Payment
     */
    exchangeRate?: string;
    /**
     * The company the payment belongs to.
     * @type {string}
     * @memberof Payment
     */
    company?: string;
    /**
     * The total amount of money being paid to the supplier, or customer, after taxes.
     * 
     * Might want to use double or a more precise type
     * @type {number}
     * @memberof Payment
     */
    totalAmount?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Payment
     */
    trackingCategories?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof Payment
     */
    remoteUpdatedAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Payment
     */
    remoteWasDeleted?: boolean;
    /**
     * The accounting period that the Payment was generated in.
     * @type {string}
     * @memberof Payment
     */
    accountingPeriod?: string;
    /**
     * 
     * @type {Date}
     * @memberof Payment
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    mergeRecordId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Payment
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the Payment interface.
 */
export function instanceOfPayment(value: object): boolean {
    return true;
}

export function PaymentFromJSON(json: any): Payment {
    return PaymentFromJSONTyped(json, false);
}

export function PaymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Payment {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'transactionDate': json['transactionDate'] == null ? undefined : (new Date(json['transactionDate'])),
        'contact': json['contact'] == null ? undefined : json['contact'],
        'account': json['account'] == null ? undefined : json['account'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'exchangeRate': json['exchangeRate'] == null ? undefined : json['exchangeRate'],
        'company': json['company'] == null ? undefined : json['company'],
        'totalAmount': json['totalAmount'] == null ? undefined : json['totalAmount'],
        'trackingCategories': json['trackingCategories'] == null ? undefined : json['trackingCategories'],
        'remoteUpdatedAt': json['remoteUpdatedAt'] == null ? undefined : (new Date(json['remoteUpdatedAt'])),
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'accountingPeriod': json['accountingPeriod'] == null ? undefined : json['accountingPeriod'],
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'mergeRecordId': json['mergeRecordId'] == null ? undefined : json['mergeRecordId'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
    };
}

export function PaymentToJSON(value?: Payment | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'remoteId': value['remoteId'],
        'transactionDate': value['transactionDate'] == null ? undefined : ((value['transactionDate']).toISOString()),
        'contact': value['contact'],
        'account': value['account'],
        'currency': value['currency'],
        'exchangeRate': value['exchangeRate'],
        'company': value['company'],
        'totalAmount': value['totalAmount'],
        'trackingCategories': value['trackingCategories'],
        'remoteUpdatedAt': value['remoteUpdatedAt'] == null ? undefined : ((value['remoteUpdatedAt']).toISOString()),
        'remoteWasDeleted': value['remoteWasDeleted'],
        'accountingPeriod': value['accountingPeriod'],
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'mergeRecordId': value['mergeRecordId'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
    };
}

