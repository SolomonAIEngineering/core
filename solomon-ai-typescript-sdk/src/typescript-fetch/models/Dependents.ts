/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DependentRelationship } from './DependentRelationship';
import {
    DependentRelationshipFromJSON,
    DependentRelationshipFromJSONTyped,
    DependentRelationshipToJSON,
} from './DependentRelationship';
import type { Gender } from './Gender';
import {
    GenderFromJSON,
    GenderFromJSONTyped,
    GenderToJSON,
} from './Gender';
import type { LocationAddress } from './LocationAddress';
import {
    LocationAddressFromJSON,
    LocationAddressFromJSONTyped,
    LocationAddressToJSON,
} from './LocationAddress';

/**
 * 
 * @export
 * @interface Dependents
 */
export interface Dependents {
    /**
     * 
     * @type {string}
     * @memberof Dependents
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Dependents
     */
    remoteId?: string;
    /**
     * The employee's first name.
     * @type {string}
     * @memberof Dependents
     */
    firstName?: string;
    /**
     * The employee's last name.
     * @type {string}
     * @memberof Dependents
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof Dependents
     */
    middleName?: string;
    /**
     * 
     * @type {DependentRelationship}
     * @memberof Dependents
     */
    dependentRelationshipToEmployee?: DependentRelationship;
    /**
     * The dependent's date of birth.
     * @type {Date}
     * @memberof Dependents
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Gender}
     * @memberof Dependents
     */
    gender?: Gender;
    /**
     * 
     * @type {string}
     * @memberof Dependents
     */
    phoneNumber?: string;
    /**
     * 
     * @type {LocationAddress}
     * @memberof Dependents
     */
    homeLocation?: LocationAddress;
    /**
     * 
     * @type {boolean}
     * @memberof Dependents
     */
    isStudent?: boolean;
    /**
     * The dependents's social security number.
     * @type {string}
     * @memberof Dependents
     */
    ssn?: string;
    /**
     * Indicates whether or not this object has been deleted in the third party platform.
     * @type {boolean}
     * @memberof Dependents
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Dependents
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Dependents
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Dependents
     */
    mergeAccountId?: string;
}

/**
 * Check if a given object implements the Dependents interface.
 */
export function instanceOfDependents(value: object): boolean {
    return true;
}

export function DependentsFromJSON(json: any): Dependents {
    return DependentsFromJSONTyped(json, false);
}

export function DependentsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Dependents {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'middleName': json['middleName'] == null ? undefined : json['middleName'],
        'dependentRelationshipToEmployee': json['dependentRelationshipToEmployee'] == null ? undefined : DependentRelationshipFromJSON(json['dependentRelationshipToEmployee']),
        'dateOfBirth': json['dateOfBirth'] == null ? undefined : (new Date(json['dateOfBirth'])),
        'gender': json['gender'] == null ? undefined : GenderFromJSON(json['gender']),
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'homeLocation': json['homeLocation'] == null ? undefined : LocationAddressFromJSON(json['homeLocation']),
        'isStudent': json['isStudent'] == null ? undefined : json['isStudent'],
        'ssn': json['ssn'] == null ? undefined : json['ssn'],
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'mergeAccountId': json['mergeAccountId'] == null ? undefined : json['mergeAccountId'],
    };
}

export function DependentsToJSON(value?: Dependents | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'remoteId': value['remoteId'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'middleName': value['middleName'],
        'dependentRelationshipToEmployee': DependentRelationshipToJSON(value['dependentRelationshipToEmployee']),
        'dateOfBirth': value['dateOfBirth'] == null ? undefined : ((value['dateOfBirth']).toISOString()),
        'gender': GenderToJSON(value['gender']),
        'phoneNumber': value['phoneNumber'],
        'homeLocation': LocationAddressToJSON(value['homeLocation']),
        'isStudent': value['isStudent'],
        'ssn': value['ssn'],
        'remoteWasDeleted': value['remoteWasDeleted'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'mergeAccountId': value['mergeAccountId'],
    };
}

