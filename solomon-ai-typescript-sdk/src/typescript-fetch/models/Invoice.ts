/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InvoiceLineItem } from './InvoiceLineItem';
import {
    InvoiceLineItemFromJSON,
    InvoiceLineItemFromJSONTyped,
    InvoiceLineItemToJSON,
} from './InvoiceLineItem';

/**
 * The Invoice object represents an itemized record of goods and/or services sold to a customer.
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    id?: string;
    /**
     * Whether the invoice is an accounts receivable or accounts payable
     *  If type is accounts_payable, the invoice is a bill. If type is
     *  accounts_receivable, it is an invoice. Possible values include: ACCOUNTS_RECEIVABLE, ACCOUNTS_PAYABLE.
     * @type {string}
     * @memberof Invoice
     */
    type?: string;
    /**
     * The invoice's contact.
     * @type {string}
     * @memberof Invoice
     */
    contact?: string;
    /**
     * The invoice's number.
     * @type {string}
     * @memberof Invoice
     */
    number?: string;
    /**
     * The invoice's issue date.
     * @type {Date}
     * @memberof Invoice
     */
    issueDate?: Date;
    /**
     * The invoice's due date.
     * @type {Date}
     * @memberof Invoice
     */
    dueDate?: Date;
    /**
     * The invoice's paid date.
     * @type {Date}
     * @memberof Invoice
     */
    paidOnDate?: Date;
    /**
     * The invoice's private note.
     * @type {string}
     * @memberof Invoice
     */
    memo?: string;
    /**
     * The company the invoice belongs to.
     * @type {string}
     * @memberof Invoice
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    currency?: string;
    /**
     * The invoice's exchange rate.
     * @type {string}
     * @memberof Invoice
     */
    exchangeRate?: string;
    /**
     * The total discounts applied to the total cost.
     * @type {number}
     * @memberof Invoice
     */
    totalDiscount?: number;
    /**
     * The total amount being paid before taxes.
     * @type {number}
     * @memberof Invoice
     */
    subTotal?: number;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    status?: string;
    /**
     * The total amount being paid in taxes.
     * @type {number}
     * @memberof Invoice
     */
    totalTaxAmount?: number;
    /**
     * The invoice's total amount.
     * @type {number}
     * @memberof Invoice
     */
    totalAmount?: number;
    /**
     * The invoice's remaining balance.
     * @type {number}
     * @memberof Invoice
     */
    balance?: number;
    /**
     * When the third party's invoice entry was updated.
     * @type {Date}
     * @memberof Invoice
     */
    remoteUpdatedAt?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof Invoice
     */
    trackingCategories?: Array<string>;
    /**
     * Array of Payment object IDs.
     * @type {Array<string>}
     * @memberof Invoice
     */
    payments?: Array<string>;
    /**
     * 
     * @type {Array<InvoiceLineItem>}
     * @memberof Invoice
     */
    lineItems?: Array<InvoiceLineItem>;
    /**
     * 
     * @type {boolean}
     * @memberof Invoice
     */
    remoteWasDeleted?: boolean;
    /**
     * The accounting period that the Invoice was generated in.
     * @type {string}
     * @memberof Invoice
     */
    accountingPeriod?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Invoice
     */
    purchaseOrders?: Array<string>;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Invoice
     */
    remoteId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    mergeRecordId?: string;
}

/**
 * Check if a given object implements the Invoice interface.
 */
export function instanceOfInvoice(value: object): boolean {
    return true;
}

export function InvoiceFromJSON(json: any): Invoice {
    return InvoiceFromJSONTyped(json, false);
}

export function InvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invoice {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'contact': json['contact'] == null ? undefined : json['contact'],
        'number': json['number'] == null ? undefined : json['number'],
        'issueDate': json['issueDate'] == null ? undefined : (new Date(json['issueDate'])),
        'dueDate': json['dueDate'] == null ? undefined : (new Date(json['dueDate'])),
        'paidOnDate': json['paidOnDate'] == null ? undefined : (new Date(json['paidOnDate'])),
        'memo': json['memo'] == null ? undefined : json['memo'],
        'company': json['company'] == null ? undefined : json['company'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'exchangeRate': json['exchangeRate'] == null ? undefined : json['exchangeRate'],
        'totalDiscount': json['totalDiscount'] == null ? undefined : json['totalDiscount'],
        'subTotal': json['subTotal'] == null ? undefined : json['subTotal'],
        'status': json['status'] == null ? undefined : json['status'],
        'totalTaxAmount': json['totalTaxAmount'] == null ? undefined : json['totalTaxAmount'],
        'totalAmount': json['totalAmount'] == null ? undefined : json['totalAmount'],
        'balance': json['balance'] == null ? undefined : json['balance'],
        'remoteUpdatedAt': json['remoteUpdatedAt'] == null ? undefined : (new Date(json['remoteUpdatedAt'])),
        'trackingCategories': json['trackingCategories'] == null ? undefined : json['trackingCategories'],
        'payments': json['payments'] == null ? undefined : json['payments'],
        'lineItems': json['lineItems'] == null ? undefined : ((json['lineItems'] as Array<any>).map(InvoiceLineItemFromJSON)),
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'accountingPeriod': json['accountingPeriod'] == null ? undefined : json['accountingPeriod'],
        'purchaseOrders': json['purchaseOrders'] == null ? undefined : json['purchaseOrders'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'mergeRecordId': json['mergeRecordId'] == null ? undefined : json['mergeRecordId'],
    };
}

export function InvoiceToJSON(value?: Invoice | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'type': value['type'],
        'contact': value['contact'],
        'number': value['number'],
        'issueDate': value['issueDate'] == null ? undefined : ((value['issueDate']).toISOString()),
        'dueDate': value['dueDate'] == null ? undefined : ((value['dueDate']).toISOString()),
        'paidOnDate': value['paidOnDate'] == null ? undefined : ((value['paidOnDate']).toISOString()),
        'memo': value['memo'],
        'company': value['company'],
        'currency': value['currency'],
        'exchangeRate': value['exchangeRate'],
        'totalDiscount': value['totalDiscount'],
        'subTotal': value['subTotal'],
        'status': value['status'],
        'totalTaxAmount': value['totalTaxAmount'],
        'totalAmount': value['totalAmount'],
        'balance': value['balance'],
        'remoteUpdatedAt': value['remoteUpdatedAt'] == null ? undefined : ((value['remoteUpdatedAt']).toISOString()),
        'trackingCategories': value['trackingCategories'],
        'payments': value['payments'],
        'lineItems': value['lineItems'] == null ? undefined : ((value['lineItems'] as Array<any>).map(InvoiceLineItemToJSON)),
        'remoteWasDeleted': value['remoteWasDeleted'],
        'accountingPeriod': value['accountingPeriod'],
        'purchaseOrders': value['purchaseOrders'],
        'remoteId': value['remoteId'],
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'mergeRecordId': value['mergeRecordId'],
    };
}

