/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InvoiceLineItem } from './InvoiceLineItem';
import {
    InvoiceLineItemFromJSON,
    InvoiceLineItemFromJSONTyped,
    InvoiceLineItemToJSON,
} from './InvoiceLineItem';

/**
 * The Invoice object represents an itemized record of goods and/or services sold to a customer.
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    id?: string;
    /**
     * Whether the invoice is an accounts receivable or accounts payable
     *  If type is accounts_payable, the invoice is a bill. If type is
     *  accounts_receivable, it is an invoice. Possible values include: ACCOUNTS_RECEIVABLE, ACCOUNTS_PAYABLE.
     * @type {string}
     * @memberof Invoice
     */
    type?: string;
    /**
     * The invoice's contact.
     * @type {string}
     * @memberof Invoice
     */
    contact?: string;
    /**
     * The invoice's number.
     * @type {string}
     * @memberof Invoice
     */
    number?: string;
    /**
     * The invoice's issue date.
     * @type {Date}
     * @memberof Invoice
     */
    issueDate?: Date;
    /**
     * The invoice's due date.
     * @type {Date}
     * @memberof Invoice
     */
    dueDate?: Date;
    /**
     * The invoice's paid date.
     * @type {Date}
     * @memberof Invoice
     */
    paidOnDate?: Date;
    /**
     * The invoice's private note.
     * @type {string}
     * @memberof Invoice
     */
    memo?: string;
    /**
     * The company the invoice belongs to.
     * @type {string}
     * @memberof Invoice
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    currency?: string;
    /**
     * The invoice's exchange rate.
     * @type {string}
     * @memberof Invoice
     */
    exchangeRate?: string;
    /**
     * The total discounts applied to the total cost.
     * @type {number}
     * @memberof Invoice
     */
    totalDiscount?: number;
    /**
     * The total amount being paid before taxes.
     * @type {number}
     * @memberof Invoice
     */
    subTotal?: number;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    status?: string;
    /**
     * The total amount being paid in taxes.
     * @type {number}
     * @memberof Invoice
     */
    totalTaxAmount?: number;
    /**
     * The invoice's total amount.
     * @type {number}
     * @memberof Invoice
     */
    totalAmount?: number;
    /**
     * The invoice's remaining balance.
     * @type {number}
     * @memberof Invoice
     */
    balance?: number;
    /**
     * When the third party's invoice entry was updated.
     * @type {Date}
     * @memberof Invoice
     */
    remoteUpdatedAt?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof Invoice
     */
    trackingCategories?: Array<string>;
    /**
     * Array of Payment object IDs.
     * @type {Array<string>}
     * @memberof Invoice
     */
    payments?: Array<string>;
    /**
     * 
     * @type {Array<InvoiceLineItem>}
     * @memberof Invoice
     */
    lineItems?: Array<InvoiceLineItem>;
    /**
     * 
     * @type {boolean}
     * @memberof Invoice
     */
    remoteWasDeleted?: boolean;
    /**
     * The accounting period that the Invoice was generated in.
     * @type {string}
     * @memberof Invoice
     */
    accountingPeriod?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Invoice
     */
    purchaseOrders?: Array<string>;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Invoice
     */
    remoteId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    mergeRecordId?: string;
}

/**
 * Check if a given object implements the Invoice interface.
 */
export function instanceOfInvoice(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InvoiceFromJSON(json: any): Invoice {
    return InvoiceFromJSONTyped(json, false);
}

export function InvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invoice {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'contact': !exists(json, 'contact') ? undefined : json['contact'],
        'number': !exists(json, 'number') ? undefined : json['number'],
        'issueDate': !exists(json, 'issueDate') ? undefined : (new Date(json['issueDate'])),
        'dueDate': !exists(json, 'dueDate') ? undefined : (new Date(json['dueDate'])),
        'paidOnDate': !exists(json, 'paidOnDate') ? undefined : (new Date(json['paidOnDate'])),
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'exchangeRate': !exists(json, 'exchangeRate') ? undefined : json['exchangeRate'],
        'totalDiscount': !exists(json, 'totalDiscount') ? undefined : json['totalDiscount'],
        'subTotal': !exists(json, 'subTotal') ? undefined : json['subTotal'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'totalTaxAmount': !exists(json, 'totalTaxAmount') ? undefined : json['totalTaxAmount'],
        'totalAmount': !exists(json, 'totalAmount') ? undefined : json['totalAmount'],
        'balance': !exists(json, 'balance') ? undefined : json['balance'],
        'remoteUpdatedAt': !exists(json, 'remoteUpdatedAt') ? undefined : (new Date(json['remoteUpdatedAt'])),
        'trackingCategories': !exists(json, 'trackingCategories') ? undefined : json['trackingCategories'],
        'payments': !exists(json, 'payments') ? undefined : json['payments'],
        'lineItems': !exists(json, 'lineItems') ? undefined : ((json['lineItems'] as Array<any>).map(InvoiceLineItemFromJSON)),
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : json['remoteWasDeleted'],
        'accountingPeriod': !exists(json, 'accountingPeriod') ? undefined : json['accountingPeriod'],
        'purchaseOrders': !exists(json, 'purchaseOrders') ? undefined : json['purchaseOrders'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'mergeRecordId': !exists(json, 'mergeRecordId') ? undefined : json['mergeRecordId'],
    };
}

export function InvoiceToJSON(value?: Invoice | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'contact': value.contact,
        'number': value.number,
        'issueDate': value.issueDate === undefined ? undefined : (value.issueDate.toISOString()),
        'dueDate': value.dueDate === undefined ? undefined : (value.dueDate.toISOString()),
        'paidOnDate': value.paidOnDate === undefined ? undefined : (value.paidOnDate.toISOString()),
        'memo': value.memo,
        'company': value.company,
        'currency': value.currency,
        'exchangeRate': value.exchangeRate,
        'totalDiscount': value.totalDiscount,
        'subTotal': value.subTotal,
        'status': value.status,
        'totalTaxAmount': value.totalTaxAmount,
        'totalAmount': value.totalAmount,
        'balance': value.balance,
        'remoteUpdatedAt': value.remoteUpdatedAt === undefined ? undefined : (value.remoteUpdatedAt.toISOString()),
        'trackingCategories': value.trackingCategories,
        'payments': value.payments,
        'lineItems': value.lineItems === undefined ? undefined : ((value.lineItems as Array<any>).map(InvoiceLineItemToJSON)),
        'remoteWasDeleted': value.remoteWasDeleted,
        'accountingPeriod': value.accountingPeriod,
        'purchaseOrders': value.purchaseOrders,
        'remoteId': value.remoteId,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'mergeRecordId': value.mergeRecordId,
    };
}

