/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CompanyAddress } from './CompanyAddress';
import {
    CompanyAddressFromJSON,
    CompanyAddressFromJSONTyped,
    CompanyAddressToJSON,
} from './CompanyAddress';
import type { PurchaseOrderLineItem } from './PurchaseOrderLineItem';
import {
    PurchaseOrderLineItemFromJSON,
    PurchaseOrderLineItemFromJSONTyped,
    PurchaseOrderLineItemToJSON,
} from './PurchaseOrderLineItem';

/**
 * The PurchaseOrder object is a record of request for a product or service between a buyer and seller.
 * @export
 * @interface PurchaseOrder
 */
export interface PurchaseOrder {
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrder
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrder
     */
    mergeRecordId?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrder
     */
    status?: string;
    /**
     * The purchase order's issue date.
     * @type {Date}
     * @memberof PurchaseOrder
     */
    issueDate?: Date;
    /**
     * The human-readable number of the purchase order.
     * @type {string}
     * @memberof PurchaseOrder
     */
    purchaseOrderNumber?: string;
    /**
     * The purchase order's delivery date.
     * @type {Date}
     * @memberof PurchaseOrder
     */
    deliveryDate?: Date;
    /**
     * 
     * @type {CompanyAddress}
     * @memberof PurchaseOrder
     */
    deliveryAddress?: CompanyAddress;
    /**
     * The contact making the purchase order.
     * @type {string}
     * @memberof PurchaseOrder
     */
    customer?: string;
    /**
     * The party fulfilling the purchase order.
     * @type {string}
     * @memberof PurchaseOrder
     */
    vendor?: string;
    /**
     * A memo attached to the purchase order.
     * @type {string}
     * @memberof PurchaseOrder
     */
    memo?: string;
    /**
     * The company the purchase order belongs to.
     * @type {string}
     * @memberof PurchaseOrder
     */
    company?: string;
    /**
     * The purchase order's total amount.
     * 
     * Might be better as double.
     * @type {number}
     * @memberof PurchaseOrder
     */
    totalAmount?: number;
    /**
     * The purchase order's currency.
     * @type {string}
     * @memberof PurchaseOrder
     */
    currency?: string;
    /**
     * Assuming string, but might be better as float or double.
     * @type {string}
     * @memberof PurchaseOrder
     */
    exchangeRate?: string;
    /**
     * 
     * @type {Array<PurchaseOrderLineItem>}
     * @memberof PurchaseOrder
     */
    lineItems?: Array<PurchaseOrderLineItem>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PurchaseOrder
     */
    trackingCategories?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseOrder
     */
    remoteCreatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseOrder
     */
    remoteUpdatedAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof PurchaseOrder
     */
    remoteWasDeleted?: boolean;
    /**
     * The accounting period that the PurchaseOrder was generated in.
     * @type {string}
     * @memberof PurchaseOrder
     */
    accountingPeriod?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrder
     */
    remoteId?: string;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseOrder
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseOrder
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the PurchaseOrder interface.
 */
export function instanceOfPurchaseOrder(value: object): boolean {
    return true;
}

export function PurchaseOrderFromJSON(json: any): PurchaseOrder {
    return PurchaseOrderFromJSONTyped(json, false);
}

export function PurchaseOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): PurchaseOrder {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'mergeRecordId': json['mergeRecordId'] == null ? undefined : json['mergeRecordId'],
        'status': json['status'] == null ? undefined : json['status'],
        'issueDate': json['issueDate'] == null ? undefined : (new Date(json['issueDate'])),
        'purchaseOrderNumber': json['purchaseOrderNumber'] == null ? undefined : json['purchaseOrderNumber'],
        'deliveryDate': json['deliveryDate'] == null ? undefined : (new Date(json['deliveryDate'])),
        'deliveryAddress': json['deliveryAddress'] == null ? undefined : CompanyAddressFromJSON(json['deliveryAddress']),
        'customer': json['customer'] == null ? undefined : json['customer'],
        'vendor': json['vendor'] == null ? undefined : json['vendor'],
        'memo': json['memo'] == null ? undefined : json['memo'],
        'company': json['company'] == null ? undefined : json['company'],
        'totalAmount': json['totalAmount'] == null ? undefined : json['totalAmount'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'exchangeRate': json['exchangeRate'] == null ? undefined : json['exchangeRate'],
        'lineItems': json['lineItems'] == null ? undefined : ((json['lineItems'] as Array<any>).map(PurchaseOrderLineItemFromJSON)),
        'trackingCategories': json['trackingCategories'] == null ? undefined : json['trackingCategories'],
        'remoteCreatedAt': json['remoteCreatedAt'] == null ? undefined : (new Date(json['remoteCreatedAt'])),
        'remoteUpdatedAt': json['remoteUpdatedAt'] == null ? undefined : (new Date(json['remoteUpdatedAt'])),
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'accountingPeriod': json['accountingPeriod'] == null ? undefined : json['accountingPeriod'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
    };
}

export function PurchaseOrderToJSON(value?: PurchaseOrder | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'mergeRecordId': value['mergeRecordId'],
        'status': value['status'],
        'issueDate': value['issueDate'] == null ? undefined : ((value['issueDate']).toISOString()),
        'purchaseOrderNumber': value['purchaseOrderNumber'],
        'deliveryDate': value['deliveryDate'] == null ? undefined : ((value['deliveryDate']).toISOString()),
        'deliveryAddress': CompanyAddressToJSON(value['deliveryAddress']),
        'customer': value['customer'],
        'vendor': value['vendor'],
        'memo': value['memo'],
        'company': value['company'],
        'totalAmount': value['totalAmount'],
        'currency': value['currency'],
        'exchangeRate': value['exchangeRate'],
        'lineItems': value['lineItems'] == null ? undefined : ((value['lineItems'] as Array<any>).map(PurchaseOrderLineItemToJSON)),
        'trackingCategories': value['trackingCategories'],
        'remoteCreatedAt': value['remoteCreatedAt'] == null ? undefined : ((value['remoteCreatedAt']).toISOString()),
        'remoteUpdatedAt': value['remoteUpdatedAt'] == null ? undefined : ((value['remoteUpdatedAt']).toISOString()),
        'remoteWasDeleted': value['remoteWasDeleted'],
        'accountingPeriod': value['accountingPeriod'],
        'remoteId': value['remoteId'],
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
    };
}

