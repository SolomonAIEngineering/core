/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CompanyAddress } from './CompanyAddress';
import {
    CompanyAddressFromJSON,
    CompanyAddressFromJSONTyped,
    CompanyAddressToJSON,
} from './CompanyAddress';
import type { PurchaseOrderLineItem } from './PurchaseOrderLineItem';
import {
    PurchaseOrderLineItemFromJSON,
    PurchaseOrderLineItemFromJSONTyped,
    PurchaseOrderLineItemToJSON,
} from './PurchaseOrderLineItem';

/**
 * The PurchaseOrder object is a record of request for a product or service between a buyer and seller.
 * @export
 * @interface PurchaseOrder
 */
export interface PurchaseOrder {
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrder
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrder
     */
    mergeRecordId?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrder
     */
    status?: string;
    /**
     * The purchase order's issue date.
     * @type {Date}
     * @memberof PurchaseOrder
     */
    issueDate?: Date;
    /**
     * The human-readable number of the purchase order.
     * @type {string}
     * @memberof PurchaseOrder
     */
    purchaseOrderNumber?: string;
    /**
     * The purchase order's delivery date.
     * @type {Date}
     * @memberof PurchaseOrder
     */
    deliveryDate?: Date;
    /**
     * 
     * @type {CompanyAddress}
     * @memberof PurchaseOrder
     */
    deliveryAddress?: CompanyAddress;
    /**
     * The contact making the purchase order.
     * @type {string}
     * @memberof PurchaseOrder
     */
    customer?: string;
    /**
     * The party fulfilling the purchase order.
     * @type {string}
     * @memberof PurchaseOrder
     */
    vendor?: string;
    /**
     * A memo attached to the purchase order.
     * @type {string}
     * @memberof PurchaseOrder
     */
    memo?: string;
    /**
     * The company the purchase order belongs to.
     * @type {string}
     * @memberof PurchaseOrder
     */
    company?: string;
    /**
     * The purchase order's total amount.
     * 
     * Might be better as double.
     * @type {number}
     * @memberof PurchaseOrder
     */
    totalAmount?: number;
    /**
     * The purchase order's currency.
     * @type {string}
     * @memberof PurchaseOrder
     */
    currency?: string;
    /**
     * Assuming string, but might be better as float or double.
     * @type {string}
     * @memberof PurchaseOrder
     */
    exchangeRate?: string;
    /**
     * 
     * @type {Array<PurchaseOrderLineItem>}
     * @memberof PurchaseOrder
     */
    lineItems?: Array<PurchaseOrderLineItem>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PurchaseOrder
     */
    trackingCategories?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseOrder
     */
    remoteCreatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseOrder
     */
    remoteUpdatedAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof PurchaseOrder
     */
    remoteWasDeleted?: boolean;
    /**
     * The accounting period that the PurchaseOrder was generated in.
     * @type {string}
     * @memberof PurchaseOrder
     */
    accountingPeriod?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrder
     */
    remoteId?: string;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseOrder
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PurchaseOrder
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the PurchaseOrder interface.
 */
export function instanceOfPurchaseOrder(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PurchaseOrderFromJSON(json: any): PurchaseOrder {
    return PurchaseOrderFromJSONTyped(json, false);
}

export function PurchaseOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): PurchaseOrder {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'mergeRecordId': !exists(json, 'mergeRecordId') ? undefined : json['mergeRecordId'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'issueDate': !exists(json, 'issueDate') ? undefined : (new Date(json['issueDate'])),
        'purchaseOrderNumber': !exists(json, 'purchaseOrderNumber') ? undefined : json['purchaseOrderNumber'],
        'deliveryDate': !exists(json, 'deliveryDate') ? undefined : (new Date(json['deliveryDate'])),
        'deliveryAddress': !exists(json, 'deliveryAddress') ? undefined : CompanyAddressFromJSON(json['deliveryAddress']),
        'customer': !exists(json, 'customer') ? undefined : json['customer'],
        'vendor': !exists(json, 'vendor') ? undefined : json['vendor'],
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'totalAmount': !exists(json, 'totalAmount') ? undefined : json['totalAmount'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'exchangeRate': !exists(json, 'exchangeRate') ? undefined : json['exchangeRate'],
        'lineItems': !exists(json, 'lineItems') ? undefined : ((json['lineItems'] as Array<any>).map(PurchaseOrderLineItemFromJSON)),
        'trackingCategories': !exists(json, 'trackingCategories') ? undefined : json['trackingCategories'],
        'remoteCreatedAt': !exists(json, 'remoteCreatedAt') ? undefined : (new Date(json['remoteCreatedAt'])),
        'remoteUpdatedAt': !exists(json, 'remoteUpdatedAt') ? undefined : (new Date(json['remoteUpdatedAt'])),
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : json['remoteWasDeleted'],
        'accountingPeriod': !exists(json, 'accountingPeriod') ? undefined : json['accountingPeriod'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
    };
}

export function PurchaseOrderToJSON(value?: PurchaseOrder | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'mergeRecordId': value.mergeRecordId,
        'status': value.status,
        'issueDate': value.issueDate === undefined ? undefined : (value.issueDate.toISOString()),
        'purchaseOrderNumber': value.purchaseOrderNumber,
        'deliveryDate': value.deliveryDate === undefined ? undefined : (value.deliveryDate.toISOString()),
        'deliveryAddress': CompanyAddressToJSON(value.deliveryAddress),
        'customer': value.customer,
        'vendor': value.vendor,
        'memo': value.memo,
        'company': value.company,
        'totalAmount': value.totalAmount,
        'currency': value.currency,
        'exchangeRate': value.exchangeRate,
        'lineItems': value.lineItems === undefined ? undefined : ((value.lineItems as Array<any>).map(PurchaseOrderLineItemToJSON)),
        'trackingCategories': value.trackingCategories,
        'remoteCreatedAt': value.remoteCreatedAt === undefined ? undefined : (value.remoteCreatedAt.toISOString()),
        'remoteUpdatedAt': value.remoteUpdatedAt === undefined ? undefined : (value.remoteUpdatedAt.toISOString()),
        'remoteWasDeleted': value.remoteWasDeleted,
        'accountingPeriod': value.accountingPeriod,
        'remoteId': value.remoteId,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

