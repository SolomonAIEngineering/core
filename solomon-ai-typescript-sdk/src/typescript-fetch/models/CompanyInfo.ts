/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CompanyAddress } from './CompanyAddress';
import {
    CompanyAddressFromJSON,
    CompanyAddressFromJSONTyped,
    CompanyAddressToJSON,
} from './CompanyAddress';

/**
 * The CompanyInfo object is used to represent a company's information.
 * @export
 * @interface CompanyInfo
 */
export interface CompanyInfo {
    /**
     * 
     * @type {string}
     * @memberof CompanyInfo
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof CompanyInfo
     */
    remoteId?: string;
    /**
     * The company's name.
     * @type {string}
     * @memberof CompanyInfo
     */
    name?: string;
    /**
     * The company's legal name.
     * @type {string}
     * @memberof CompanyInfo
     */
    legalName?: string;
    /**
     * The company's tax number.
     * @type {string}
     * @memberof CompanyInfo
     */
    taxNumber?: string;
    /**
     * The company's fiscal year end month.
     * @type {number}
     * @memberof CompanyInfo
     */
    fiscalYearEndMonth?: number;
    /**
     * The company's fiscal year end day.
     * @type {number}
     * @memberof CompanyInfo
     */
    fiscalYearEndDay?: number;
    /**
     * The currency set in the company's accounting platform.
     * @type {string}
     * @memberof CompanyInfo
     */
    currency?: string;
    /**
     * When the third party's company was created.
     * 
     * Consider using google.protobuf.Timestamp
     * @type {Date}
     * @memberof CompanyInfo
     */
    remoteCreatedAt?: Date;
    /**
     * The company's urls.
     * @type {Array<string>}
     * @memberof CompanyInfo
     */
    urls?: Array<string>;
    /**
     * 
     * @type {Array<CompanyAddress>}
     * @memberof CompanyInfo
     */
    addresses?: Array<CompanyAddress>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyInfo
     */
    phoneNumbers?: Array<string>;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof CompanyInfo
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof CompanyInfo
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof CompanyInfo
     */
    mergeRecordId?: string;
}

/**
 * Check if a given object implements the CompanyInfo interface.
 */
export function instanceOfCompanyInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CompanyInfoFromJSON(json: any): CompanyInfo {
    return CompanyInfoFromJSONTyped(json, false);
}

export function CompanyInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompanyInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'legalName': !exists(json, 'legalName') ? undefined : json['legalName'],
        'taxNumber': !exists(json, 'taxNumber') ? undefined : json['taxNumber'],
        'fiscalYearEndMonth': !exists(json, 'fiscalYearEndMonth') ? undefined : json['fiscalYearEndMonth'],
        'fiscalYearEndDay': !exists(json, 'fiscalYearEndDay') ? undefined : json['fiscalYearEndDay'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'remoteCreatedAt': !exists(json, 'remoteCreatedAt') ? undefined : (new Date(json['remoteCreatedAt'])),
        'urls': !exists(json, 'urls') ? undefined : json['urls'],
        'addresses': !exists(json, 'addresses') ? undefined : ((json['addresses'] as Array<any>).map(CompanyAddressFromJSON)),
        'phoneNumbers': !exists(json, 'phoneNumbers') ? undefined : json['phoneNumbers'],
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : json['remoteWasDeleted'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'mergeRecordId': !exists(json, 'mergeRecordId') ? undefined : json['mergeRecordId'],
    };
}

export function CompanyInfoToJSON(value?: CompanyInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'remoteId': value.remoteId,
        'name': value.name,
        'legalName': value.legalName,
        'taxNumber': value.taxNumber,
        'fiscalYearEndMonth': value.fiscalYearEndMonth,
        'fiscalYearEndDay': value.fiscalYearEndDay,
        'currency': value.currency,
        'remoteCreatedAt': value.remoteCreatedAt === undefined ? undefined : (value.remoteCreatedAt.toISOString()),
        'urls': value.urls,
        'addresses': value.addresses === undefined ? undefined : ((value.addresses as Array<any>).map(CompanyAddressToJSON)),
        'phoneNumbers': value.phoneNumbers,
        'remoteWasDeleted': value.remoteWasDeleted,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'mergeRecordId': value.mergeRecordId,
    };
}

