/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Topic } from './Topic';
import {
    TopicFromJSON,
    TopicFromJSONTyped,
    TopicToJSON,
} from './Topic';

/**
 * 
 * @export
 * @interface CommunityProfile
 */
export interface CommunityProfile {
    /**
     * 
     * @type {string}
     * @memberof CommunityProfile
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CommunityProfile
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CommunityProfile
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof CommunityProfile
     */
    _private: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CommunityProfile
     */
    visible: boolean;
    /**
     * 
     * @type {string}
     * @memberof CommunityProfile
     */
    followers: string;
    /**
     * 
     * @type {string}
     * @memberof CommunityProfile
     */
    communityRules: string;
    /**
     * 
     * @type {Array<Topic>}
     * @memberof CommunityProfile
     */
    topics?: Array<Topic>;
    /**
     * 
     * @type {string}
     * @memberof CommunityProfile
     */
    notificationFeedTimelineId: string;
    /**
     * 
     * @type {string}
     * @memberof CommunityProfile
     */
    personalFeedTimelineId: string;
    /**
     * 
     * @type {string}
     * @memberof CommunityProfile
     */
    newsFeedTimelineId: string;
    /**
     * 
     * @type {string}
     * @memberof CommunityProfile
     */
    profileImageUrl: string;
    /**
     * 
     * @type {string}
     * @memberof CommunityProfile
     */
    algoliaId: string;
}

/**
 * Check if a given object implements the CommunityProfile interface.
 */
export function instanceOfCommunityProfile(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "_private" in value;
    isInstance = isInstance && "visible" in value;
    isInstance = isInstance && "followers" in value;
    isInstance = isInstance && "communityRules" in value;
    isInstance = isInstance && "notificationFeedTimelineId" in value;
    isInstance = isInstance && "personalFeedTimelineId" in value;
    isInstance = isInstance && "newsFeedTimelineId" in value;
    isInstance = isInstance && "profileImageUrl" in value;
    isInstance = isInstance && "algoliaId" in value;

    return isInstance;
}

export function CommunityProfileFromJSON(json: any): CommunityProfile {
    return CommunityProfileFromJSONTyped(json, false);
}

export function CommunityProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommunityProfile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'description': json['description'],
        '_private': json['private'],
        'visible': json['visible'],
        'followers': json['followers'],
        'communityRules': json['communityRules'],
        'topics': !exists(json, 'topics') ? undefined : ((json['topics'] as Array<any>).map(TopicFromJSON)),
        'notificationFeedTimelineId': json['notificationFeedTimelineId'],
        'personalFeedTimelineId': json['personalFeedTimelineId'],
        'newsFeedTimelineId': json['newsFeedTimelineId'],
        'profileImageUrl': json['profileImageUrl'],
        'algoliaId': json['algoliaId'],
    };
}

export function CommunityProfileToJSON(value?: CommunityProfile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'private': value._private,
        'visible': value.visible,
        'followers': value.followers,
        'communityRules': value.communityRules,
        'topics': value.topics === undefined ? undefined : ((value.topics as Array<any>).map(TopicToJSON)),
        'notificationFeedTimelineId': value.notificationFeedTimelineId,
        'personalFeedTimelineId': value.personalFeedTimelineId,
        'newsFeedTimelineId': value.newsFeedTimelineId,
        'profileImageUrl': value.profileImageUrl,
        'algoliaId': value.algoliaId,
    };
}

