/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The AccountingAttachment object is used to represent a company's attachments.
 * @export
 * @interface AccountingAttachment
 */
export interface AccountingAttachment {
    /**
     * 
     * @type {string}
     * @memberof AccountingAttachment
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof AccountingAttachment
     */
    remoteId?: string;
    /**
     * The attachment's name.
     * @type {string}
     * @memberof AccountingAttachment
     */
    fileName?: string;
    /**
     * The attachment's url.
     * @type {string}
     * @memberof AccountingAttachment
     */
    fileUrl?: string;
    /**
     * The company the accounting attachment belongs to.
     * @type {string}
     * @memberof AccountingAttachment
     */
    company?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountingAttachment
     */
    remoteWasDeleted?: boolean;
    /**
     * Consider using google.protobuf.Timestamp if precise time manipulation is required
     * @type {Date}
     * @memberof AccountingAttachment
     */
    modifiedAt?: Date;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof AccountingAttachment
     */
    mergeRecordId?: string;
    /**
     * 
     * @type {Date}
     * @memberof AccountingAttachment
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the AccountingAttachment interface.
 */
export function instanceOfAccountingAttachment(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AccountingAttachmentFromJSON(json: any): AccountingAttachment {
    return AccountingAttachmentFromJSONTyped(json, false);
}

export function AccountingAttachmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountingAttachment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'fileName': !exists(json, 'fileName') ? undefined : json['fileName'],
        'fileUrl': !exists(json, 'fileUrl') ? undefined : json['fileUrl'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : json['remoteWasDeleted'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'mergeRecordId': !exists(json, 'mergeRecordId') ? undefined : json['mergeRecordId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
    };
}

export function AccountingAttachmentToJSON(value?: AccountingAttachment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'remoteId': value.remoteId,
        'fileName': value.fileName,
        'fileUrl': value.fileUrl,
        'company': value.company,
        'remoteWasDeleted': value.remoteWasDeleted,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'mergeRecordId': value.mergeRecordId,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

