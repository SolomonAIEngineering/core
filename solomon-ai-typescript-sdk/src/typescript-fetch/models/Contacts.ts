/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The Contact object refers to either a supplier or a customer.
 * @export
 * @interface Contacts
 */
export interface Contacts {
    /**
     * 
     * @type {string}
     * @memberof Contacts
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Contacts
     */
    remoteId?: string;
    /**
     * The contact's name.
     * @type {string}
     * @memberof Contacts
     */
    name?: string;
    /**
     * Whether the contact is a supplier.
     * @type {boolean}
     * @memberof Contacts
     */
    isSupplier?: boolean;
    /**
     * Whether the contact is a customer.
     * @type {boolean}
     * @memberof Contacts
     */
    isCustomer?: boolean;
    /**
     * The contact's email address.
     * @type {string}
     * @memberof Contacts
     */
    emailAddress?: string;
    /**
     * The contact's tax number.
     * @type {string}
     * @memberof Contacts
     */
    taxNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Contacts
     */
    status?: string;
    /**
     * The currency the contact's transactions are in.
     * @type {string}
     * @memberof Contacts
     */
    currency?: string;
    /**
     * When the third party's contact was updated.
     * 
     * Consider using google.protobuf.Timestamp
     * @type {Date}
     * @memberof Contacts
     */
    remoteUpdatedAt?: Date;
    /**
     * The company the contact belongs to.
     * @type {string}
     * @memberof Contacts
     */
    company?: string;
    /**
     * Address object IDs for the given Contacts object.
     * 
     * These are IDs, not the Address structure itself
     * @type {Array<string>}
     * @memberof Contacts
     */
    addressesIds?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Contacts
     */
    phoneNumbers?: Array<string>;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof Contacts
     */
    remoteWasDeleted?: boolean;
    /**
     * Consider using google.protobuf.Timestamp
     * @type {Date}
     * @memberof Contacts
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Contacts
     */
    mergeRecordId?: string;
}

/**
 * Check if a given object implements the Contacts interface.
 */
export function instanceOfContacts(value: object): boolean {
    return true;
}

export function ContactsFromJSON(json: any): Contacts {
    return ContactsFromJSONTyped(json, false);
}

export function ContactsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Contacts {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'name': json['name'] == null ? undefined : json['name'],
        'isSupplier': json['isSupplier'] == null ? undefined : json['isSupplier'],
        'isCustomer': json['isCustomer'] == null ? undefined : json['isCustomer'],
        'emailAddress': json['emailAddress'] == null ? undefined : json['emailAddress'],
        'taxNumber': json['taxNumber'] == null ? undefined : json['taxNumber'],
        'status': json['status'] == null ? undefined : json['status'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'remoteUpdatedAt': json['remoteUpdatedAt'] == null ? undefined : (new Date(json['remoteUpdatedAt'])),
        'company': json['company'] == null ? undefined : json['company'],
        'addressesIds': json['addressesIds'] == null ? undefined : json['addressesIds'],
        'phoneNumbers': json['phoneNumbers'] == null ? undefined : json['phoneNumbers'],
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'mergeRecordId': json['mergeRecordId'] == null ? undefined : json['mergeRecordId'],
    };
}

export function ContactsToJSON(value?: Contacts | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'remoteId': value['remoteId'],
        'name': value['name'],
        'isSupplier': value['isSupplier'],
        'isCustomer': value['isCustomer'],
        'emailAddress': value['emailAddress'],
        'taxNumber': value['taxNumber'],
        'status': value['status'],
        'currency': value['currency'],
        'remoteUpdatedAt': value['remoteUpdatedAt'] == null ? undefined : ((value['remoteUpdatedAt']).toISOString()),
        'company': value['company'],
        'addressesIds': value['addressesIds'],
        'phoneNumbers': value['phoneNumbers'],
        'remoteWasDeleted': value['remoteWasDeleted'],
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'mergeRecordId': value['mergeRecordId'],
    };
}

