/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BusinessAccount } from './BusinessAccount';
import {
    BusinessAccountFromJSON,
    BusinessAccountFromJSONTyped,
    BusinessAccountToJSON,
} from './BusinessAccount';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
} from './Role';
import type { Tags } from './Tags';
import {
    TagsFromJSON,
    TagsFromJSONTyped,
    TagsToJSON,
} from './Tags';
import type { UserAccount } from './UserAccount';
import {
    UserAccountFromJSON,
    UserAccountFromJSONTyped,
    UserAccountToJSON,
} from './UserAccount';

/**
 * Team: represents a team within the context of solomon-ai.
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * Unique identifier for the team.
     * @type {string}
     * @memberof Team
     */
    id?: string;
    /**
     * Name of the team.
     * @type {string}
     * @memberof Team
     */
    name?: string;
    /**
     * Description of the team.
     * @type {string}
     * @memberof Team
     */
    description?: string;
    /**
     * Tags associated with the team.
     * @type {Array<Tags>}
     * @memberof Team
     */
    tags?: Array<Tags>;
    /**
     * 
     * @type {BusinessAccount}
     * @memberof Team
     */
    teamAdmin?: BusinessAccount;
    /**
     * Members of the team.
     * @type {Array<UserAccount>}
     * @memberof Team
     */
    memberUsersAccounts?: Array<UserAccount>;
    /**
     * Member business accounts of the team.
     * @type {Array<BusinessAccount>}
     * @memberof Team
     */
    memberBusinessAccounts?: Array<BusinessAccount>;
    /**
     * Timestamp for when the team was created.
     * @type {Date}
     * @memberof Team
     */
    createdAt?: Date;
    /**
     * Timestamp for when the team was last updated.
     * @type {Date}
     * @memberof Team
     */
    updatedAt?: Date;
    /**
     * 
     * @type {Array<Role>}
     * @memberof Team
     */
    roles?: Array<Role>;
}

/**
 * Check if a given object implements the Team interface.
 */
export function instanceOfTeam(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TeamFromJSON(json: any): Team {
    return TeamFromJSONTyped(json, false);
}

export function TeamFromJSONTyped(json: any, ignoreDiscriminator: boolean): Team {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagsFromJSON)),
        'teamAdmin': !exists(json, 'teamAdmin') ? undefined : BusinessAccountFromJSON(json['teamAdmin']),
        'memberUsersAccounts': !exists(json, 'memberUsersAccounts') ? undefined : ((json['memberUsersAccounts'] as Array<any>).map(UserAccountFromJSON)),
        'memberBusinessAccounts': !exists(json, 'memberBusinessAccounts') ? undefined : ((json['memberBusinessAccounts'] as Array<any>).map(BusinessAccountFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'roles': !exists(json, 'roles') ? undefined : ((json['roles'] as Array<any>).map(RoleFromJSON)),
    };
}

export function TeamToJSON(value?: Team | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagsToJSON)),
        'teamAdmin': BusinessAccountToJSON(value.teamAdmin),
        'memberUsersAccounts': value.memberUsersAccounts === undefined ? undefined : ((value.memberUsersAccounts as Array<any>).map(UserAccountToJSON)),
        'memberBusinessAccounts': value.memberBusinessAccounts === undefined ? undefined : ((value.memberBusinessAccounts as Array<any>).map(BusinessAccountToJSON)),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'roles': value.roles === undefined ? undefined : ((value.roles as Array<any>).map(RoleToJSON)),
    };
}

