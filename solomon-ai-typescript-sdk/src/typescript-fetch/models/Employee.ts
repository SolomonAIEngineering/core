/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BankInfo } from './BankInfo';
import {
    BankInfoFromJSON,
    BankInfoFromJSONTyped,
    BankInfoToJSON,
} from './BankInfo';
import type { Dependents } from './Dependents';
import {
    DependentsFromJSON,
    DependentsFromJSONTyped,
    DependentsToJSON,
} from './Dependents';
import type { EmployeTimeOffBalance } from './EmployeTimeOffBalance';
import {
    EmployeTimeOffBalanceFromJSON,
    EmployeTimeOffBalanceFromJSONTyped,
    EmployeTimeOffBalanceToJSON,
} from './EmployeTimeOffBalance';
import type { EmployeeBenefits } from './EmployeeBenefits';
import {
    EmployeeBenefitsFromJSON,
    EmployeeBenefitsFromJSONTyped,
    EmployeeBenefitsToJSON,
} from './EmployeeBenefits';
import type { EmployeeJobPositionAtCompany } from './EmployeeJobPositionAtCompany';
import {
    EmployeeJobPositionAtCompanyFromJSON,
    EmployeeJobPositionAtCompanyFromJSONTyped,
    EmployeeJobPositionAtCompanyToJSON,
} from './EmployeeJobPositionAtCompany';
import type { EmployeePayrollRun } from './EmployeePayrollRun';
import {
    EmployeePayrollRunFromJSON,
    EmployeePayrollRunFromJSONTyped,
    EmployeePayrollRunToJSON,
} from './EmployeePayrollRun';
import type { EmploymentStatus } from './EmploymentStatus';
import {
    EmploymentStatusFromJSON,
    EmploymentStatusFromJSONTyped,
    EmploymentStatusToJSON,
} from './EmploymentStatus';
import type { Ethnicity } from './Ethnicity';
import {
    EthnicityFromJSON,
    EthnicityFromJSONTyped,
    EthnicityToJSON,
} from './Ethnicity';
import type { Gender } from './Gender';
import {
    GenderFromJSON,
    GenderFromJSONTyped,
    GenderToJSON,
} from './Gender';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
} from './Group';
import type { LocationAddress } from './LocationAddress';
import {
    LocationAddressFromJSON,
    LocationAddressFromJSONTyped,
    LocationAddressToJSON,
} from './LocationAddress';
import type { MaritalStatus } from './MaritalStatus';
import {
    MaritalStatusFromJSON,
    MaritalStatusFromJSONTyped,
    MaritalStatusToJSON,
} from './MaritalStatus';

/**
 * The Employee object is used to represent any person who has been employed by a company.
 * @export
 * @interface Employee
 */
export interface Employee {
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Employee
     */
    remoteId?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    employeeNumber?: string;
    /**
     * The ID of the employee's company.
     * @type {string}
     * @memberof Employee
     */
    companyId?: string;
    /**
     * The employee's first name.
     * @type {string}
     * @memberof Employee
     */
    firstName?: string;
    /**
     * The employee's last name.
     * @type {string}
     * @memberof Employee
     */
    lastName?: string;
    /**
     * The employee's preferred name.
     * @type {string}
     * @memberof Employee
     */
    employeesPreferredName?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    displayFullName?: string;
    /**
     * The employee's username that appears in the remote UI.
     * @type {string}
     * @memberof Employee
     */
    employeeUserNameAsSeenInRemoteUi?: string;
    /**
     * The employee's work email.
     * @type {string}
     * @memberof Employee
     */
    workEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    personalEmail?: string;
    /**
     * The employee's mobile phone number.
     * @type {string}
     * @memberof Employee
     */
    mobilePhoneNumber?: string;
    /**
     * 
     * @type {Array<EmployeeJobPositionAtCompany>}
     * @memberof Employee
     */
    employments?: Array<EmployeeJobPositionAtCompany>;
    /**
     * UUID fields
     * @type {string}
     * @memberof Employee
     */
    employmentType?: string;
    /**
     * 
     * @type {LocationAddress}
     * @memberof Employee
     */
    homeLocation?: LocationAddress;
    /**
     * 
     * @type {LocationAddress}
     * @memberof Employee
     */
    workLocation?: LocationAddress;
    /**
     * 
     * @type {Employee}
     * @memberof Employee
     */
    manager?: Employee;
    /**
     * 
     * @type {Group}
     * @memberof Employee
     */
    group?: Group;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    ssn?: string;
    /**
     * 
     * @type {Gender}
     * @memberof Employee
     */
    gender?: Gender;
    /**
     * 
     * @type {Ethnicity}
     * @memberof Employee
     */
    ethnicity?: Ethnicity;
    /**
     * 
     * @type {MaritalStatus}
     * @memberof Employee
     */
    maritalStatus?: MaritalStatus;
    /**
     * The employee's date of birth.
     * 
     * Use string for ISO 8601 datetime
     * @type {string}
     * @memberof Employee
     */
    dateOfBirth?: string;
    /**
     * The date that the employee started working. 
     * If an employee was rehired, the most recent start date will be returned.
     * @type {Date}
     * @memberof Employee
     */
    startDate?: Date;
    /**
     * When the third party's employee was created.
     * @type {Date}
     * @memberof Employee
     */
    remoteCreatedAt?: Date;
    /**
     * 
     * @type {EmploymentStatus}
     * @memberof Employee
     */
    employmentStatus?: EmploymentStatus;
    /**
     * The employee's termination date.
     * @type {Date}
     * @memberof Employee
     */
    terminationDate?: Date;
    /**
     * The URL of the employee's avatar image.
     * @type {string}
     * @memberof Employee
     */
    avatar?: string;
    /**
     * 
     * @type {Array<BankInfo>}
     * @memberof Employee
     */
    bankAccounts?: Array<BankInfo>;
    /**
     * 
     * @type {Array<Dependents>}
     * @memberof Employee
     */
    dependents?: Array<Dependents>;
    /**
     * Represent an employee's pay statement for a specific payroll run.
     * @type {Array<EmployeePayrollRun>}
     * @memberof Employee
     */
    payrollRuns?: Array<EmployeePayrollRun>;
    /**
     * 
     * @type {EmployeTimeOffBalance}
     * @memberof Employee
     */
    payTimeOffBalance?: EmployeTimeOffBalance;
    /**
     * the benefits associated with the employee.
     * @type {Array<EmployeeBenefits>}
     * @memberof Employee
     */
    benefits?: Array<EmployeeBenefits>;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    mergeAccountId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Employee
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Employee
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Employee
     */
    remoteWasDeleted?: boolean;
}

/**
 * Check if a given object implements the Employee interface.
 */
export function instanceOfEmployee(value: object): boolean {
    return true;
}

export function EmployeeFromJSON(json: any): Employee {
    return EmployeeFromJSONTyped(json, false);
}

export function EmployeeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Employee {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'employeeNumber': json['employeeNumber'] == null ? undefined : json['employeeNumber'],
        'companyId': json['companyId'] == null ? undefined : json['companyId'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'employeesPreferredName': json['employeesPreferredName'] == null ? undefined : json['employeesPreferredName'],
        'displayFullName': json['displayFullName'] == null ? undefined : json['displayFullName'],
        'employeeUserNameAsSeenInRemoteUi': json['employeeUserNameAsSeenInRemoteUi'] == null ? undefined : json['employeeUserNameAsSeenInRemoteUi'],
        'workEmail': json['workEmail'] == null ? undefined : json['workEmail'],
        'personalEmail': json['personalEmail'] == null ? undefined : json['personalEmail'],
        'mobilePhoneNumber': json['mobilePhoneNumber'] == null ? undefined : json['mobilePhoneNumber'],
        'employments': json['employments'] == null ? undefined : ((json['employments'] as Array<any>).map(EmployeeJobPositionAtCompanyFromJSON)),
        'employmentType': json['employmentType'] == null ? undefined : json['employmentType'],
        'homeLocation': json['homeLocation'] == null ? undefined : LocationAddressFromJSON(json['homeLocation']),
        'workLocation': json['workLocation'] == null ? undefined : LocationAddressFromJSON(json['workLocation']),
        'manager': json['manager'] == null ? undefined : EmployeeFromJSON(json['manager']),
        'group': json['group'] == null ? undefined : GroupFromJSON(json['group']),
        'ssn': json['ssn'] == null ? undefined : json['ssn'],
        'gender': json['gender'] == null ? undefined : GenderFromJSON(json['gender']),
        'ethnicity': json['ethnicity'] == null ? undefined : EthnicityFromJSON(json['ethnicity']),
        'maritalStatus': json['maritalStatus'] == null ? undefined : MaritalStatusFromJSON(json['maritalStatus']),
        'dateOfBirth': json['dateOfBirth'] == null ? undefined : json['dateOfBirth'],
        'startDate': json['startDate'] == null ? undefined : (new Date(json['startDate'])),
        'remoteCreatedAt': json['remoteCreatedAt'] == null ? undefined : (new Date(json['remoteCreatedAt'])),
        'employmentStatus': json['employmentStatus'] == null ? undefined : EmploymentStatusFromJSON(json['employmentStatus']),
        'terminationDate': json['terminationDate'] == null ? undefined : (new Date(json['terminationDate'])),
        'avatar': json['avatar'] == null ? undefined : json['avatar'],
        'bankAccounts': json['bankAccounts'] == null ? undefined : ((json['bankAccounts'] as Array<any>).map(BankInfoFromJSON)),
        'dependents': json['dependents'] == null ? undefined : ((json['dependents'] as Array<any>).map(DependentsFromJSON)),
        'payrollRuns': json['payrollRuns'] == null ? undefined : ((json['payrollRuns'] as Array<any>).map(EmployeePayrollRunFromJSON)),
        'payTimeOffBalance': json['payTimeOffBalance'] == null ? undefined : EmployeTimeOffBalanceFromJSON(json['payTimeOffBalance']),
        'benefits': json['benefits'] == null ? undefined : ((json['benefits'] as Array<any>).map(EmployeeBenefitsFromJSON)),
        'mergeAccountId': json['mergeAccountId'] == null ? undefined : json['mergeAccountId'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
    };
}

export function EmployeeToJSON(value?: Employee | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'remoteId': value['remoteId'],
        'employeeNumber': value['employeeNumber'],
        'companyId': value['companyId'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'employeesPreferredName': value['employeesPreferredName'],
        'displayFullName': value['displayFullName'],
        'employeeUserNameAsSeenInRemoteUi': value['employeeUserNameAsSeenInRemoteUi'],
        'workEmail': value['workEmail'],
        'personalEmail': value['personalEmail'],
        'mobilePhoneNumber': value['mobilePhoneNumber'],
        'employments': value['employments'] == null ? undefined : ((value['employments'] as Array<any>).map(EmployeeJobPositionAtCompanyToJSON)),
        'employmentType': value['employmentType'],
        'homeLocation': LocationAddressToJSON(value['homeLocation']),
        'workLocation': LocationAddressToJSON(value['workLocation']),
        'manager': EmployeeToJSON(value['manager']),
        'group': GroupToJSON(value['group']),
        'ssn': value['ssn'],
        'gender': GenderToJSON(value['gender']),
        'ethnicity': EthnicityToJSON(value['ethnicity']),
        'maritalStatus': MaritalStatusToJSON(value['maritalStatus']),
        'dateOfBirth': value['dateOfBirth'],
        'startDate': value['startDate'] == null ? undefined : ((value['startDate']).toISOString()),
        'remoteCreatedAt': value['remoteCreatedAt'] == null ? undefined : ((value['remoteCreatedAt']).toISOString()),
        'employmentStatus': EmploymentStatusToJSON(value['employmentStatus']),
        'terminationDate': value['terminationDate'] == null ? undefined : ((value['terminationDate']).toISOString()),
        'avatar': value['avatar'],
        'bankAccounts': value['bankAccounts'] == null ? undefined : ((value['bankAccounts'] as Array<any>).map(BankInfoToJSON)),
        'dependents': value['dependents'] == null ? undefined : ((value['dependents'] as Array<any>).map(DependentsToJSON)),
        'payrollRuns': value['payrollRuns'] == null ? undefined : ((value['payrollRuns'] as Array<any>).map(EmployeePayrollRunToJSON)),
        'payTimeOffBalance': EmployeTimeOffBalanceToJSON(value['payTimeOffBalance']),
        'benefits': value['benefits'] == null ? undefined : ((value['benefits'] as Array<any>).map(EmployeeBenefitsToJSON)),
        'mergeAccountId': value['mergeAccountId'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'remoteWasDeleted': value['remoteWasDeleted'],
    };
}

