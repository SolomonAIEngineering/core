/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The Tax object is used to represent an array of the tax deductions for a given employee's payroll run.
 * @export
 * @interface Tax
 */
export interface Tax {
    /**
     * 
     * @type {string}
     * @memberof Tax
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Tax
     */
    remoteId?: string;
    /**
     * The tax's name.
     * @type {string}
     * @memberof Tax
     */
    name?: string;
    /**
     * The tax amount.
     * @type {number}
     * @memberof Tax
     */
    amount?: number;
    /**
     * Whether or not the employer is responsible for paying the tax.
     * @type {boolean}
     * @memberof Tax
     */
    employerTax?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Tax
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Tax
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Tax
     */
    modifiedAt?: Date;
    /**
     * The payroll being run.
     * @type {string}
     * @memberof Tax
     */
    payrollRunMergeAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof Tax
     */
    mergeAccountId?: string;
}

/**
 * Check if a given object implements the Tax interface.
 */
export function instanceOfTax(value: object): boolean {
    return true;
}

export function TaxFromJSON(json: any): Tax {
    return TaxFromJSONTyped(json, false);
}

export function TaxFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tax {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'name': json['name'] == null ? undefined : json['name'],
        'amount': json['amount'] == null ? undefined : json['amount'],
        'employerTax': json['employerTax'] == null ? undefined : json['employerTax'],
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'payrollRunMergeAccountId': json['payrollRunMergeAccountId'] == null ? undefined : json['payrollRunMergeAccountId'],
        'mergeAccountId': json['mergeAccountId'] == null ? undefined : json['mergeAccountId'],
    };
}

export function TaxToJSON(value?: Tax | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'remoteId': value['remoteId'],
        'name': value['name'],
        'amount': value['amount'],
        'employerTax': value['employerTax'],
        'remoteWasDeleted': value['remoteWasDeleted'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'payrollRunMergeAccountId': value['payrollRunMergeAccountId'],
        'mergeAccountId': value['mergeAccountId'],
    };
}

