/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountingAttachment } from './AccountingAttachment';
import {
    AccountingAttachmentFromJSON,
    AccountingAttachmentFromJSONTyped,
    AccountingAttachmentToJSON,
} from './AccountingAttachment';
import type { BalanceSheet } from './BalanceSheet';
import {
    BalanceSheetFromJSON,
    BalanceSheetFromJSONTyped,
    BalanceSheetToJSON,
} from './BalanceSheet';
import type { BusinessChartOfAccount } from './BusinessChartOfAccount';
import {
    BusinessChartOfAccountFromJSON,
    BusinessChartOfAccountFromJSONTyped,
    BusinessChartOfAccountToJSON,
} from './BusinessChartOfAccount';
import type { BusinessTransaction } from './BusinessTransaction';
import {
    BusinessTransactionFromJSON,
    BusinessTransactionFromJSONTyped,
    BusinessTransactionToJSON,
} from './BusinessTransaction';
import type { CashFlowStatement } from './CashFlowStatement';
import {
    CashFlowStatementFromJSON,
    CashFlowStatementFromJSONTyped,
    CashFlowStatementToJSON,
} from './CashFlowStatement';
import type { CompanyInfo } from './CompanyInfo';
import {
    CompanyInfoFromJSON,
    CompanyInfoFromJSONTyped,
    CompanyInfoToJSON,
} from './CompanyInfo';
import type { Contacts } from './Contacts';
import {
    ContactsFromJSON,
    ContactsFromJSONTyped,
    ContactsToJSON,
} from './Contacts';
import type { CreditNote } from './CreditNote';
import {
    CreditNoteFromJSON,
    CreditNoteFromJSONTyped,
    CreditNoteToJSON,
} from './CreditNote';
import type { Expense } from './Expense';
import {
    ExpenseFromJSON,
    ExpenseFromJSONTyped,
    ExpenseToJSON,
} from './Expense';
import type { IncomeStatement } from './IncomeStatement';
import {
    IncomeStatementFromJSON,
    IncomeStatementFromJSONTyped,
    IncomeStatementToJSON,
} from './IncomeStatement';
import type { Invoice } from './Invoice';
import {
    InvoiceFromJSON,
    InvoiceFromJSONTyped,
    InvoiceToJSON,
} from './Invoice';
import type { Item } from './Item';
import {
    ItemFromJSON,
    ItemFromJSONTyped,
    ItemToJSON,
} from './Item';
import type { JournalEntry } from './JournalEntry';
import {
    JournalEntryFromJSON,
    JournalEntryFromJSONTyped,
    JournalEntryToJSON,
} from './JournalEntry';
import type { Payment } from './Payment';
import {
    PaymentFromJSON,
    PaymentFromJSONTyped,
    PaymentToJSON,
} from './Payment';
import type { PurchaseOrder } from './PurchaseOrder';
import {
    PurchaseOrderFromJSON,
    PurchaseOrderFromJSONTyped,
    PurchaseOrderToJSON,
} from './PurchaseOrder';
import type { TaxRate } from './TaxRate';
import {
    TaxRateFromJSON,
    TaxRateFromJSONTyped,
    TaxRateToJSON,
} from './TaxRate';
import type { VendorCredit } from './VendorCredit';
import {
    VendorCreditFromJSON,
    VendorCreditFromJSONTyped,
    VendorCreditToJSON,
} from './VendorCredit';

/**
 * 
 * @export
 * @interface LinkedAccountingAccount
 */
export interface LinkedAccountingAccount {
    /**
     * 
     * @type {string}
     * @memberof LinkedAccountingAccount
     */
    id?: string;
    /**
     * 
     * @type {Array<AccountingAttachment>}
     * @memberof LinkedAccountingAccount
     */
    attachments?: Array<AccountingAttachment>;
    /**
     * The CompanyInfo object is used to represent a company's information.
     * @type {Array<CompanyInfo>}
     * @memberof LinkedAccountingAccount
     */
    companyInfo?: Array<CompanyInfo>;
    /**
     * 
     * @type {Array<PurchaseOrder>}
     * @memberof LinkedAccountingAccount
     */
    purchaseOrders?: Array<PurchaseOrder>;
    /**
     * 
     * @type {Array<BalanceSheet>}
     * @memberof LinkedAccountingAccount
     */
    balanceSheets?: Array<BalanceSheet>;
    /**
     * 
     * @type {Array<CashFlowStatement>}
     * @memberof LinkedAccountingAccount
     */
    cashFlowStatements?: Array<CashFlowStatement>;
    /**
     * 
     * @type {Array<IncomeStatement>}
     * @memberof LinkedAccountingAccount
     */
    incomeStatements?: Array<IncomeStatement>;
    /**
     * 
     * @type {Array<BusinessChartOfAccount>}
     * @memberof LinkedAccountingAccount
     */
    chartOfAccounts?: Array<BusinessChartOfAccount>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof LinkedAccountingAccount
     */
    items?: Array<Item>;
    /**
     * 
     * @type {Array<TaxRate>}
     * @memberof LinkedAccountingAccount
     */
    taxRates?: Array<TaxRate>;
    /**
     * The Contact object refers to either a supplier or a customer.
     * @type {Array<Contacts>}
     * @memberof LinkedAccountingAccount
     */
    contacts?: Array<Contacts>;
    /**
     * 
     * @type {Array<Invoice>}
     * @memberof LinkedAccountingAccount
     */
    invoices?: Array<Invoice>;
    /**
     * 
     * @type {Array<Payment>}
     * @memberof LinkedAccountingAccount
     */
    payments?: Array<Payment>;
    /**
     * 
     * @type {Array<Expense>}
     * @memberof LinkedAccountingAccount
     */
    expenses?: Array<Expense>;
    /**
     * 
     * @type {Array<JournalEntry>}
     * @memberof LinkedAccountingAccount
     */
    journalEntries?: Array<JournalEntry>;
    /**
     * 
     * @type {Array<BusinessTransaction>}
     * @memberof LinkedAccountingAccount
     */
    transactions?: Array<BusinessTransaction>;
    /**
     * 
     * @type {Array<VendorCredit>}
     * @memberof LinkedAccountingAccount
     */
    vendorCredits?: Array<VendorCredit>;
    /**
     * 
     * @type {Array<CreditNote>}
     * @memberof LinkedAccountingAccount
     */
    creditNotes?: Array<CreditNote>;
}

/**
 * Check if a given object implements the LinkedAccountingAccount interface.
 */
export function instanceOfLinkedAccountingAccount(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LinkedAccountingAccountFromJSON(json: any): LinkedAccountingAccount {
    return LinkedAccountingAccountFromJSONTyped(json, false);
}

export function LinkedAccountingAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkedAccountingAccount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'attachments': !exists(json, 'attachments') ? undefined : ((json['attachments'] as Array<any>).map(AccountingAttachmentFromJSON)),
        'companyInfo': !exists(json, 'companyInfo') ? undefined : ((json['companyInfo'] as Array<any>).map(CompanyInfoFromJSON)),
        'purchaseOrders': !exists(json, 'purchaseOrders') ? undefined : ((json['purchaseOrders'] as Array<any>).map(PurchaseOrderFromJSON)),
        'balanceSheets': !exists(json, 'balanceSheets') ? undefined : ((json['balanceSheets'] as Array<any>).map(BalanceSheetFromJSON)),
        'cashFlowStatements': !exists(json, 'cashFlowStatements') ? undefined : ((json['cashFlowStatements'] as Array<any>).map(CashFlowStatementFromJSON)),
        'incomeStatements': !exists(json, 'incomeStatements') ? undefined : ((json['incomeStatements'] as Array<any>).map(IncomeStatementFromJSON)),
        'chartOfAccounts': !exists(json, 'chartOfAccounts') ? undefined : ((json['chartOfAccounts'] as Array<any>).map(BusinessChartOfAccountFromJSON)),
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(ItemFromJSON)),
        'taxRates': !exists(json, 'taxRates') ? undefined : ((json['taxRates'] as Array<any>).map(TaxRateFromJSON)),
        'contacts': !exists(json, 'contacts') ? undefined : ((json['contacts'] as Array<any>).map(ContactsFromJSON)),
        'invoices': !exists(json, 'invoices') ? undefined : ((json['invoices'] as Array<any>).map(InvoiceFromJSON)),
        'payments': !exists(json, 'payments') ? undefined : ((json['payments'] as Array<any>).map(PaymentFromJSON)),
        'expenses': !exists(json, 'expenses') ? undefined : ((json['expenses'] as Array<any>).map(ExpenseFromJSON)),
        'journalEntries': !exists(json, 'journalEntries') ? undefined : ((json['journalEntries'] as Array<any>).map(JournalEntryFromJSON)),
        'transactions': !exists(json, 'transactions') ? undefined : ((json['transactions'] as Array<any>).map(BusinessTransactionFromJSON)),
        'vendorCredits': !exists(json, 'vendorCredits') ? undefined : ((json['vendorCredits'] as Array<any>).map(VendorCreditFromJSON)),
        'creditNotes': !exists(json, 'creditNotes') ? undefined : ((json['creditNotes'] as Array<any>).map(CreditNoteFromJSON)),
    };
}

export function LinkedAccountingAccountToJSON(value?: LinkedAccountingAccount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'attachments': value.attachments === undefined ? undefined : ((value.attachments as Array<any>).map(AccountingAttachmentToJSON)),
        'companyInfo': value.companyInfo === undefined ? undefined : ((value.companyInfo as Array<any>).map(CompanyInfoToJSON)),
        'purchaseOrders': value.purchaseOrders === undefined ? undefined : ((value.purchaseOrders as Array<any>).map(PurchaseOrderToJSON)),
        'balanceSheets': value.balanceSheets === undefined ? undefined : ((value.balanceSheets as Array<any>).map(BalanceSheetToJSON)),
        'cashFlowStatements': value.cashFlowStatements === undefined ? undefined : ((value.cashFlowStatements as Array<any>).map(CashFlowStatementToJSON)),
        'incomeStatements': value.incomeStatements === undefined ? undefined : ((value.incomeStatements as Array<any>).map(IncomeStatementToJSON)),
        'chartOfAccounts': value.chartOfAccounts === undefined ? undefined : ((value.chartOfAccounts as Array<any>).map(BusinessChartOfAccountToJSON)),
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(ItemToJSON)),
        'taxRates': value.taxRates === undefined ? undefined : ((value.taxRates as Array<any>).map(TaxRateToJSON)),
        'contacts': value.contacts === undefined ? undefined : ((value.contacts as Array<any>).map(ContactsToJSON)),
        'invoices': value.invoices === undefined ? undefined : ((value.invoices as Array<any>).map(InvoiceToJSON)),
        'payments': value.payments === undefined ? undefined : ((value.payments as Array<any>).map(PaymentToJSON)),
        'expenses': value.expenses === undefined ? undefined : ((value.expenses as Array<any>).map(ExpenseToJSON)),
        'journalEntries': value.journalEntries === undefined ? undefined : ((value.journalEntries as Array<any>).map(JournalEntryToJSON)),
        'transactions': value.transactions === undefined ? undefined : ((value.transactions as Array<any>).map(BusinessTransactionToJSON)),
        'vendorCredits': value.vendorCredits === undefined ? undefined : ((value.vendorCredits as Array<any>).map(VendorCreditToJSON)),
        'creditNotes': value.creditNotes === undefined ? undefined : ((value.creditNotes as Array<any>).map(CreditNoteToJSON)),
    };
}

