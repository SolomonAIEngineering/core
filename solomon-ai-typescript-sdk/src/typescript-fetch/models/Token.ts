/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    itemId?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    keyId?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    accessToken?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    version?: string;
    /**
     * This is what you'll pass to Merge as the end_user_origin_id.
     * @type {string}
     * @memberof Token
     */
    mergeEndUserOriginId?: string;
    /**
     * The integration slug/identifier. This is returned at the end of the linking flow.
     * @type {string}
     * @memberof Token
     */
    mergeIntegrationSlug?: string;
    /**
     * 
     * @type {Date}
     * @memberof Token
     */
    lastMergeCreatedAt?: Date;
}

/**
 * Check if a given object implements the Token interface.
 */
export function instanceOfToken(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TokenFromJSON(json: any): Token {
    return TokenFromJSONTyped(json, false);
}

export function TokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): Token {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'itemId': !exists(json, 'itemId') ? undefined : json['itemId'],
        'keyId': !exists(json, 'keyId') ? undefined : json['keyId'],
        'accessToken': !exists(json, 'accessToken') ? undefined : json['accessToken'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'mergeEndUserOriginId': !exists(json, 'mergeEndUserOriginId') ? undefined : json['mergeEndUserOriginId'],
        'mergeIntegrationSlug': !exists(json, 'mergeIntegrationSlug') ? undefined : json['mergeIntegrationSlug'],
        'lastMergeCreatedAt': !exists(json, 'lastMergeCreatedAt') ? undefined : (new Date(json['lastMergeCreatedAt'])),
    };
}

export function TokenToJSON(value?: Token | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'itemId': value.itemId,
        'keyId': value.keyId,
        'accessToken': value.accessToken,
        'version': value.version,
        'mergeEndUserOriginId': value.mergeEndUserOriginId,
        'mergeIntegrationSlug': value.mergeIntegrationSlug,
        'lastMergeCreatedAt': value.lastMergeCreatedAt === undefined ? undefined : (value.lastMergeCreatedAt.toISOString()),
    };
}

