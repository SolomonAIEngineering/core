/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    itemId?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    keyId?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    accessToken?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    version?: string;
    /**
     * This is what you'll pass to Merge as the end_user_origin_id.
     * @type {string}
     * @memberof Token
     */
    mergeEndUserOriginId?: string;
    /**
     * The integration slug/identifier. This is returned at the end of the linking flow.
     * @type {string}
     * @memberof Token
     */
    mergeIntegrationSlug?: string;
    /**
     * 
     * @type {Date}
     * @memberof Token
     */
    lastMergeCreatedAt?: Date;
}

/**
 * Check if a given object implements the Token interface.
 */
export function instanceOfToken(value: object): boolean {
    return true;
}

export function TokenFromJSON(json: any): Token {
    return TokenFromJSONTyped(json, false);
}

export function TokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): Token {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'itemId': json['itemId'] == null ? undefined : json['itemId'],
        'keyId': json['keyId'] == null ? undefined : json['keyId'],
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
        'version': json['version'] == null ? undefined : json['version'],
        'mergeEndUserOriginId': json['mergeEndUserOriginId'] == null ? undefined : json['mergeEndUserOriginId'],
        'mergeIntegrationSlug': json['mergeIntegrationSlug'] == null ? undefined : json['mergeIntegrationSlug'],
        'lastMergeCreatedAt': json['lastMergeCreatedAt'] == null ? undefined : (new Date(json['lastMergeCreatedAt'])),
    };
}

export function TokenToJSON(value?: Token | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'itemId': value['itemId'],
        'keyId': value['keyId'],
        'accessToken': value['accessToken'],
        'version': value['version'],
        'mergeEndUserOriginId': value['mergeEndUserOriginId'],
        'mergeIntegrationSlug': value['mergeIntegrationSlug'],
        'lastMergeCreatedAt': value['lastMergeCreatedAt'] == null ? undefined : ((value['lastMergeCreatedAt']).toISOString()),
    };
}

