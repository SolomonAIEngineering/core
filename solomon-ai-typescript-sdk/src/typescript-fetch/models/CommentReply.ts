/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccountType } from './AccountType';
import {
    AccountTypeFromJSON,
    AccountTypeFromJSONTyped,
    AccountTypeToJSON,
} from './AccountType';
import type { Media } from './Media';
import {
    MediaFromJSON,
    MediaFromJSONTyped,
    MediaToJSON,
} from './Media';
import type { Reaction } from './Reaction';
import {
    ReactionFromJSON,
    ReactionFromJSONTyped,
    ReactionToJSON,
} from './Reaction';

/**
 * 
 * @export
 * @interface CommentReply
 */
export interface CommentReply {
    /**
     * 
     * @type {string}
     * @memberof CommentReply
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CommentReply
     */
    backendPlatformUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommentReply
     */
    profileId?: string;
    /**
     * 
     * @type {Media}
     * @memberof CommentReply
     */
    media?: Media;
    /**
     * 
     * @type {Array<string>}
     * @memberof CommentReply
     */
    mentions?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CommentReply
     */
    hashtags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CommentReply
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof CommentReply
     */
    content?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CommentReply
     */
    extra?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof CommentReply
     */
    authorUsername: string;
    /**
     * 
     * @type {string}
     * @memberof CommentReply
     */
    authorProfileImage: string;
    /**
     * 
     * @type {string}
     * @memberof CommentReply
     */
    affinityScore?: string;
    /**
     * 
     * @type {string}
     * @memberof CommentReply
     */
    qualityScore?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CommentReply
     */
    userIdToAffinityScoreMap?: { [key: string]: string; };
    /**
     * 
     * @type {AccountType}
     * @memberof CommentReply
     */
    authorAccountType?: AccountType;
    /**
     * 
     * @type {{ [key: string]: Reaction; }}
     * @memberof CommentReply
     */
    userIdToReactionMap?: { [key: string]: Reaction; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CommentReply
     */
    userIdToReportsMap?: { [key: string]: string; };
}

/**
 * Check if a given object implements the CommentReply interface.
 */
export function instanceOfCommentReply(value: object): boolean {
    if (!('authorUsername' in value)) return false;
    if (!('authorProfileImage' in value)) return false;
    return true;
}

export function CommentReplyFromJSON(json: any): CommentReply {
    return CommentReplyFromJSONTyped(json, false);
}

export function CommentReplyFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentReply {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'backendPlatformUserId': json['backendPlatformUserId'] == null ? undefined : json['backendPlatformUserId'],
        'profileId': json['profileId'] == null ? undefined : json['profileId'],
        'media': json['media'] == null ? undefined : MediaFromJSON(json['media']),
        'mentions': json['mentions'] == null ? undefined : json['mentions'],
        'hashtags': json['hashtags'] == null ? undefined : json['hashtags'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'content': json['content'] == null ? undefined : json['content'],
        'extra': json['extra'] == null ? undefined : json['extra'],
        'authorUsername': json['authorUsername'],
        'authorProfileImage': json['authorProfileImage'],
        'affinityScore': json['affinityScore'] == null ? undefined : json['affinityScore'],
        'qualityScore': json['qualityScore'] == null ? undefined : json['qualityScore'],
        'userIdToAffinityScoreMap': json['userIdToAffinityScoreMap'] == null ? undefined : json['userIdToAffinityScoreMap'],
        'authorAccountType': json['authorAccountType'] == null ? undefined : AccountTypeFromJSON(json['authorAccountType']),
        'userIdToReactionMap': json['userIdToReactionMap'] == null ? undefined : (mapValues(json['userIdToReactionMap'], ReactionFromJSON)),
        'userIdToReportsMap': json['userIdToReportsMap'] == null ? undefined : json['userIdToReportsMap'],
    };
}

export function CommentReplyToJSON(value?: CommentReply | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'backendPlatformUserId': value['backendPlatformUserId'],
        'profileId': value['profileId'],
        'media': MediaToJSON(value['media']),
        'mentions': value['mentions'],
        'hashtags': value['hashtags'],
        'createdAt': value['createdAt'],
        'content': value['content'],
        'extra': value['extra'],
        'authorUsername': value['authorUsername'],
        'authorProfileImage': value['authorProfileImage'],
        'affinityScore': value['affinityScore'],
        'qualityScore': value['qualityScore'],
        'userIdToAffinityScoreMap': value['userIdToAffinityScoreMap'],
        'authorAccountType': AccountTypeToJSON(value['authorAccountType']),
        'userIdToReactionMap': value['userIdToReactionMap'] == null ? undefined : (mapValues(value['userIdToReactionMap'], ReactionToJSON)),
        'userIdToReportsMap': value['userIdToReportsMap'],
    };
}

