/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The Deduction object is used to represent an array of the wages
 * withheld from total earnings for the purpose of paying taxes.
 * @export
 * @interface Deduction
 */
export interface Deduction {
    /**
     * 
     * @type {string}
     * @memberof Deduction
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof Deduction
     */
    remoteId?: string;
    /**
     * The deduction's name.
     * @type {string}
     * @memberof Deduction
     */
    name?: string;
    /**
     * The amount of money that is withheld from an employee's gross pay by the employee.
     * @type {number}
     * @memberof Deduction
     */
    employeeDeduction?: number;
    /**
     * The amount of money that is withheld on behalf of an employee by the company.
     * @type {number}
     * @memberof Deduction
     */
    companyDeduction?: number;
    /**
     * Indicates whether or not this object has been deleted in the third party platform.
     * @type {boolean}
     * @memberof Deduction
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Deduction
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Deduction
     */
    modifiedAt?: Date;
    /**
     * The payroll being run.
     * @type {string}
     * @memberof Deduction
     */
    payrollRunMergeAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof Deduction
     */
    mergeAccountId?: string;
}

/**
 * Check if a given object implements the Deduction interface.
 */
export function instanceOfDeduction(value: object): boolean {
    return true;
}

export function DeductionFromJSON(json: any): Deduction {
    return DeductionFromJSONTyped(json, false);
}

export function DeductionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Deduction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'name': json['name'] == null ? undefined : json['name'],
        'employeeDeduction': json['employeeDeduction'] == null ? undefined : json['employeeDeduction'],
        'companyDeduction': json['companyDeduction'] == null ? undefined : json['companyDeduction'],
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'payrollRunMergeAccountId': json['payrollRunMergeAccountId'] == null ? undefined : json['payrollRunMergeAccountId'],
        'mergeAccountId': json['mergeAccountId'] == null ? undefined : json['mergeAccountId'],
    };
}

export function DeductionToJSON(value?: Deduction | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'remoteId': value['remoteId'],
        'name': value['name'],
        'employeeDeduction': value['employeeDeduction'],
        'companyDeduction': value['companyDeduction'],
        'remoteWasDeleted': value['remoteWasDeleted'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'payrollRunMergeAccountId': value['payrollRunMergeAccountId'],
        'mergeAccountId': value['mergeAccountId'],
    };
}

