/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReportItem } from './ReportItem';
import {
    ReportItemFromJSON,
    ReportItemFromJSONTyped,
    ReportItemToJSON,
} from './ReportItem';

/**
 * The IncomeStatement object is used to represent a companyâ€™s income, the cost of sales, operating expenses, 
 * and other non-operating expenses. The object also includes other important values like gross profit, 
 * gross operating profit, and net income. This represents a period of time (month, quarter, or year).
 * @export
 * @interface IncomeStatement
 */
export interface IncomeStatement {
    /**
     * 
     * @type {string}
     * @memberof IncomeStatement
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof IncomeStatement
     */
    remoteId?: string;
    /**
     * The income statement's name.
     * @type {string}
     * @memberof IncomeStatement
     */
    name?: string;
    /**
     * The income statement's currency.
     * @type {string}
     * @memberof IncomeStatement
     */
    currency?: string;
    /**
     * The company the income statement belongs to.
     * @type {string}
     * @memberof IncomeStatement
     */
    company?: string;
    /**
     * The income statement's start period.
     * @type {Date}
     * @memberof IncomeStatement
     */
    startPeriod?: Date;
    /**
     * The income statement's end period.
     * @type {Date}
     * @memberof IncomeStatement
     */
    endPeriod?: Date;
    /**
     * 
     * @type {Array<ReportItem>}
     * @memberof IncomeStatement
     */
    income?: Array<ReportItem>;
    /**
     * 
     * @type {Array<ReportItem>}
     * @memberof IncomeStatement
     */
    costOfSales?: Array<ReportItem>;
    /**
     * The revenue minus the cost of sale.
     * @type {number}
     * @memberof IncomeStatement
     */
    grossProfit?: number;
    /**
     * 
     * @type {Array<ReportItem>}
     * @memberof IncomeStatement
     */
    operatingExpenses?: Array<ReportItem>;
    /**
     * The revenue minus the operating expenses.
     * @type {number}
     * @memberof IncomeStatement
     */
    netOperatingIncome?: number;
    /**
     * 
     * @type {Array<ReportItem>}
     * @memberof IncomeStatement
     */
    nonOperatingExpenses?: Array<ReportItem>;
    /**
     * The gross profit minus the total expenses.
     * @type {number}
     * @memberof IncomeStatement
     */
    netIncome?: number;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof IncomeStatement
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof IncomeStatement
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof IncomeStatement
     */
    mergeRecordId?: string;
    /**
     * 
     * @type {Date}
     * @memberof IncomeStatement
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the IncomeStatement interface.
 */
export function instanceOfIncomeStatement(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IncomeStatementFromJSON(json: any): IncomeStatement {
    return IncomeStatementFromJSONTyped(json, false);
}

export function IncomeStatementFromJSONTyped(json: any, ignoreDiscriminator: boolean): IncomeStatement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'startPeriod': !exists(json, 'startPeriod') ? undefined : (new Date(json['startPeriod'])),
        'endPeriod': !exists(json, 'endPeriod') ? undefined : (new Date(json['endPeriod'])),
        'income': !exists(json, 'income') ? undefined : ((json['income'] as Array<any>).map(ReportItemFromJSON)),
        'costOfSales': !exists(json, 'costOfSales') ? undefined : ((json['costOfSales'] as Array<any>).map(ReportItemFromJSON)),
        'grossProfit': !exists(json, 'grossProfit') ? undefined : json['grossProfit'],
        'operatingExpenses': !exists(json, 'operatingExpenses') ? undefined : ((json['operatingExpenses'] as Array<any>).map(ReportItemFromJSON)),
        'netOperatingIncome': !exists(json, 'netOperatingIncome') ? undefined : json['netOperatingIncome'],
        'nonOperatingExpenses': !exists(json, 'nonOperatingExpenses') ? undefined : ((json['nonOperatingExpenses'] as Array<any>).map(ReportItemFromJSON)),
        'netIncome': !exists(json, 'netIncome') ? undefined : json['netIncome'],
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : json['remoteWasDeleted'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'mergeRecordId': !exists(json, 'mergeRecordId') ? undefined : json['mergeRecordId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
    };
}

export function IncomeStatementToJSON(value?: IncomeStatement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'remoteId': value.remoteId,
        'name': value.name,
        'currency': value.currency,
        'company': value.company,
        'startPeriod': value.startPeriod === undefined ? undefined : (value.startPeriod.toISOString()),
        'endPeriod': value.endPeriod === undefined ? undefined : (value.endPeriod.toISOString()),
        'income': value.income === undefined ? undefined : ((value.income as Array<any>).map(ReportItemToJSON)),
        'costOfSales': value.costOfSales === undefined ? undefined : ((value.costOfSales as Array<any>).map(ReportItemToJSON)),
        'grossProfit': value.grossProfit,
        'operatingExpenses': value.operatingExpenses === undefined ? undefined : ((value.operatingExpenses as Array<any>).map(ReportItemToJSON)),
        'netOperatingIncome': value.netOperatingIncome,
        'nonOperatingExpenses': value.nonOperatingExpenses === undefined ? undefined : ((value.nonOperatingExpenses as Array<any>).map(ReportItemToJSON)),
        'netIncome': value.netIncome,
        'remoteWasDeleted': value.remoteWasDeleted,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'mergeRecordId': value.mergeRecordId,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

