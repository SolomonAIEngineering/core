/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReportItem } from './ReportItem';
import {
    ReportItemFromJSON,
    ReportItemFromJSONTyped,
    ReportItemToJSON,
} from './ReportItem';

/**
 * The IncomeStatement object is used to represent a companyâ€™s income, the cost of sales, operating expenses, 
 * and other non-operating expenses. The object also includes other important values like gross profit, 
 * gross operating profit, and net income. This represents a period of time (month, quarter, or year).
 * @export
 * @interface IncomeStatement
 */
export interface IncomeStatement {
    /**
     * 
     * @type {string}
     * @memberof IncomeStatement
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof IncomeStatement
     */
    remoteId?: string;
    /**
     * The income statement's name.
     * @type {string}
     * @memberof IncomeStatement
     */
    name?: string;
    /**
     * The income statement's currency.
     * @type {string}
     * @memberof IncomeStatement
     */
    currency?: string;
    /**
     * The company the income statement belongs to.
     * @type {string}
     * @memberof IncomeStatement
     */
    company?: string;
    /**
     * The income statement's start period.
     * @type {Date}
     * @memberof IncomeStatement
     */
    startPeriod?: Date;
    /**
     * The income statement's end period.
     * @type {Date}
     * @memberof IncomeStatement
     */
    endPeriod?: Date;
    /**
     * 
     * @type {Array<ReportItem>}
     * @memberof IncomeStatement
     */
    income?: Array<ReportItem>;
    /**
     * 
     * @type {Array<ReportItem>}
     * @memberof IncomeStatement
     */
    costOfSales?: Array<ReportItem>;
    /**
     * The revenue minus the cost of sale.
     * @type {number}
     * @memberof IncomeStatement
     */
    grossProfit?: number;
    /**
     * 
     * @type {Array<ReportItem>}
     * @memberof IncomeStatement
     */
    operatingExpenses?: Array<ReportItem>;
    /**
     * The revenue minus the operating expenses.
     * @type {number}
     * @memberof IncomeStatement
     */
    netOperatingIncome?: number;
    /**
     * 
     * @type {Array<ReportItem>}
     * @memberof IncomeStatement
     */
    nonOperatingExpenses?: Array<ReportItem>;
    /**
     * The gross profit minus the total expenses.
     * @type {number}
     * @memberof IncomeStatement
     */
    netIncome?: number;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof IncomeStatement
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof IncomeStatement
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof IncomeStatement
     */
    mergeRecordId?: string;
    /**
     * 
     * @type {Date}
     * @memberof IncomeStatement
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the IncomeStatement interface.
 */
export function instanceOfIncomeStatement(value: object): boolean {
    return true;
}

export function IncomeStatementFromJSON(json: any): IncomeStatement {
    return IncomeStatementFromJSONTyped(json, false);
}

export function IncomeStatementFromJSONTyped(json: any, ignoreDiscriminator: boolean): IncomeStatement {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'name': json['name'] == null ? undefined : json['name'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'company': json['company'] == null ? undefined : json['company'],
        'startPeriod': json['startPeriod'] == null ? undefined : (new Date(json['startPeriod'])),
        'endPeriod': json['endPeriod'] == null ? undefined : (new Date(json['endPeriod'])),
        'income': json['income'] == null ? undefined : ((json['income'] as Array<any>).map(ReportItemFromJSON)),
        'costOfSales': json['costOfSales'] == null ? undefined : ((json['costOfSales'] as Array<any>).map(ReportItemFromJSON)),
        'grossProfit': json['grossProfit'] == null ? undefined : json['grossProfit'],
        'operatingExpenses': json['operatingExpenses'] == null ? undefined : ((json['operatingExpenses'] as Array<any>).map(ReportItemFromJSON)),
        'netOperatingIncome': json['netOperatingIncome'] == null ? undefined : json['netOperatingIncome'],
        'nonOperatingExpenses': json['nonOperatingExpenses'] == null ? undefined : ((json['nonOperatingExpenses'] as Array<any>).map(ReportItemFromJSON)),
        'netIncome': json['netIncome'] == null ? undefined : json['netIncome'],
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'mergeRecordId': json['mergeRecordId'] == null ? undefined : json['mergeRecordId'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
    };
}

export function IncomeStatementToJSON(value?: IncomeStatement | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'remoteId': value['remoteId'],
        'name': value['name'],
        'currency': value['currency'],
        'company': value['company'],
        'startPeriod': value['startPeriod'] == null ? undefined : ((value['startPeriod']).toISOString()),
        'endPeriod': value['endPeriod'] == null ? undefined : ((value['endPeriod']).toISOString()),
        'income': value['income'] == null ? undefined : ((value['income'] as Array<any>).map(ReportItemToJSON)),
        'costOfSales': value['costOfSales'] == null ? undefined : ((value['costOfSales'] as Array<any>).map(ReportItemToJSON)),
        'grossProfit': value['grossProfit'],
        'operatingExpenses': value['operatingExpenses'] == null ? undefined : ((value['operatingExpenses'] as Array<any>).map(ReportItemToJSON)),
        'netOperatingIncome': value['netOperatingIncome'],
        'nonOperatingExpenses': value['nonOperatingExpenses'] == null ? undefined : ((value['nonOperatingExpenses'] as Array<any>).map(ReportItemToJSON)),
        'netIncome': value['netIncome'],
        'remoteWasDeleted': value['remoteWasDeleted'],
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'mergeRecordId': value['mergeRecordId'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
    };
}

