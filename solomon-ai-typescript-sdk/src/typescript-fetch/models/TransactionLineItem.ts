/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The TransactionLineItem object is used to represent a transaction's line items.
 * @export
 * @interface TransactionLineItem
 */
export interface TransactionLineItem {
    /**
     * 
     * @type {string}
     * @memberof TransactionLineItem
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionLineItem
     */
    remoteId?: string;
    /**
     * An internal note used by the business to clarify purpose of the transaction.
     * @type {string}
     * @memberof TransactionLineItem
     */
    memo?: string;
    /**
     * The line item's unit price.
     * @type {string}
     * @memberof TransactionLineItem
     */
    unitPrice?: string;
    /**
     * The line item's quantity.
     * @type {string}
     * @memberof TransactionLineItem
     */
    quantity?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionLineItem
     */
    item?: string;
    /**
     * The line item's account.
     * @type {string}
     * @memberof TransactionLineItem
     */
    account?: string;
    /**
     * The line's associated tracking category.
     * @type {string}
     * @memberof TransactionLineItem
     */
    trackingCategory?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransactionLineItem
     */
    trackingCategories?: Array<string>;
    /**
     * The line item's total.
     * @type {string}
     * @memberof TransactionLineItem
     */
    totalLineAmount?: string;
    /**
     * The line item's tax rate.
     * @type {string}
     * @memberof TransactionLineItem
     */
    taxRate?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionLineItem
     */
    currency?: string;
    /**
     * The line item's exchange rate.
     * 
     * Assuming string, but might be better as float or double.
     * @type {string}
     * @memberof TransactionLineItem
     */
    exchangeRate?: string;
    /**
     * The company the line belongs to.
     * @type {string}
     * @memberof TransactionLineItem
     */
    company?: string;
    /**
     * 
     * @type {Date}
     * @memberof TransactionLineItem
     */
    modifiedAt?: Date;
    /**
     * Indicates whether or not this object has been deleted in the third party platform.
     * @type {boolean}
     * @memberof TransactionLineItem
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof TransactionLineItem
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the TransactionLineItem interface.
 */
export function instanceOfTransactionLineItem(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionLineItemFromJSON(json: any): TransactionLineItem {
    return TransactionLineItemFromJSONTyped(json, false);
}

export function TransactionLineItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionLineItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'unitPrice': !exists(json, 'unitPrice') ? undefined : json['unitPrice'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'item': !exists(json, 'item') ? undefined : json['item'],
        'account': !exists(json, 'account') ? undefined : json['account'],
        'trackingCategory': !exists(json, 'trackingCategory') ? undefined : json['trackingCategory'],
        'trackingCategories': !exists(json, 'trackingCategories') ? undefined : json['trackingCategories'],
        'totalLineAmount': !exists(json, 'totalLineAmount') ? undefined : json['totalLineAmount'],
        'taxRate': !exists(json, 'taxRate') ? undefined : json['taxRate'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'exchangeRate': !exists(json, 'exchangeRate') ? undefined : json['exchangeRate'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : json['remoteWasDeleted'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
    };
}

export function TransactionLineItemToJSON(value?: TransactionLineItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'remoteId': value.remoteId,
        'memo': value.memo,
        'unitPrice': value.unitPrice,
        'quantity': value.quantity,
        'item': value.item,
        'account': value.account,
        'trackingCategory': value.trackingCategory,
        'trackingCategories': value.trackingCategories,
        'totalLineAmount': value.totalLineAmount,
        'taxRate': value.taxRate,
        'currency': value.currency,
        'exchangeRate': value.exchangeRate,
        'company': value.company,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'remoteWasDeleted': value.remoteWasDeleted,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

