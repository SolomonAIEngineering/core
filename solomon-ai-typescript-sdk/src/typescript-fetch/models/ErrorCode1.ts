/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * 
 * @export
 */
export const ErrorCode1 = {
    NoError: 'no_error',
    ValidationError: 'validation_error',
    AuthorizationModelNotFound: 'authorization_model_not_found',
    AuthorizationModelResolutionTooComplex: 'authorization_model_resolution_too_complex',
    InvalidWriteInput: 'invalid_write_input',
    CannotAllowDuplicateTuplesInOneRequest: 'cannot_allow_duplicate_tuples_in_one_request',
    CannotAllowDuplicateTypesInOneRequest: 'cannot_allow_duplicate_types_in_one_request',
    CannotAllowMultipleReferencesToOneRelation: 'cannot_allow_multiple_references_to_one_relation',
    InvalidContinuationToken: 'invalid_continuation_token',
    InvalidTupleSet: 'invalid_tuple_set',
    InvalidCheckInput: 'invalid_check_input',
    InvalidExpandInput: 'invalid_expand_input',
    UnsupportedUserSet: 'unsupported_user_set',
    InvalidObjectFormat: 'invalid_object_format',
    WriteFailedDueToInvalidInput: 'write_failed_due_to_invalid_input',
    AuthorizationModelAssertionsNotFound: 'authorization_model_assertions_not_found',
    LatestAuthorizationModelNotFound: 'latest_authorization_model_not_found',
    TypeNotFound: 'type_not_found',
    RelationNotFound: 'relation_not_found',
    EmptyRelationDefinition: 'empty_relation_definition',
    InvalidUser: 'invalid_user',
    InvalidTuple: 'invalid_tuple',
    UnknownRelation: 'unknown_relation',
    StoreIdInvalidLength: 'store_id_invalid_length',
    AssertionsTooManyItems: 'assertions_too_many_items',
    IdTooLong: 'id_too_long',
    AuthorizationModelIdTooLong: 'authorization_model_id_too_long',
    TupleKeyValueNotSpecified: 'tuple_key_value_not_specified',
    TupleKeysTooManyOrTooFewItems: 'tuple_keys_too_many_or_too_few_items',
    PageSizeInvalid: 'page_size_invalid',
    ParamMissingValue: 'param_missing_value',
    DifferenceBaseMissingValue: 'difference_base_missing_value',
    SubtractBaseMissingValue: 'subtract_base_missing_value',
    ObjectTooLong: 'object_too_long',
    RelationTooLong: 'relation_too_long',
    TypeDefinitionsTooFewItems: 'type_definitions_too_few_items',
    TypeInvalidLength: 'type_invalid_length',
    TypeInvalidPattern: 'type_invalid_pattern',
    RelationsTooFewItems: 'relations_too_few_items',
    RelationsTooLong: 'relations_too_long',
    RelationsInvalidPattern: 'relations_invalid_pattern',
    ObjectInvalidPattern: 'object_invalid_pattern',
    QueryStringTypeContinuationTokenMismatch: 'query_string_type_continuation_token_mismatch',
    ExceededEntityLimit: 'exceeded_entity_limit',
    InvalidContextualTuple: 'invalid_contextual_tuple',
    DuplicateContextualTuple: 'duplicate_contextual_tuple',
    InvalidAuthorizationModel: 'invalid_authorization_model',
    UnsupportedSchemaVersion: 'unsupported_schema_version'
} as const;
export type ErrorCode1 = typeof ErrorCode1[keyof typeof ErrorCode1];


export function ErrorCode1FromJSON(json: any): ErrorCode1 {
    return ErrorCode1FromJSONTyped(json, false);
}

export function ErrorCode1FromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorCode1 {
    return json as ErrorCode1;
}

export function ErrorCode1ToJSON(value?: ErrorCode1 | null): any {
    return value as any;
}

