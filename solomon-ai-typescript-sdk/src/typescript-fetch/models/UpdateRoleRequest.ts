/* tslint:disable */
/* eslint-disable */
/**
 * Social Service
 * Solomon AI Social Service  Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoleAuditEvents } from './RoleAuditEvents';
import {
    RoleAuditEventsFromJSON,
    RoleAuditEventsFromJSONTyped,
    RoleAuditEventsToJSON,
} from './RoleAuditEvents';
import type { RoleType } from './RoleType';
import {
    RoleTypeFromJSON,
    RoleTypeFromJSONTyped,
    RoleTypeToJSON,
} from './RoleType';

/**
 * Role defines the role of a user in the system with specific permissions.
 * @export
 * @interface UpdateRoleRequest
 */
export interface UpdateRoleRequest {
    /**
     * Name of the role.
     * @type {string}
     * @memberof UpdateRoleRequest
     */
    name?: string;
    /**
     * 
     * @type {RoleType}
     * @memberof UpdateRoleRequest
     */
    type?: RoleType;
    /**
     * Permissions related to user management.
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canCreateUsers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canReadUsers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canUpdateUsers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canDeleteUsers?: boolean;
    /**
     * Permissions related to project management.
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canCreateProjects?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canReadProjects?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canUpdateProjects?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canDeleteProjects?: boolean;
    /**
     * Permissions related to report management.
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canCreateReports?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canReadReports?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canUpdateReports?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRoleRequest
     */
    canDeleteReports?: boolean;
    /**
     * Add more permissions as necessary for other modules or features.
     * Timestamps for tracking creation and modification times.
     * @type {Date}
     * @memberof UpdateRoleRequest
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UpdateRoleRequest
     */
    updatedAt?: Date;
    /**
     * Audit log for this role.
     * @type {Array<RoleAuditEvents>}
     * @memberof UpdateRoleRequest
     */
    auditLog?: Array<RoleAuditEvents>;
}

/**
 * Check if a given object implements the UpdateRoleRequest interface.
 */
export function instanceOfUpdateRoleRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpdateRoleRequestFromJSON(json: any): UpdateRoleRequest {
    return UpdateRoleRequestFromJSONTyped(json, false);
}

export function UpdateRoleRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateRoleRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': !exists(json, 'type') ? undefined : RoleTypeFromJSON(json['type']),
        'canCreateUsers': !exists(json, 'canCreateUsers') ? undefined : json['canCreateUsers'],
        'canReadUsers': !exists(json, 'canReadUsers') ? undefined : json['canReadUsers'],
        'canUpdateUsers': !exists(json, 'canUpdateUsers') ? undefined : json['canUpdateUsers'],
        'canDeleteUsers': !exists(json, 'canDeleteUsers') ? undefined : json['canDeleteUsers'],
        'canCreateProjects': !exists(json, 'canCreateProjects') ? undefined : json['canCreateProjects'],
        'canReadProjects': !exists(json, 'canReadProjects') ? undefined : json['canReadProjects'],
        'canUpdateProjects': !exists(json, 'canUpdateProjects') ? undefined : json['canUpdateProjects'],
        'canDeleteProjects': !exists(json, 'canDeleteProjects') ? undefined : json['canDeleteProjects'],
        'canCreateReports': !exists(json, 'canCreateReports') ? undefined : json['canCreateReports'],
        'canReadReports': !exists(json, 'canReadReports') ? undefined : json['canReadReports'],
        'canUpdateReports': !exists(json, 'canUpdateReports') ? undefined : json['canUpdateReports'],
        'canDeleteReports': !exists(json, 'canDeleteReports') ? undefined : json['canDeleteReports'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'auditLog': !exists(json, 'auditLog') ? undefined : ((json['auditLog'] as Array<any>).map(RoleAuditEventsFromJSON)),
    };
}

export function UpdateRoleRequestToJSON(value?: UpdateRoleRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': RoleTypeToJSON(value.type),
        'canCreateUsers': value.canCreateUsers,
        'canReadUsers': value.canReadUsers,
        'canUpdateUsers': value.canUpdateUsers,
        'canDeleteUsers': value.canDeleteUsers,
        'canCreateProjects': value.canCreateProjects,
        'canReadProjects': value.canReadProjects,
        'canUpdateProjects': value.canUpdateProjects,
        'canDeleteProjects': value.canDeleteProjects,
        'canCreateReports': value.canCreateReports,
        'canReadReports': value.canReadReports,
        'canUpdateReports': value.canUpdateReports,
        'canDeleteReports': value.canDeleteReports,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'auditLog': value.auditLog === undefined ? undefined : ((value.auditLog as Array<any>).map(RoleAuditEventsToJSON)),
    };
}

