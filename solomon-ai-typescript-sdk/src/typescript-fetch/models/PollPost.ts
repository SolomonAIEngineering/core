/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccountType } from './AccountType';
import {
    AccountTypeFromJSON,
    AccountTypeFromJSONTyped,
    AccountTypeToJSON,
} from './AccountType';
import type { Category } from './Category';
import {
    CategoryFromJSON,
    CategoryFromJSONTyped,
    CategoryToJSON,
} from './Category';
import type { Comment } from './Comment';
import {
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
} from './Comment';
import type { ContentInsights } from './ContentInsights';
import {
    ContentInsightsFromJSON,
    ContentInsightsFromJSONTyped,
    ContentInsightsToJSON,
} from './ContentInsights';
import type { Media } from './Media';
import {
    MediaFromJSON,
    MediaFromJSONTyped,
    MediaToJSON,
} from './Media';
import type { Note } from './Note';
import {
    NoteFromJSON,
    NoteFromJSONTyped,
    NoteToJSON,
} from './Note';
import type { PollResponse } from './PollResponse';
import {
    PollResponseFromJSON,
    PollResponseFromJSONTyped,
    PollResponseToJSON,
} from './PollResponse';
import type { PostType } from './PostType';
import {
    PostTypeFromJSON,
    PostTypeFromJSONTyped,
    PostTypeToJSON,
} from './PostType';
import type { Reaction } from './Reaction';
import {
    ReactionFromJSON,
    ReactionFromJSONTyped,
    ReactionToJSON,
} from './Reaction';
import type { Thread } from './Thread';
import {
    ThreadFromJSON,
    ThreadFromJSONTyped,
    ThreadToJSON,
} from './Thread';
import type { ThreadParticipantType } from './ThreadParticipantType';
import {
    ThreadParticipantTypeFromJSON,
    ThreadParticipantTypeFromJSONTyped,
    ThreadParticipantTypeToJSON,
} from './ThreadParticipantType';

/**
 * 
 * @export
 * @interface PollPost
 */
export interface PollPost {
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    createdAt?: string;
    /**
     * 
     * @type {PostType}
     * @memberof PollPost
     */
    action: PostType;
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    content: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PollPost
     */
    mentions?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PollPost
     */
    hashtags?: Array<string>;
    /**
     * 
     * @type {Media}
     * @memberof PollPost
     */
    media?: Media;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PollPost
     */
    extra?: { [key: string]: string; };
    /**
     * 
     * @type {Array<Comment>}
     * @memberof PollPost
     */
    comments?: Array<Comment>;
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    backendPlatformUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    profileId?: string;
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    title?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PollPost
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    topicName?: string;
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    authorUsername?: string;
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    authorProfileImage?: string;
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    affinityScore?: string;
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    qualityScore?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PollPost
     */
    userIdToAffinityScoreMap?: { [key: string]: string; };
    /**
     * 
     * @type {ContentInsights}
     * @memberof PollPost
     */
    insights?: ContentInsights;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PollPost
     */
    userIdToReportsMap?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof PollPost
     */
    backgroundImageUrl?: string;
    /**
     * 
     * @type {AccountType}
     * @memberof PollPost
     */
    authorAccountType?: AccountType;
    /**
     * 
     * @type {{ [key: string]: PollResponse; }}
     * @memberof PollPost
     */
    userIdToPollResponsesMap?: { [key: string]: PollResponse; };
    /**
     * 
     * @type {Array<string>}
     * @memberof PollPost
     */
    pollOptions: Array<string>;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof PollPost
     */
    pollDistribution?: { [key: string]: number; };
    /**
     * 
     * @type {Date}
     * @memberof PollPost
     */
    pollEndDate?: Date;
    /**
     * 
     * @type {Array<Note>}
     * @memberof PollPost
     */
    notes?: Array<Note>;
    /**
     * 
     * @type {Thread}
     * @memberof PollPost
     */
    thread?: Thread;
    /**
     * 
     * @type {ThreadParticipantType}
     * @memberof PollPost
     */
    threadParticipantType?: ThreadParticipantType;
    /**
     * 
     * @type {{ [key: string]: Reaction; }}
     * @memberof PollPost
     */
    userIdToReactionMap?: { [key: string]: Reaction; };
    /**
     * 
     * @type {Category}
     * @memberof PollPost
     */
    category?: Category;
}

/**
 * Check if a given object implements the PollPost interface.
 */
export function instanceOfPollPost(value: object): boolean {
    if (!('action' in value)) return false;
    if (!('content' in value)) return false;
    if (!('pollOptions' in value)) return false;
    return true;
}

export function PollPostFromJSON(json: any): PollPost {
    return PollPostFromJSONTyped(json, false);
}

export function PollPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): PollPost {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'action': PostTypeFromJSON(json['action']),
        'content': json['content'],
        'mentions': json['mentions'] == null ? undefined : json['mentions'],
        'hashtags': json['hashtags'] == null ? undefined : json['hashtags'],
        'media': json['media'] == null ? undefined : MediaFromJSON(json['media']),
        'extra': json['extra'] == null ? undefined : json['extra'],
        'comments': json['comments'] == null ? undefined : ((json['comments'] as Array<any>).map(CommentFromJSON)),
        'backendPlatformUserId': json['backendPlatformUserId'] == null ? undefined : json['backendPlatformUserId'],
        'profileId': json['profileId'] == null ? undefined : json['profileId'],
        'title': json['title'] == null ? undefined : json['title'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'topicName': json['topicName'] == null ? undefined : json['topicName'],
        'authorUsername': json['authorUsername'] == null ? undefined : json['authorUsername'],
        'authorProfileImage': json['authorProfileImage'] == null ? undefined : json['authorProfileImage'],
        'affinityScore': json['affinityScore'] == null ? undefined : json['affinityScore'],
        'qualityScore': json['qualityScore'] == null ? undefined : json['qualityScore'],
        'userIdToAffinityScoreMap': json['userIdToAffinityScoreMap'] == null ? undefined : json['userIdToAffinityScoreMap'],
        'insights': json['insights'] == null ? undefined : ContentInsightsFromJSON(json['insights']),
        'userIdToReportsMap': json['userIdToReportsMap'] == null ? undefined : json['userIdToReportsMap'],
        'backgroundImageUrl': json['backgroundImageUrl'] == null ? undefined : json['backgroundImageUrl'],
        'authorAccountType': json['authorAccountType'] == null ? undefined : AccountTypeFromJSON(json['authorAccountType']),
        'userIdToPollResponsesMap': json['userIdToPollResponsesMap'] == null ? undefined : (mapValues(json['userIdToPollResponsesMap'], PollResponseFromJSON)),
        'pollOptions': json['pollOptions'],
        'pollDistribution': json['pollDistribution'] == null ? undefined : json['pollDistribution'],
        'pollEndDate': json['pollEndDate'] == null ? undefined : (new Date(json['pollEndDate'])),
        'notes': json['notes'] == null ? undefined : ((json['notes'] as Array<any>).map(NoteFromJSON)),
        'thread': json['thread'] == null ? undefined : ThreadFromJSON(json['thread']),
        'threadParticipantType': json['threadParticipantType'] == null ? undefined : ThreadParticipantTypeFromJSON(json['threadParticipantType']),
        'userIdToReactionMap': json['userIdToReactionMap'] == null ? undefined : (mapValues(json['userIdToReactionMap'], ReactionFromJSON)),
        'category': json['category'] == null ? undefined : CategoryFromJSON(json['category']),
    };
}

export function PollPostToJSON(value?: PollPost | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'createdAt': value['createdAt'],
        'action': PostTypeToJSON(value['action']),
        'content': value['content'],
        'mentions': value['mentions'],
        'hashtags': value['hashtags'],
        'media': MediaToJSON(value['media']),
        'extra': value['extra'],
        'comments': value['comments'] == null ? undefined : ((value['comments'] as Array<any>).map(CommentToJSON)),
        'backendPlatformUserId': value['backendPlatformUserId'],
        'profileId': value['profileId'],
        'title': value['title'],
        'tags': value['tags'],
        'topicName': value['topicName'],
        'authorUsername': value['authorUsername'],
        'authorProfileImage': value['authorProfileImage'],
        'affinityScore': value['affinityScore'],
        'qualityScore': value['qualityScore'],
        'userIdToAffinityScoreMap': value['userIdToAffinityScoreMap'],
        'insights': ContentInsightsToJSON(value['insights']),
        'userIdToReportsMap': value['userIdToReportsMap'],
        'backgroundImageUrl': value['backgroundImageUrl'],
        'authorAccountType': AccountTypeToJSON(value['authorAccountType']),
        'userIdToPollResponsesMap': value['userIdToPollResponsesMap'] == null ? undefined : (mapValues(value['userIdToPollResponsesMap'], PollResponseToJSON)),
        'pollOptions': value['pollOptions'],
        'pollDistribution': value['pollDistribution'],
        'pollEndDate': value['pollEndDate'] == null ? undefined : ((value['pollEndDate']).toISOString()),
        'notes': value['notes'] == null ? undefined : ((value['notes'] as Array<any>).map(NoteToJSON)),
        'thread': ThreadToJSON(value['thread']),
        'threadParticipantType': ThreadParticipantTypeToJSON(value['threadParticipantType']),
        'userIdToReactionMap': value['userIdToReactionMap'] == null ? undefined : (mapValues(value['userIdToReactionMap'], ReactionToJSON)),
        'category': CategoryToJSON(value['category']),
    };
}

