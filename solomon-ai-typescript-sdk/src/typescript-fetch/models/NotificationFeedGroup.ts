/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NotificationActivity } from './NotificationActivity';
import {
    NotificationActivityFromJSON,
    NotificationActivityFromJSONTyped,
    NotificationActivityToJSON,
} from './NotificationActivity';

/**
 * 
 * @export
 * @interface NotificationFeedGroup
 */
export interface NotificationFeedGroup {
    /**
     * 
     * @type {string}
     * @memberof NotificationFeedGroup
     */
    activityCount?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationFeedGroup
     */
    actorCount?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationFeedGroup
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationFeedGroup
     */
    group?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationFeedGroup
     */
    feedGroupId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationFeedGroup
     */
    isRead?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationFeedGroup
     */
    isSeen?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationFeedGroup
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationFeedGroup
     */
    verb?: string;
    /**
     * 
     * @type {Array<NotificationActivity>}
     * @memberof NotificationFeedGroup
     */
    activities?: Array<NotificationActivity>;
}

/**
 * Check if a given object implements the NotificationFeedGroup interface.
 */
export function instanceOfNotificationFeedGroup(value: object): boolean {
    return true;
}

export function NotificationFeedGroupFromJSON(json: any): NotificationFeedGroup {
    return NotificationFeedGroupFromJSONTyped(json, false);
}

export function NotificationFeedGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationFeedGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'activityCount': json['activityCount'] == null ? undefined : json['activityCount'],
        'actorCount': json['actorCount'] == null ? undefined : json['actorCount'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'group': json['group'] == null ? undefined : json['group'],
        'feedGroupId': json['feedGroupId'] == null ? undefined : json['feedGroupId'],
        'isRead': json['isRead'] == null ? undefined : json['isRead'],
        'isSeen': json['isSeen'] == null ? undefined : json['isSeen'],
        'updatedAt': json['updatedAt'] == null ? undefined : json['updatedAt'],
        'verb': json['verb'] == null ? undefined : json['verb'],
        'activities': json['activities'] == null ? undefined : ((json['activities'] as Array<any>).map(NotificationActivityFromJSON)),
    };
}

export function NotificationFeedGroupToJSON(value?: NotificationFeedGroup | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'activityCount': value['activityCount'],
        'actorCount': value['actorCount'],
        'createdAt': value['createdAt'],
        'group': value['group'],
        'feedGroupId': value['feedGroupId'],
        'isRead': value['isRead'],
        'isSeen': value['isSeen'],
        'updatedAt': value['updatedAt'],
        'verb': value['verb'],
        'activities': value['activities'] == null ? undefined : ((value['activities'] as Array<any>).map(NotificationActivityToJSON)),
    };
}

