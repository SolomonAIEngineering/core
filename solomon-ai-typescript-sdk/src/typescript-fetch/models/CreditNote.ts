/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreditNoteLineItem } from './CreditNoteLineItem';
import {
    CreditNoteLineItemFromJSON,
    CreditNoteLineItemFromJSONTyped,
    CreditNoteLineItemToJSON,
} from './CreditNoteLineItem';

/**
 * A CreditNote is transaction issued to a customer, indicating a reduction or cancellation of the amount owed by the customer. 
 * It is most generally used as an adjustment note used to rectify errors, returns, or overpayments related to a sales transaction. 
 * A CreditNote can be applied to Accounts Receivable Invoices to decrease the overall amount of the Invoice.
 * @export
 * @interface CreditNote
 */
export interface CreditNote {
    /**
     * 
     * @type {string}
     * @memberof CreditNote
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof CreditNote
     */
    remoteId?: string;
    /**
     * The credit note's transaction date.
     * 
     * Consider using google.protobuf.Timestamp
     * @type {Date}
     * @memberof CreditNote
     */
    transactionDate?: Date;
    /**
     * The credit note's status.
     * @type {string}
     * @memberof CreditNote
     */
    status?: string;
    /**
     * The credit note's number.
     * @type {string}
     * @memberof CreditNote
     */
    number?: string;
    /**
     * The credit note's contact.
     * @type {string}
     * @memberof CreditNote
     */
    contact?: string;
    /**
     * The company the credit note belongs to.
     * @type {string}
     * @memberof CreditNote
     */
    company?: string;
    /**
     * The credit note's exchange rate.
     * 
     * Consider using double or float if this represents a number
     * @type {string}
     * @memberof CreditNote
     */
    exchangeRate?: string;
    /**
     * The credit note's total amount.
     * @type {number}
     * @memberof CreditNote
     */
    totalAmount?: number;
    /**
     * The amount of value remaining in the credit note that the customer can use.
     * @type {number}
     * @memberof CreditNote
     */
    remainingCredit?: number;
    /**
     * 
     * @type {Array<CreditNoteLineItem>}
     * @memberof CreditNote
     */
    lineItems?: Array<CreditNoteLineItem>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreditNote
     */
    trackingCategories?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreditNote
     */
    currency?: string;
    /**
     * 
     * @type {Date}
     * @memberof CreditNote
     */
    remoteCreatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CreditNote
     */
    remoteUpdatedAt?: Date;
    /**
     * These are IDs
     * @type {Array<string>}
     * @memberof CreditNote
     */
    paymentIds?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CreditNote
     */
    remoteWasDeleted?: boolean;
    /**
     * The accounting period that the CreditNote was generated in.
     * @type {string}
     * @memberof CreditNote
     */
    accountingPeriod?: string;
    /**
     * 
     * @type {Date}
     * @memberof CreditNote
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof CreditNote
     */
    mergeRecordId?: string;
    /**
     * 
     * @type {Date}
     * @memberof CreditNote
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the CreditNote interface.
 */
export function instanceOfCreditNote(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreditNoteFromJSON(json: any): CreditNote {
    return CreditNoteFromJSONTyped(json, false);
}

export function CreditNoteFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreditNote {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'transactionDate': !exists(json, 'transactionDate') ? undefined : (new Date(json['transactionDate'])),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'number': !exists(json, 'number') ? undefined : json['number'],
        'contact': !exists(json, 'contact') ? undefined : json['contact'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'exchangeRate': !exists(json, 'exchangeRate') ? undefined : json['exchangeRate'],
        'totalAmount': !exists(json, 'totalAmount') ? undefined : json['totalAmount'],
        'remainingCredit': !exists(json, 'remainingCredit') ? undefined : json['remainingCredit'],
        'lineItems': !exists(json, 'lineItems') ? undefined : ((json['lineItems'] as Array<any>).map(CreditNoteLineItemFromJSON)),
        'trackingCategories': !exists(json, 'trackingCategories') ? undefined : json['trackingCategories'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'remoteCreatedAt': !exists(json, 'remoteCreatedAt') ? undefined : (new Date(json['remoteCreatedAt'])),
        'remoteUpdatedAt': !exists(json, 'remoteUpdatedAt') ? undefined : (new Date(json['remoteUpdatedAt'])),
        'paymentIds': !exists(json, 'paymentIds') ? undefined : json['paymentIds'],
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : json['remoteWasDeleted'],
        'accountingPeriod': !exists(json, 'accountingPeriod') ? undefined : json['accountingPeriod'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'mergeRecordId': !exists(json, 'mergeRecordId') ? undefined : json['mergeRecordId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
    };
}

export function CreditNoteToJSON(value?: CreditNote | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'remoteId': value.remoteId,
        'transactionDate': value.transactionDate === undefined ? undefined : (value.transactionDate.toISOString()),
        'status': value.status,
        'number': value.number,
        'contact': value.contact,
        'company': value.company,
        'exchangeRate': value.exchangeRate,
        'totalAmount': value.totalAmount,
        'remainingCredit': value.remainingCredit,
        'lineItems': value.lineItems === undefined ? undefined : ((value.lineItems as Array<any>).map(CreditNoteLineItemToJSON)),
        'trackingCategories': value.trackingCategories,
        'currency': value.currency,
        'remoteCreatedAt': value.remoteCreatedAt === undefined ? undefined : (value.remoteCreatedAt.toISOString()),
        'remoteUpdatedAt': value.remoteUpdatedAt === undefined ? undefined : (value.remoteUpdatedAt.toISOString()),
        'paymentIds': value.paymentIds,
        'remoteWasDeleted': value.remoteWasDeleted,
        'accountingPeriod': value.accountingPeriod,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'mergeRecordId': value.mergeRecordId,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

