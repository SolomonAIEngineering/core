/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The Forecast table stores information about each forecast generated for a particular goal,
 * including the forecast date, the forecasted amount of money saved or invested for the
 * goal by the target date, and the variance between the forecasted and target amounts.
 * This allows the user to track how well they are progressing towards their goal and make adjustments as needed.
 * @export
 * @interface Forecast
 */
export interface Forecast {
    /**
     * 
     * @type {string}
     * @memberof Forecast
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Forecast
     */
    forecastedAmount?: string;
    /**
     * 
     * @type {string}
     * @memberof Forecast
     */
    forecastedCompletionDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Forecast
     */
    varianceAmount?: string;
}

/**
 * Check if a given object implements the Forecast interface.
 */
export function instanceOfForecast(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ForecastFromJSON(json: any): Forecast {
    return ForecastFromJSONTyped(json, false);
}

export function ForecastFromJSONTyped(json: any, ignoreDiscriminator: boolean): Forecast {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'forecastedAmount': !exists(json, 'forecastedAmount') ? undefined : json['forecastedAmount'],
        'forecastedCompletionDate': !exists(json, 'forecastedCompletionDate') ? undefined : json['forecastedCompletionDate'],
        'varianceAmount': !exists(json, 'varianceAmount') ? undefined : json['varianceAmount'],
    };
}

export function ForecastToJSON(value?: Forecast | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'forecastedAmount': value.forecastedAmount,
        'forecastedCompletionDate': value.forecastedCompletionDate,
        'varianceAmount': value.varianceAmount,
    };
}

