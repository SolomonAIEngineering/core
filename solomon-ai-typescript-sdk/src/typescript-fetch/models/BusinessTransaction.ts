/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionLineItem } from './TransactionLineItem';
import {
    TransactionLineItemFromJSON,
    TransactionLineItemFromJSONTyped,
    TransactionLineItemToJSON,
} from './TransactionLineItem';

/**
 * * Credit Notes
 * * Expenses
 * * Invoices
 * * Journal Entries
 * * Payments
 * * Purchase Orders
 * * Vendor Credits
 * @export
 * @interface BusinessTransaction
 */
export interface BusinessTransaction {
    /**
     * 
     * @type {string}
     * @memberof BusinessTransaction
     */
    id?: string;
    /**
     * The type of transaction, which can by any transaction object not already included in Mergeâ€™s common model.
     * @type {string}
     * @memberof BusinessTransaction
     */
    transactionType?: string;
    /**
     * The transaction's number used for identifying purposes.
     * @type {string}
     * @memberof BusinessTransaction
     */
    number?: string;
    /**
     * The date upon which the transaction occurred.
     * @type {Date}
     * @memberof BusinessTransaction
     */
    transactionDate?: Date;
    /**
     * The transaction's account.
     * @type {string}
     * @memberof BusinessTransaction
     */
    account?: string;
    /**
     * The contact to whom the transaction relates to.
     * @type {string}
     * @memberof BusinessTransaction
     */
    contact?: string;
    /**
     * The total amount being paid after taxes.
     * 
     * Might be better as double.
     * @type {string}
     * @memberof BusinessTransaction
     */
    totalAmount?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTransaction
     */
    currency?: string;
    /**
     * The transaction's exchange rate.
     * 
     * Assuming string, but might be better as float or double.
     * @type {string}
     * @memberof BusinessTransaction
     */
    exchangeRate?: string;
    /**
     * The company the transaction belongs to.
     * @type {string}
     * @memberof BusinessTransaction
     */
    company?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BusinessTransaction
     */
    trackingCategories?: Array<string>;
    /**
     * 
     * @type {Array<TransactionLineItem>}
     * @memberof BusinessTransaction
     */
    lineItems?: Array<TransactionLineItem>;
    /**
     * Indicates whether or not this object has been deleted in the third party platform.
     * @type {boolean}
     * @memberof BusinessTransaction
     */
    remoteWasDeleted?: boolean;
    /**
     * The accounting period that the Transaction was generated in.
     * @type {string}
     * @memberof BusinessTransaction
     */
    accountingPeriod?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTransaction
     */
    mergeRecordId?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessTransaction
     */
    remoteId?: string;
    /**
     * 
     * @type {Date}
     * @memberof BusinessTransaction
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BusinessTransaction
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the BusinessTransaction interface.
 */
export function instanceOfBusinessTransaction(value: object): boolean {
    return true;
}

export function BusinessTransactionFromJSON(json: any): BusinessTransaction {
    return BusinessTransactionFromJSONTyped(json, false);
}

export function BusinessTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): BusinessTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'transactionType': json['transactionType'] == null ? undefined : json['transactionType'],
        'number': json['number'] == null ? undefined : json['number'],
        'transactionDate': json['transactionDate'] == null ? undefined : (new Date(json['transactionDate'])),
        'account': json['account'] == null ? undefined : json['account'],
        'contact': json['contact'] == null ? undefined : json['contact'],
        'totalAmount': json['totalAmount'] == null ? undefined : json['totalAmount'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'exchangeRate': json['exchangeRate'] == null ? undefined : json['exchangeRate'],
        'company': json['company'] == null ? undefined : json['company'],
        'trackingCategories': json['trackingCategories'] == null ? undefined : json['trackingCategories'],
        'lineItems': json['lineItems'] == null ? undefined : ((json['lineItems'] as Array<any>).map(TransactionLineItemFromJSON)),
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'accountingPeriod': json['accountingPeriod'] == null ? undefined : json['accountingPeriod'],
        'mergeRecordId': json['mergeRecordId'] == null ? undefined : json['mergeRecordId'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
    };
}

export function BusinessTransactionToJSON(value?: BusinessTransaction | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'transactionType': value['transactionType'],
        'number': value['number'],
        'transactionDate': value['transactionDate'] == null ? undefined : ((value['transactionDate']).toISOString()),
        'account': value['account'],
        'contact': value['contact'],
        'totalAmount': value['totalAmount'],
        'currency': value['currency'],
        'exchangeRate': value['exchangeRate'],
        'company': value['company'],
        'trackingCategories': value['trackingCategories'],
        'lineItems': value['lineItems'] == null ? undefined : ((value['lineItems'] as Array<any>).map(TransactionLineItemToJSON)),
        'remoteWasDeleted': value['remoteWasDeleted'],
        'accountingPeriod': value['accountingPeriod'],
        'mergeRecordId': value['mergeRecordId'],
        'remoteId': value['remoteId'],
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
    };
}

