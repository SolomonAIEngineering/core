/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BenefitPlanType } from './BenefitPlanType';
import {
    BenefitPlanTypeFromJSON,
    BenefitPlanTypeFromJSONTyped,
    BenefitPlanTypeToJSON,
} from './BenefitPlanType';
import type { EmployeeBenefits } from './EmployeeBenefits';
import {
    EmployeeBenefitsFromJSON,
    EmployeeBenefitsFromJSONTyped,
    EmployeeBenefitsToJSON,
} from './EmployeeBenefits';

/**
 * EmployerBenefits is used to represent a benefit plan offered by a company.
 * @export
 * @interface EmployerBenefits
 */
export interface EmployerBenefits {
    /**
     * 
     * @type {string}
     * @memberof EmployerBenefits
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * 
     * External system identifier (integration)
     * @type {string}
     * @memberof EmployerBenefits
     */
    remoteId?: string;
    /**
     * 
     * @type {BenefitPlanType}
     * @memberof EmployerBenefits
     */
    benefitPlanType?: BenefitPlanType;
    /**
     * The employer benefit's name - typically the carrier or network name.
     * 
     * Name of the benefit plan
     * @type {string}
     * @memberof EmployerBenefits
     */
    name?: string;
    /**
     * The employer benefit's description.
     * 
     * Description of the plan
     * @type {string}
     * @memberof EmployerBenefits
     */
    description?: string;
    /**
     * The employer benefit's deduction code.
     * 
     * Code for payroll deduction
     * @type {string}
     * @memberof EmployerBenefits
     */
    deductionCode?: string;
    /**
     * Indicates whether or not this object has been deleted in the third party platform.
     * 
     * Flag for deletion status
     * @type {Date}
     * @memberof EmployerBenefits
     */
    remoteWasDeleted?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmployerBenefits
     */
    createdAt?: Date;
    /**
     * Last modification date in ISO 8601 format
     * @type {Date}
     * @memberof EmployerBenefits
     */
    modifiedAt?: Date;
    /**
     * Merge record UUID
     * @type {string}
     * @memberof EmployerBenefits
     */
    mergeAccountId?: string;
    /**
     * 
     * @type {Array<EmployeeBenefits>}
     * @memberof EmployerBenefits
     */
    employeeBenefits?: Array<EmployeeBenefits>;
}

/**
 * Check if a given object implements the EmployerBenefits interface.
 */
export function instanceOfEmployerBenefits(value: object): boolean {
    return true;
}

export function EmployerBenefitsFromJSON(json: any): EmployerBenefits {
    return EmployerBenefitsFromJSONTyped(json, false);
}

export function EmployerBenefitsFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmployerBenefits {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'benefitPlanType': json['benefitPlanType'] == null ? undefined : BenefitPlanTypeFromJSON(json['benefitPlanType']),
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'deductionCode': json['deductionCode'] == null ? undefined : json['deductionCode'],
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : (new Date(json['remoteWasDeleted'])),
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'mergeAccountId': json['mergeAccountId'] == null ? undefined : json['mergeAccountId'],
        'employeeBenefits': json['employeeBenefits'] == null ? undefined : ((json['employeeBenefits'] as Array<any>).map(EmployeeBenefitsFromJSON)),
    };
}

export function EmployerBenefitsToJSON(value?: EmployerBenefits | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'remoteId': value['remoteId'],
        'benefitPlanType': BenefitPlanTypeToJSON(value['benefitPlanType']),
        'name': value['name'],
        'description': value['description'],
        'deductionCode': value['deductionCode'],
        'remoteWasDeleted': value['remoteWasDeleted'] == null ? undefined : ((value['remoteWasDeleted']).toISOString()),
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'mergeAccountId': value['mergeAccountId'],
        'employeeBenefits': value['employeeBenefits'] == null ? undefined : ((value['employeeBenefits'] as Array<any>).map(EmployeeBenefitsToJSON)),
    };
}

