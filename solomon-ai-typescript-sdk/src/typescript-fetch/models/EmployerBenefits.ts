/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BenefitPlanType } from './BenefitPlanType';
import {
    BenefitPlanTypeFromJSON,
    BenefitPlanTypeFromJSONTyped,
    BenefitPlanTypeToJSON,
} from './BenefitPlanType';
import type { EmployeeBenefits } from './EmployeeBenefits';
import {
    EmployeeBenefitsFromJSON,
    EmployeeBenefitsFromJSONTyped,
    EmployeeBenefitsToJSON,
} from './EmployeeBenefits';

/**
 * EmployerBenefits is used to represent a benefit plan offered by a company.
 * @export
 * @interface EmployerBenefits
 */
export interface EmployerBenefits {
    /**
     * 
     * @type {string}
     * @memberof EmployerBenefits
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * 
     * External system identifier (integration)
     * @type {string}
     * @memberof EmployerBenefits
     */
    remoteId?: string;
    /**
     * 
     * @type {BenefitPlanType}
     * @memberof EmployerBenefits
     */
    benefitPlanType?: BenefitPlanType;
    /**
     * The employer benefit's name - typically the carrier or network name.
     * 
     * Name of the benefit plan
     * @type {string}
     * @memberof EmployerBenefits
     */
    name?: string;
    /**
     * The employer benefit's description.
     * 
     * Description of the plan
     * @type {string}
     * @memberof EmployerBenefits
     */
    description?: string;
    /**
     * The employer benefit's deduction code.
     * 
     * Code for payroll deduction
     * @type {string}
     * @memberof EmployerBenefits
     */
    deductionCode?: string;
    /**
     * Indicates whether or not this object has been deleted in the third party platform.
     * 
     * Flag for deletion status
     * @type {Date}
     * @memberof EmployerBenefits
     */
    remoteWasDeleted?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmployerBenefits
     */
    createdAt?: Date;
    /**
     * Last modification date in ISO 8601 format
     * @type {Date}
     * @memberof EmployerBenefits
     */
    modifiedAt?: Date;
    /**
     * Merge record UUID
     * @type {string}
     * @memberof EmployerBenefits
     */
    mergeAccountId?: string;
    /**
     * 
     * @type {Array<EmployeeBenefits>}
     * @memberof EmployerBenefits
     */
    employeeBenefits?: Array<EmployeeBenefits>;
}

/**
 * Check if a given object implements the EmployerBenefits interface.
 */
export function instanceOfEmployerBenefits(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EmployerBenefitsFromJSON(json: any): EmployerBenefits {
    return EmployerBenefitsFromJSONTyped(json, false);
}

export function EmployerBenefitsFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmployerBenefits {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'benefitPlanType': !exists(json, 'benefitPlanType') ? undefined : BenefitPlanTypeFromJSON(json['benefitPlanType']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'deductionCode': !exists(json, 'deductionCode') ? undefined : json['deductionCode'],
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : (new Date(json['remoteWasDeleted'])),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'mergeAccountId': !exists(json, 'mergeAccountId') ? undefined : json['mergeAccountId'],
        'employeeBenefits': !exists(json, 'employeeBenefits') ? undefined : ((json['employeeBenefits'] as Array<any>).map(EmployeeBenefitsFromJSON)),
    };
}

export function EmployerBenefitsToJSON(value?: EmployerBenefits | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'remoteId': value.remoteId,
        'benefitPlanType': BenefitPlanTypeToJSON(value.benefitPlanType),
        'name': value.name,
        'description': value.description,
        'deductionCode': value.deductionCode,
        'remoteWasDeleted': value.remoteWasDeleted === undefined ? undefined : (value.remoteWasDeleted.toISOString()),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'mergeAccountId': value.mergeAccountId,
        'employeeBenefits': value.employeeBenefits === undefined ? undefined : ((value.employeeBenefits as Array<any>).map(EmployeeBenefitsToJSON)),
    };
}

