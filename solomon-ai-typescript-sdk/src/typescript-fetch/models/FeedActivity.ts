/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Actor } from './Actor';
import {
    ActorFromJSON,
    ActorFromJSONTyped,
    ActorToJSON,
} from './Actor';
import type { PollPost } from './PollPost';
import {
    PollPostFromJSON,
    PollPostFromJSONTyped,
    PollPostToJSON,
} from './PollPost';
import type { Post } from './Post';
import {
    PostFromJSON,
    PostFromJSONTyped,
    PostToJSON,
} from './Post';
import type { PostType } from './PostType';
import {
    PostTypeFromJSON,
    PostTypeFromJSONTyped,
    PostTypeToJSON,
} from './PostType';
import type { SharedPost } from './SharedPost';
import {
    SharedPostFromJSON,
    SharedPostFromJSONTyped,
    SharedPostToJSON,
} from './SharedPost';

/**
 * 
 * @export
 * @interface FeedActivity
 */
export interface FeedActivity {
    /**
     * 
     * @type {Actor}
     * @memberof FeedActivity
     */
    actor: Actor;
    /**
     * 
     * @type {PostType}
     * @memberof FeedActivity
     */
    verb?: PostType;
    /**
     * 
     * @type {Post}
     * @memberof FeedActivity
     */
    regularPost?: Post;
    /**
     * 
     * @type {SharedPost}
     * @memberof FeedActivity
     */
    sharedPost?: SharedPost;
    /**
     * 
     * @type {PollPost}
     * @memberof FeedActivity
     */
    pollPost?: PollPost;
    /**
     * 
     * @type {string}
     * @memberof FeedActivity
     */
    foreignId?: string;
    /**
     * Object	Describes the target of the activity. The precise meaning of the
     * activity's target is dependent on the activities verb, but will often be
     * the object the English preposition "to". For instance, in the activity,
     * "John saved a movie to his wishlist", the target of the activity is
     * "wishlist".
     * @type {string}
     * @memberof FeedActivity
     */
    target?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedActivity
     */
    time?: string;
    /**
     * 
     * @type {string}
     * @memberof FeedActivity
     */
    origin?: string;
    /**
     * The TO field allows you to specify a list of feeds to which the activity
     * should be copied. One way to think about it is as the CC functionality of
     * email.
     * @type {Array<string>}
     * @memberof FeedActivity
     */
    to?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof FeedActivity
     */
    score?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof FeedActivity
     */
    extra?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof FeedActivity
     */
    getstreamActivityId: string;
}

/**
 * Check if a given object implements the FeedActivity interface.
 */
export function instanceOfFeedActivity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "actor" in value;
    isInstance = isInstance && "getstreamActivityId" in value;

    return isInstance;
}

export function FeedActivityFromJSON(json: any): FeedActivity {
    return FeedActivityFromJSONTyped(json, false);
}

export function FeedActivityFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeedActivity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actor': ActorFromJSON(json['actor']),
        'verb': !exists(json, 'verb') ? undefined : PostTypeFromJSON(json['verb']),
        'regularPost': !exists(json, 'regularPost') ? undefined : PostFromJSON(json['regularPost']),
        'sharedPost': !exists(json, 'sharedPost') ? undefined : SharedPostFromJSON(json['sharedPost']),
        'pollPost': !exists(json, 'pollPost') ? undefined : PollPostFromJSON(json['pollPost']),
        'foreignId': !exists(json, 'foreignId') ? undefined : json['foreignId'],
        'target': !exists(json, 'target') ? undefined : json['target'],
        'time': !exists(json, 'time') ? undefined : json['time'],
        'origin': !exists(json, 'origin') ? undefined : json['origin'],
        'to': !exists(json, 'to') ? undefined : json['to'],
        'score': !exists(json, 'score') ? undefined : json['score'],
        'extra': !exists(json, 'extra') ? undefined : json['extra'],
        'getstreamActivityId': json['getstreamActivityId'],
    };
}

export function FeedActivityToJSON(value?: FeedActivity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actor': ActorToJSON(value.actor),
        'verb': PostTypeToJSON(value.verb),
        'regularPost': PostToJSON(value.regularPost),
        'sharedPost': SharedPostToJSON(value.sharedPost),
        'pollPost': PollPostToJSON(value.pollPost),
        'foreignId': value.foreignId,
        'target': value.target,
        'time': value.time,
        'origin': value.origin,
        'to': value.to,
        'score': value.score,
        'extra': value.extra,
        'getstreamActivityId': value.getstreamActivityId,
    };
}

