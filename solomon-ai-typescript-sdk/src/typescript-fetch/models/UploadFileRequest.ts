/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UploadFileRequest
 */
export interface UploadFileRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequest
     */
    authZeroUserId: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequest
     */
    folderId?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequest
     */
    data?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequest
     */
    name: string;
}

/**
 * Check if a given object implements the UploadFileRequest interface.
 */
export function instanceOfUploadFileRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "authZeroUserId" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function UploadFileRequestFromJSON(json: any): UploadFileRequest {
    return UploadFileRequestFromJSONTyped(json, false);
}

export function UploadFileRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UploadFileRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authZeroUserId': json['authZeroUserId'],
        'folderId': !exists(json, 'folderId') ? undefined : json['folderId'],
        'data': !exists(json, 'data') ? undefined : json['data'],
        'name': json['name'],
    };
}

export function UploadFileRequestToJSON(value?: UploadFileRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authZeroUserId': value.authZeroUserId,
        'folderId': value.folderId,
        'data': value.data,
        'name': value.name,
    };
}

