/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FileMetadata
 */
export interface FileMetadata {
    /**
     * 
     * @type {string}
     * @memberof FileMetadata
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof FileMetadata
     */
    name?: string;
    /**
     * Timestamp when the file was created.
     * @type {Date}
     * @memberof FileMetadata
     */
    createdAt?: Date;
    /**
     * Timestamp when the file was last updated.
     * @type {Date}
     * @memberof FileMetadata
     */
    updatedAt?: Date;
    /**
     * Size of the file in bytes.
     * @type {string}
     * @memberof FileMetadata
     */
    size?: string;
    /**
     * Type of the file (e.g., 'text', 'image', 'video').
     * @type {string}
     * @memberof FileMetadata
     */
    fileType?: string;
    /**
     * Tags associated with the file.
     * @type {Array<string>}
     * @memberof FileMetadata
     */
    tags?: Array<string>;
    /**
     * Flag indicating if the file is marked as deleted.
     * @type {boolean}
     * @memberof FileMetadata
     */
    isDeleted?: boolean;
    /**
     * Version of the file metadata format.
     * @type {number}
     * @memberof FileMetadata
     */
    version?: number;
    /**
     * s3 key path
     * S3 key (path within the S3 bucket) for the file.
     * @type {string}
     * @memberof FileMetadata
     */
    s3Key?: string;
    /**
     * Name of the S3 bucket where the file is stored.
     * @type {string}
     * @memberof FileMetadata
     */
    s3BucketName?: string;
    /**
     * AWS region where the S3 bucket is located.
     * @type {string}
     * @memberof FileMetadata
     */
    s3Region?: string;
    /**
     * Version ID of the file, used when versioning is enabled in the S3 bucket.
     * @type {string}
     * @memberof FileMetadata
     */
    s3VersionId?: string;
    /**
     * Entity tag (ETag) of the file, a hash of the file used for change detection.
     * @type {string}
     * @memberof FileMetadata
     */
    s3Etag?: string;
    /**
     * MIME type of the file.
     * @type {string}
     * @memberof FileMetadata
     */
    s3ContentType?: string;
    /**
     * Size of the file in bytes.
     * @type {string}
     * @memberof FileMetadata
     */
    s3ContentLength?: string;
    /**
     * Encoding format used on the file, if any (e.g., gzip).
     * @type {string}
     * @memberof FileMetadata
     */
    s3ContentEncoding?: string;
    /**
     * How the file is to be presented in a web browser (attachment, inline).
     * @type {string}
     * @memberof FileMetadata
     */
    s3ContentDisposition?: string;
    /**
     * The date and time when the file was last modified in S3.
     * @type {Date}
     * @memberof FileMetadata
     */
    s3LastModified?: Date;
    /**
     * S3 storage class of the file (e.g., STANDARD, INTELLIGENT_TIERING, GLACIER).
     * @type {string}
     * @memberof FileMetadata
     */
    s3StorageClass?: string;
    /**
     * Details of server-side encryption used on the file, if any (e.g., AES256, aws:kms).
     * @type {string}
     * @memberof FileMetadata
     */
    s3ServerSideEncryption?: string;
    /**
     * Access control list (ACL) permissions for the file in S3.
     * @type {string}
     * @memberof FileMetadata
     */
    s3Acl?: string;
    /**
     * Custom metadata added to the file in S3 as key-value pairs.
     * @type {{ [key: string]: string; }}
     * @memberof FileMetadata
     */
    s3Metadata?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof FileMetadata
     */
    versionId?: string;
    /**
     * 
     * @type {string}
     * @memberof FileMetadata
     */
    uploadId?: string;
    /**
     * 
     * @type {string}
     * @memberof FileMetadata
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof FileMetadata
     */
    markdownContent?: string;
}

/**
 * Check if a given object implements the FileMetadata interface.
 */
export function instanceOfFileMetadata(value: object): boolean {
    return true;
}

export function FileMetadataFromJSON(json: any): FileMetadata {
    return FileMetadataFromJSONTyped(json, false);
}

export function FileMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileMetadata {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'size': json['size'] == null ? undefined : json['size'],
        'fileType': json['fileType'] == null ? undefined : json['fileType'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'isDeleted': json['isDeleted'] == null ? undefined : json['isDeleted'],
        'version': json['version'] == null ? undefined : json['version'],
        's3Key': json['s3Key'] == null ? undefined : json['s3Key'],
        's3BucketName': json['s3BucketName'] == null ? undefined : json['s3BucketName'],
        's3Region': json['s3Region'] == null ? undefined : json['s3Region'],
        's3VersionId': json['s3VersionId'] == null ? undefined : json['s3VersionId'],
        's3Etag': json['s3Etag'] == null ? undefined : json['s3Etag'],
        's3ContentType': json['s3ContentType'] == null ? undefined : json['s3ContentType'],
        's3ContentLength': json['s3ContentLength'] == null ? undefined : json['s3ContentLength'],
        's3ContentEncoding': json['s3ContentEncoding'] == null ? undefined : json['s3ContentEncoding'],
        's3ContentDisposition': json['s3ContentDisposition'] == null ? undefined : json['s3ContentDisposition'],
        's3LastModified': json['s3LastModified'] == null ? undefined : (new Date(json['s3LastModified'])),
        's3StorageClass': json['s3StorageClass'] == null ? undefined : json['s3StorageClass'],
        's3ServerSideEncryption': json['s3ServerSideEncryption'] == null ? undefined : json['s3ServerSideEncryption'],
        's3Acl': json['s3Acl'] == null ? undefined : json['s3Acl'],
        's3Metadata': json['s3Metadata'] == null ? undefined : json['s3Metadata'],
        'versionId': json['versionId'] == null ? undefined : json['versionId'],
        'uploadId': json['uploadId'] == null ? undefined : json['uploadId'],
        'location': json['location'] == null ? undefined : json['location'],
        'markdownContent': json['markdownContent'] == null ? undefined : json['markdownContent'],
    };
}

export function FileMetadataToJSON(value?: FileMetadata | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'size': value['size'],
        'fileType': value['fileType'],
        'tags': value['tags'],
        'isDeleted': value['isDeleted'],
        'version': value['version'],
        's3Key': value['s3Key'],
        's3BucketName': value['s3BucketName'],
        's3Region': value['s3Region'],
        's3VersionId': value['s3VersionId'],
        's3Etag': value['s3Etag'],
        's3ContentType': value['s3ContentType'],
        's3ContentLength': value['s3ContentLength'],
        's3ContentEncoding': value['s3ContentEncoding'],
        's3ContentDisposition': value['s3ContentDisposition'],
        's3LastModified': value['s3LastModified'] == null ? undefined : ((value['s3LastModified']).toISOString()),
        's3StorageClass': value['s3StorageClass'],
        's3ServerSideEncryption': value['s3ServerSideEncryption'],
        's3Acl': value['s3Acl'],
        's3Metadata': value['s3Metadata'],
        'versionId': value['versionId'],
        'uploadId': value['uploadId'],
        'location': value['location'],
        'markdownContent': value['markdownContent'],
    };
}

