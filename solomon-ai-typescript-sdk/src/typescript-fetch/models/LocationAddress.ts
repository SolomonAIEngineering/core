/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LocationType } from './LocationType';
import {
    LocationTypeFromJSON,
    LocationTypeFromJSONTyped,
    LocationTypeToJSON,
} from './LocationType';

/**
 * The Location object is used to represent an address that can be associated with an employee.
 * @export
 * @interface LocationAddress
 */
export interface LocationAddress {
    /**
     * 
     * @type {string}
     * @memberof LocationAddress
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationAddress
     */
    remoteId?: string;
    /**
     * The location's name.
     * @type {string}
     * @memberof LocationAddress
     */
    name?: string;
    /**
     * The location's phone number.
     * @type {string}
     * @memberof LocationAddress
     */
    phoneNumber?: string;
    /**
     * Line 1 of the location's street address.
     * @type {string}
     * @memberof LocationAddress
     */
    street1?: string;
    /**
     * Line 2 of the location's street address.
     * @type {string}
     * @memberof LocationAddress
     */
    street2?: string;
    /**
     * The location's city.
     * @type {string}
     * @memberof LocationAddress
     */
    city?: string;
    /**
     * The location's state. Represents a region if outside of the US.
     * @type {string}
     * @memberof LocationAddress
     */
    state?: string;
    /**
     * The location's zip code or postal code.
     * @type {string}
     * @memberof LocationAddress
     */
    zipCode?: string;
    /**
     * The location's country.
     * @type {string}
     * @memberof LocationAddress
     */
    country?: string;
    /**
     * 
     * @type {LocationType}
     * @memberof LocationAddress
     */
    locationType?: LocationType;
    /**
     * Indicates whether or not this object has been deleted in the third party platform.
     * @type {boolean}
     * @memberof LocationAddress
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof LocationAddress
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof LocationAddress
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof LocationAddress
     */
    mergeAccountId?: string;
}

/**
 * Check if a given object implements the LocationAddress interface.
 */
export function instanceOfLocationAddress(value: object): boolean {
    return true;
}

export function LocationAddressFromJSON(json: any): LocationAddress {
    return LocationAddressFromJSONTyped(json, false);
}

export function LocationAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationAddress {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'name': json['name'] == null ? undefined : json['name'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'street1': json['street1'] == null ? undefined : json['street1'],
        'street2': json['street2'] == null ? undefined : json['street2'],
        'city': json['city'] == null ? undefined : json['city'],
        'state': json['state'] == null ? undefined : json['state'],
        'zipCode': json['zipCode'] == null ? undefined : json['zipCode'],
        'country': json['country'] == null ? undefined : json['country'],
        'locationType': json['locationType'] == null ? undefined : LocationTypeFromJSON(json['locationType']),
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'mergeAccountId': json['mergeAccountId'] == null ? undefined : json['mergeAccountId'],
    };
}

export function LocationAddressToJSON(value?: LocationAddress | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'remoteId': value['remoteId'],
        'name': value['name'],
        'phoneNumber': value['phoneNumber'],
        'street1': value['street1'],
        'street2': value['street2'],
        'city': value['city'],
        'state': value['state'],
        'zipCode': value['zipCode'],
        'country': value['country'],
        'locationType': LocationTypeToJSON(value['locationType']),
        'remoteWasDeleted': value['remoteWasDeleted'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'mergeAccountId': value['mergeAccountId'],
    };
}

