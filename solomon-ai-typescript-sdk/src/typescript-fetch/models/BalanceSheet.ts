/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReportItem } from './ReportItem';
import {
    ReportItemFromJSON,
    ReportItemFromJSONTyped,
    ReportItemToJSON,
} from './ReportItem';

/**
 * The BalanceSheet object shows a company’s assets, liabilities, and equity. Assets should be equal
 * to liability and equity combined.  This shows the company’s financial health at a specific point in time.
 * @export
 * @interface BalanceSheet
 */
export interface BalanceSheet {
    /**
     * 
     * @type {string}
     * @memberof BalanceSheet
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof BalanceSheet
     */
    remoteId?: string;
    /**
     * The balance sheet's name.
     * @type {string}
     * @memberof BalanceSheet
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BalanceSheet
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof BalanceSheet
     */
    company?: string;
    /**
     * The balance sheet's date. The balance sheet data will
     *  reflect the company's financial position this point in time.
     * 
     * Consider using google.protobuf.Timestamp
     * @type {Date}
     * @memberof BalanceSheet
     */
    date?: Date;
    /**
     * The balance sheet's net assets.
     * @type {number}
     * @memberof BalanceSheet
     */
    netAssets?: number;
    /**
     * The balance sheet's total assets.
     * @type {Array<ReportItem>}
     * @memberof BalanceSheet
     */
    assets?: Array<ReportItem>;
    /**
     * The balance sheet's total liabilities.
     * @type {Array<ReportItem>}
     * @memberof BalanceSheet
     */
    liabilities?: Array<ReportItem>;
    /**
     * The balance sheet's total equity.
     * @type {Array<ReportItem>}
     * @memberof BalanceSheet
     */
    equity?: Array<ReportItem>;
    /**
     * The time that balance sheet was generated by the accounting system.
     * 
     * Consider using google.protobuf.Timestamp
     * @type {Date}
     * @memberof BalanceSheet
     */
    remoteGeneratedAt?: Date;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof BalanceSheet
     */
    remoteWasDeleted?: boolean;
    /**
     * Consider using google.protobuf.Timestamp
     * @type {Date}
     * @memberof BalanceSheet
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof BalanceSheet
     */
    mergeRecordId?: string;
    /**
     * 
     * @type {Date}
     * @memberof BalanceSheet
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the BalanceSheet interface.
 */
export function instanceOfBalanceSheet(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BalanceSheetFromJSON(json: any): BalanceSheet {
    return BalanceSheetFromJSONTyped(json, false);
}

export function BalanceSheetFromJSONTyped(json: any, ignoreDiscriminator: boolean): BalanceSheet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'netAssets': !exists(json, 'netAssets') ? undefined : json['netAssets'],
        'assets': !exists(json, 'assets') ? undefined : ((json['assets'] as Array<any>).map(ReportItemFromJSON)),
        'liabilities': !exists(json, 'liabilities') ? undefined : ((json['liabilities'] as Array<any>).map(ReportItemFromJSON)),
        'equity': !exists(json, 'equity') ? undefined : ((json['equity'] as Array<any>).map(ReportItemFromJSON)),
        'remoteGeneratedAt': !exists(json, 'remoteGeneratedAt') ? undefined : (new Date(json['remoteGeneratedAt'])),
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : json['remoteWasDeleted'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'mergeRecordId': !exists(json, 'mergeRecordId') ? undefined : json['mergeRecordId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
    };
}

export function BalanceSheetToJSON(value?: BalanceSheet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'remoteId': value.remoteId,
        'name': value.name,
        'currency': value.currency,
        'company': value.company,
        'date': value.date === undefined ? undefined : (value.date.toISOString()),
        'netAssets': value.netAssets,
        'assets': value.assets === undefined ? undefined : ((value.assets as Array<any>).map(ReportItemToJSON)),
        'liabilities': value.liabilities === undefined ? undefined : ((value.liabilities as Array<any>).map(ReportItemToJSON)),
        'equity': value.equity === undefined ? undefined : ((value.equity as Array<any>).map(ReportItemToJSON)),
        'remoteGeneratedAt': value.remoteGeneratedAt === undefined ? undefined : (value.remoteGeneratedAt.toISOString()),
        'remoteWasDeleted': value.remoteWasDeleted,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'mergeRecordId': value.mergeRecordId,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

