/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PublicationType } from './PublicationType';
import {
    PublicationTypeFromJSON,
    PublicationTypeFromJSONTyped,
    PublicationTypeToJSON,
} from './PublicationType';
import type { UserProfile } from './UserProfile';
import {
    UserProfileFromJSON,
    UserProfileFromJSONTyped,
    UserProfileToJSON,
} from './UserProfile';

/**
 * Use Case
 * - An online magazine, a publication with a fixed publication staff that posts stories around a specific topic
 * - A community publication, a publication that accepts stories published around Medium
 * - A company blog, a publication that is created specifically to share company news
 * - A collection of individual stories by a single author that are parts of a larger whole
 * @export
 * @interface Publication
 */
export interface Publication {
    /**
     * 
     * @type {string}
     * @memberof Publication
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Publication
     */
    postIds?: Array<string>;
    /**
     * 
     * @type {UserProfile}
     * @memberof Publication
     */
    admin?: UserProfile;
    /**
     * 
     * @type {string}
     * @memberof Publication
     */
    adminBackendPlatformUserId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Publication
     */
    tags: Array<string>;
    /**
     * 
     * @type {Array<UserProfile>}
     * @memberof Publication
     */
    editors?: Array<UserProfile>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Publication
     */
    subjects: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Publication
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Publication
     */
    createdAt?: string;
    /**
     * 
     * @type {PublicationType}
     * @memberof Publication
     */
    type: PublicationType;
    /**
     * 
     * @type {string}
     * @memberof Publication
     */
    publicationName: string;
}

/**
 * Check if a given object implements the Publication interface.
 */
export function instanceOfPublication(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "adminBackendPlatformUserId" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "subjects" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "publicationName" in value;

    return isInstance;
}

export function PublicationFromJSON(json: any): Publication {
    return PublicationFromJSONTyped(json, false);
}

export function PublicationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Publication {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'postIds': !exists(json, 'postIds') ? undefined : json['postIds'],
        'admin': !exists(json, 'admin') ? undefined : UserProfileFromJSON(json['admin']),
        'adminBackendPlatformUserId': json['adminBackendPlatformUserId'],
        'tags': json['tags'],
        'editors': !exists(json, 'editors') ? undefined : ((json['editors'] as Array<any>).map(UserProfileFromJSON)),
        'subjects': json['subjects'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'type': PublicationTypeFromJSON(json['type']),
        'publicationName': json['publicationName'],
    };
}

export function PublicationToJSON(value?: Publication | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'postIds': value.postIds,
        'admin': UserProfileToJSON(value.admin),
        'adminBackendPlatformUserId': value.adminBackendPlatformUserId,
        'tags': value.tags,
        'editors': value.editors === undefined ? undefined : ((value.editors as Array<any>).map(UserProfileToJSON)),
        'subjects': value.subjects,
        'description': value.description,
        'createdAt': value.createdAt,
        'type': PublicationTypeToJSON(value.type),
        'publicationName': value.publicationName,
    };
}

