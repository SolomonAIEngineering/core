/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmployeePayrollRun } from './EmployeePayrollRun';
import {
    EmployeePayrollRunFromJSON,
    EmployeePayrollRunFromJSONTyped,
    EmployeePayrollRunToJSON,
} from './EmployeePayrollRun';
import type { PayrollRunState } from './PayrollRunState';
import {
    PayrollRunStateFromJSON,
    PayrollRunStateFromJSONTyped,
    PayrollRunStateToJSON,
} from './PayrollRunState';
import type { PayrollRunType } from './PayrollRunType';
import {
    PayrollRunTypeFromJSON,
    PayrollRunTypeFromJSONTyped,
    PayrollRunTypeToJSON,
} from './PayrollRunType';

/**
 * The EmployerPayrollRun object is used to represent a group of pay statements for a specific pay schedule.
 * @export
 * @interface EmployerPayrollRun
 */
export interface EmployerPayrollRun {
    /**
     * 
     * @type {string}
     * @memberof EmployerPayrollRun
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof EmployerPayrollRun
     */
    remoteId?: string;
    /**
     * 
     * @type {PayrollRunState}
     * @memberof EmployerPayrollRun
     */
    runState?: PayrollRunState;
    /**
     * 
     * @type {PayrollRunType}
     * @memberof EmployerPayrollRun
     */
    runType?: PayrollRunType;
    /**
     * The day and time the payroll run started.
     * @type {Date}
     * @memberof EmployerPayrollRun
     */
    startDate?: Date;
    /**
     * The day and time the payroll run ended.
     * @type {Date}
     * @memberof EmployerPayrollRun
     */
    endDate?: Date;
    /**
     * The day and time the payroll run was checked.
     * @type {Date}
     * @memberof EmployerPayrollRun
     */
    checkDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof EmployerPayrollRun
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof EmployerPayrollRun
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmployerPayrollRun
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {Array<EmployeePayrollRun>}
     * @memberof EmployerPayrollRun
     */
    payrollRuns?: Array<EmployeePayrollRun>;
}

/**
 * Check if a given object implements the EmployerPayrollRun interface.
 */
export function instanceOfEmployerPayrollRun(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EmployerPayrollRunFromJSON(json: any): EmployerPayrollRun {
    return EmployerPayrollRunFromJSONTyped(json, false);
}

export function EmployerPayrollRunFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmployerPayrollRun {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'runState': !exists(json, 'runState') ? undefined : PayrollRunStateFromJSON(json['runState']),
        'runType': !exists(json, 'runType') ? undefined : PayrollRunTypeFromJSON(json['runType']),
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'checkDate': !exists(json, 'checkDate') ? undefined : (new Date(json['checkDate'])),
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : json['remoteWasDeleted'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'payrollRuns': !exists(json, 'payrollRuns') ? undefined : ((json['payrollRuns'] as Array<any>).map(EmployeePayrollRunFromJSON)),
    };
}

export function EmployerPayrollRunToJSON(value?: EmployerPayrollRun | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'remoteId': value.remoteId,
        'runState': PayrollRunStateToJSON(value.runState),
        'runType': PayrollRunTypeToJSON(value.runType),
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString()),
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString()),
        'checkDate': value.checkDate === undefined ? undefined : (value.checkDate.toISOString()),
        'remoteWasDeleted': value.remoteWasDeleted,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'payrollRuns': value.payrollRuns === undefined ? undefined : ((value.payrollRuns as Array<any>).map(EmployeePayrollRunToJSON)),
    };
}

