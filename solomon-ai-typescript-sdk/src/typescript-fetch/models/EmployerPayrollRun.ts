/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmployeePayrollRun } from './EmployeePayrollRun';
import {
    EmployeePayrollRunFromJSON,
    EmployeePayrollRunFromJSONTyped,
    EmployeePayrollRunToJSON,
} from './EmployeePayrollRun';
import type { PayrollRunState } from './PayrollRunState';
import {
    PayrollRunStateFromJSON,
    PayrollRunStateFromJSONTyped,
    PayrollRunStateToJSON,
} from './PayrollRunState';
import type { PayrollRunType } from './PayrollRunType';
import {
    PayrollRunTypeFromJSON,
    PayrollRunTypeFromJSONTyped,
    PayrollRunTypeToJSON,
} from './PayrollRunType';

/**
 * The EmployerPayrollRun object is used to represent a group of pay statements for a specific pay schedule.
 * @export
 * @interface EmployerPayrollRun
 */
export interface EmployerPayrollRun {
    /**
     * 
     * @type {string}
     * @memberof EmployerPayrollRun
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof EmployerPayrollRun
     */
    remoteId?: string;
    /**
     * 
     * @type {PayrollRunState}
     * @memberof EmployerPayrollRun
     */
    runState?: PayrollRunState;
    /**
     * 
     * @type {PayrollRunType}
     * @memberof EmployerPayrollRun
     */
    runType?: PayrollRunType;
    /**
     * The day and time the payroll run started.
     * @type {Date}
     * @memberof EmployerPayrollRun
     */
    startDate?: Date;
    /**
     * The day and time the payroll run ended.
     * @type {Date}
     * @memberof EmployerPayrollRun
     */
    endDate?: Date;
    /**
     * The day and time the payroll run was checked.
     * @type {Date}
     * @memberof EmployerPayrollRun
     */
    checkDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof EmployerPayrollRun
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof EmployerPayrollRun
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmployerPayrollRun
     */
    modifiedAt?: Date;
    /**
     * 
     * @type {Array<EmployeePayrollRun>}
     * @memberof EmployerPayrollRun
     */
    payrollRuns?: Array<EmployeePayrollRun>;
}

/**
 * Check if a given object implements the EmployerPayrollRun interface.
 */
export function instanceOfEmployerPayrollRun(value: object): boolean {
    return true;
}

export function EmployerPayrollRunFromJSON(json: any): EmployerPayrollRun {
    return EmployerPayrollRunFromJSONTyped(json, false);
}

export function EmployerPayrollRunFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmployerPayrollRun {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'runState': json['runState'] == null ? undefined : PayrollRunStateFromJSON(json['runState']),
        'runType': json['runType'] == null ? undefined : PayrollRunTypeFromJSON(json['runType']),
        'startDate': json['startDate'] == null ? undefined : (new Date(json['startDate'])),
        'endDate': json['endDate'] == null ? undefined : (new Date(json['endDate'])),
        'checkDate': json['checkDate'] == null ? undefined : (new Date(json['checkDate'])),
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'payrollRuns': json['payrollRuns'] == null ? undefined : ((json['payrollRuns'] as Array<any>).map(EmployeePayrollRunFromJSON)),
    };
}

export function EmployerPayrollRunToJSON(value?: EmployerPayrollRun | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'remoteId': value['remoteId'],
        'runState': PayrollRunStateToJSON(value['runState']),
        'runType': PayrollRunTypeToJSON(value['runType']),
        'startDate': value['startDate'] == null ? undefined : ((value['startDate']).toISOString()),
        'endDate': value['endDate'] == null ? undefined : ((value['endDate']).toISOString()),
        'checkDate': value['checkDate'] == null ? undefined : ((value['checkDate']).toISOString()),
        'remoteWasDeleted': value['remoteWasDeleted'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'payrollRuns': value['payrollRuns'] == null ? undefined : ((value['payrollRuns'] as Array<any>).map(EmployeePayrollRunToJSON)),
    };
}

