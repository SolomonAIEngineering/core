/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuditAction } from './AuditAction';
import {
    AuditActionFromJSON,
    AuditActionFromJSONTyped,
    AuditActionToJSON,
} from './AuditAction';

/**
 * RoleAuditEvents defines the audit record for any changes made to a role.
 * @export
 * @interface RoleAuditEvents
 */
export interface RoleAuditEvents {
    /**
     * 
     * @type {string}
     * @memberof RoleAuditEvents
     */
    id?: string;
    /**
     * 
     * @type {AuditAction}
     * @memberof RoleAuditEvents
     */
    action?: AuditAction;
    /**
     * 
     * @type {string}
     * @memberof RoleAuditEvents
     */
    performedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof RoleAuditEvents
     */
    timestamp?: Date;
    /**
     * Specific fields that were changed (if applicable)
     * @type {Array<string>}
     * @memberof RoleAuditEvents
     */
    affectedFields?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RoleAuditEvents
     */
    previousValues?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RoleAuditEvents
     */
    clientIp?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleAuditEvents
     */
    userAgent?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleAuditEvents
     */
    context?: string;
}

/**
 * Check if a given object implements the RoleAuditEvents interface.
 */
export function instanceOfRoleAuditEvents(value: object): boolean {
    return true;
}

export function RoleAuditEventsFromJSON(json: any): RoleAuditEvents {
    return RoleAuditEventsFromJSONTyped(json, false);
}

export function RoleAuditEventsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoleAuditEvents {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'action': json['action'] == null ? undefined : AuditActionFromJSON(json['action']),
        'performedBy': json['performedBy'] == null ? undefined : json['performedBy'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
        'affectedFields': json['affectedFields'] == null ? undefined : json['affectedFields'],
        'previousValues': json['previousValues'] == null ? undefined : json['previousValues'],
        'clientIp': json['clientIp'] == null ? undefined : json['clientIp'],
        'userAgent': json['userAgent'] == null ? undefined : json['userAgent'],
        'context': json['context'] == null ? undefined : json['context'],
    };
}

export function RoleAuditEventsToJSON(value?: RoleAuditEvents | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'action': AuditActionToJSON(value['action']),
        'performedBy': value['performedBy'],
        'timestamp': value['timestamp'] == null ? undefined : ((value['timestamp']).toISOString()),
        'affectedFields': value['affectedFields'],
        'previousValues': value['previousValues'],
        'clientIp': value['clientIp'],
        'userAgent': value['userAgent'],
        'context': value['context'],
    };
}

