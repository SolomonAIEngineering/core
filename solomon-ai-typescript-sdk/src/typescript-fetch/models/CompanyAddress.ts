/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The CompanyAddress object is used to represent a contact's or company's address.
 * @export
 * @interface CompanyAddress
 */
export interface CompanyAddress {
    /**
     * 
     * @type {string}
     * @memberof CompanyAddress
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyAddress
     */
    type?: string;
    /**
     * Line 1 of the address's street.
     * @type {string}
     * @memberof CompanyAddress
     */
    street1?: string;
    /**
     * Line 2 of the address's street.
     * @type {string}
     * @memberof CompanyAddress
     */
    street2?: string;
    /**
     * The address's city.
     * @type {string}
     * @memberof CompanyAddress
     */
    city?: string;
    /**
     * The address's state or region.
     * @type {string}
     * @memberof CompanyAddress
     */
    state?: string;
    /**
     * Typically, this might just be 'state' but used your field name to keep it consistent with the JSON
     * @type {string}
     * @memberof CompanyAddress
     */
    countrySubdivision?: string;
    /**
     * The address's country.
     * @type {string}
     * @memberof CompanyAddress
     */
    country?: string;
    /**
     * The address's zip code.
     * @type {string}
     * @memberof CompanyAddress
     */
    zipCode?: string;
    /**
     * Consider using google.protobuf.Timestamp if precise time manipulation is required
     * @type {Date}
     * @memberof CompanyAddress
     */
    modifiedAt?: Date;
}

/**
 * Check if a given object implements the CompanyAddress interface.
 */
export function instanceOfCompanyAddress(value: object): boolean {
    return true;
}

export function CompanyAddressFromJSON(json: any): CompanyAddress {
    return CompanyAddressFromJSONTyped(json, false);
}

export function CompanyAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompanyAddress {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'street1': json['street1'] == null ? undefined : json['street1'],
        'street2': json['street2'] == null ? undefined : json['street2'],
        'city': json['city'] == null ? undefined : json['city'],
        'state': json['state'] == null ? undefined : json['state'],
        'countrySubdivision': json['countrySubdivision'] == null ? undefined : json['countrySubdivision'],
        'country': json['country'] == null ? undefined : json['country'],
        'zipCode': json['zipCode'] == null ? undefined : json['zipCode'],
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
    };
}

export function CompanyAddressToJSON(value?: CompanyAddress | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'type': value['type'],
        'street1': value['street1'],
        'street2': value['street2'],
        'city': value['city'],
        'state': value['state'],
        'countrySubdivision': value['countrySubdivision'],
        'country': value['country'],
        'zipCode': value['zipCode'],
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
    };
}

