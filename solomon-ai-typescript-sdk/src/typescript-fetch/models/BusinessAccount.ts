/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
} from './Address';
import type { ProfileType } from './ProfileType';
import {
    ProfileTypeFromJSON,
    ProfileTypeFromJSONTyped,
    ProfileTypeToJSON,
} from './ProfileType';
import type { Settings } from './Settings';
import {
    SettingsFromJSON,
    SettingsFromJSONTyped,
    SettingsToJSON,
} from './Settings';
import type { Tags } from './Tags';
import {
    TagsFromJSON,
    TagsFromJSONTyped,
    TagsToJSON,
} from './Tags';

/**
 * BusinessAccount represents a business account within the context of solomon-ai.
 * @export
 * @interface BusinessAccount
 */
export interface BusinessAccount {
    /**
     * Unique identifier for the business account.
     * @type {string}
     * @memberof BusinessAccount
     */
    id?: string;
    /**
     * Email associated with the business account.
     * @type {string}
     * @memberof BusinessAccount
     */
    email?: string;
    /**
     * 
     * @type {Address}
     * @memberof BusinessAccount
     */
    address?: Address;
    /**
     * Short description of the business account. Maximum of 200 characters.
     * @type {string}
     * @memberof BusinessAccount
     */
    bio?: string;
    /**
     * Headline for the profile of the business account.
     * @type {string}
     * @memberof BusinessAccount
     */
    headline?: string;
    /**
     * Phone number associated with the business account.
     * @type {string}
     * @memberof BusinessAccount
     */
    phoneNumber?: string;
    /**
     * Tags associated with the business account. Between 1 and 10 tags are allowed.
     * @type {Array<Tags>}
     * @memberof BusinessAccount
     */
    tags?: Array<Tags>;
    /**
     * Identifier for the associated authentication service account.
     * @type {string}
     * @memberof BusinessAccount
     */
    authnAccountId?: string;
    /**
     * Indicates whether the business account is active.
     * @type {boolean}
     * @memberof BusinessAccount
     */
    isActive?: boolean;
    /**
     * Username for the business account. Must be at least 10 characters long.
     * @type {string}
     * @memberof BusinessAccount
     */
    username?: string;
    /**
     * Indicates whether the business account is private.
     * @type {boolean}
     * @memberof BusinessAccount
     */
    isPrivate?: boolean;
    /**
     * Indicates whether the email associated with the business account has been verified.
     * @type {boolean}
     * @memberof BusinessAccount
     */
    isEmailVerified?: boolean;
    /**
     * Timestamp indicating when the business account was created.
     * @type {Date}
     * @memberof BusinessAccount
     */
    createdAt?: Date;
    /**
     * Timestamp indicating when the email for the business account was verified.
     * @type {Date}
     * @memberof BusinessAccount
     */
    verifiedAt?: Date;
    /**
     * Date when the company associated with the business account was established.
     * @type {string}
     * @memberof BusinessAccount
     */
    companyEstablishedDate?: string;
    /**
     * Industry type of the company associated with the business account.
     * @type {string}
     * @memberof BusinessAccount
     */
    companyIndustryType?: string;
    /**
     * Website URL of the company associated with the business account.
     * @type {string}
     * @memberof BusinessAccount
     */
    companyWebsiteUrl?: string;
    /**
     * Description of the company associated with the business account.
     * @type {string}
     * @memberof BusinessAccount
     */
    companyDescription?: string;
    /**
     * Name of the company associated with the business account.
     * @type {string}
     * @memberof BusinessAccount
     */
    companyName?: string;
    /**
     * 
     * @type {Settings}
     * @memberof BusinessAccount
     */
    settings?: Settings;
    /**
     * 
     * @type {ProfileType}
     * @memberof BusinessAccount
     */
    accountType?: ProfileType;
    /**
     * Profile image associated with the user account.
     * @type {string}
     * @memberof BusinessAccount
     */
    profileImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessAccount
     */
    auth0UserId?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessAccount
     */
    algoliaUserId?: string;
}

/**
 * Check if a given object implements the BusinessAccount interface.
 */
export function instanceOfBusinessAccount(value: object): boolean {
    return true;
}

export function BusinessAccountFromJSON(json: any): BusinessAccount {
    return BusinessAccountFromJSONTyped(json, false);
}

export function BusinessAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): BusinessAccount {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'email': json['email'] == null ? undefined : json['email'],
        'address': json['address'] == null ? undefined : AddressFromJSON(json['address']),
        'bio': json['bio'] == null ? undefined : json['bio'],
        'headline': json['headline'] == null ? undefined : json['headline'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(TagsFromJSON)),
        'authnAccountId': json['authnAccountId'] == null ? undefined : json['authnAccountId'],
        'isActive': json['isActive'] == null ? undefined : json['isActive'],
        'username': json['username'] == null ? undefined : json['username'],
        'isPrivate': json['isPrivate'] == null ? undefined : json['isPrivate'],
        'isEmailVerified': json['isEmailVerified'] == null ? undefined : json['isEmailVerified'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'verifiedAt': json['verifiedAt'] == null ? undefined : (new Date(json['verifiedAt'])),
        'companyEstablishedDate': json['companyEstablishedDate'] == null ? undefined : json['companyEstablishedDate'],
        'companyIndustryType': json['companyIndustryType'] == null ? undefined : json['companyIndustryType'],
        'companyWebsiteUrl': json['companyWebsiteUrl'] == null ? undefined : json['companyWebsiteUrl'],
        'companyDescription': json['companyDescription'] == null ? undefined : json['companyDescription'],
        'companyName': json['companyName'] == null ? undefined : json['companyName'],
        'settings': json['settings'] == null ? undefined : SettingsFromJSON(json['settings']),
        'accountType': json['accountType'] == null ? undefined : ProfileTypeFromJSON(json['accountType']),
        'profileImageUrl': json['profileImageUrl'] == null ? undefined : json['profileImageUrl'],
        'auth0UserId': json['auth0UserId'] == null ? undefined : json['auth0UserId'],
        'algoliaUserId': json['algoliaUserId'] == null ? undefined : json['algoliaUserId'],
    };
}

export function BusinessAccountToJSON(value?: BusinessAccount | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'email': value['email'],
        'address': AddressToJSON(value['address']),
        'bio': value['bio'],
        'headline': value['headline'],
        'phoneNumber': value['phoneNumber'],
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(TagsToJSON)),
        'authnAccountId': value['authnAccountId'],
        'isActive': value['isActive'],
        'username': value['username'],
        'isPrivate': value['isPrivate'],
        'isEmailVerified': value['isEmailVerified'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'verifiedAt': value['verifiedAt'] == null ? undefined : ((value['verifiedAt']).toISOString()),
        'companyEstablishedDate': value['companyEstablishedDate'],
        'companyIndustryType': value['companyIndustryType'],
        'companyWebsiteUrl': value['companyWebsiteUrl'],
        'companyDescription': value['companyDescription'],
        'companyName': value['companyName'],
        'settings': SettingsToJSON(value['settings']),
        'accountType': ProfileTypeToJSON(value['accountType']),
        'profileImageUrl': value['profileImageUrl'],
        'auth0UserId': value['auth0UserId'],
        'algoliaUserId': value['algoliaUserId'],
    };
}

