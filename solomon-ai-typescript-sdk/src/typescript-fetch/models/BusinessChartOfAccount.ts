/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The Account object is what companies use to track transactions. 
 * They can be both bank accounts or a general ledger account (also called a chart of accounts).
 * 
 * Note: a company can have a multitude of these accounts
 * @export
 * @interface BusinessChartOfAccount
 */
export interface BusinessChartOfAccount {
    /**
     * 
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    mergeRecordId: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    remoteId?: string;
    /**
     * The account's name.
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    name?: string;
    /**
     * The account's description.
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    description?: string;
    /**
     * The account's broadest grouping. Possible values include: ASSET, EQUITY, EXPENSE, 
     * LIABILITY, REVENUE. In cases where there is no clear mapping, the original 
     * value passed through will be returned.
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    classification?: string;
    /**
     * The account's type is a narrower and more specific grouping within the account's classification.
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    type?: string;
    /**
     * The account's status. Possible values include: ACTIVE, PENDING, INACTIVE. In cases where there is
     *  no clear mapping, the original value passed through will be returned.
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    status?: string;
    /**
     * The account's current balance.
     * @type {number}
     * @memberof BusinessChartOfAccount
     */
    currentBalance?: number;
    /**
     * 
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    currency?: string;
    /**
     * The account's number.
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    accountNumber?: string;
    /**
     * ID of the parent account.
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    parentAccountId?: string;
    /**
     * The company the account belongs to.
     * @type {string}
     * @memberof BusinessChartOfAccount
     */
    company?: string;
    /**
     * 
     * @type {Date}
     * @memberof BusinessChartOfAccount
     */
    modifiedAt?: Date;
    /**
     * Indicates whether or not this object has been deleted by third party webhooks.
     * @type {boolean}
     * @memberof BusinessChartOfAccount
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof BusinessChartOfAccount
     */
    createdAt?: Date;
}

/**
 * Check if a given object implements the BusinessChartOfAccount interface.
 */
export function instanceOfBusinessChartOfAccount(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "mergeRecordId" in value;

    return isInstance;
}

export function BusinessChartOfAccountFromJSON(json: any): BusinessChartOfAccount {
    return BusinessChartOfAccountFromJSONTyped(json, false);
}

export function BusinessChartOfAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): BusinessChartOfAccount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'mergeRecordId': json['mergeRecordId'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'classification': !exists(json, 'classification') ? undefined : json['classification'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'currentBalance': !exists(json, 'currentBalance') ? undefined : json['currentBalance'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'accountNumber': !exists(json, 'accountNumber') ? undefined : json['accountNumber'],
        'parentAccountId': !exists(json, 'parentAccountId') ? undefined : json['parentAccountId'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : json['remoteWasDeleted'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
    };
}

export function BusinessChartOfAccountToJSON(value?: BusinessChartOfAccount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'mergeRecordId': value.mergeRecordId,
        'remoteId': value.remoteId,
        'name': value.name,
        'description': value.description,
        'classification': value.classification,
        'type': value.type,
        'status': value.status,
        'currentBalance': value.currentBalance,
        'currency': value.currency,
        'accountNumber': value.accountNumber,
        'parentAccountId': value.parentAccountId,
        'company': value.company,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'remoteWasDeleted': value.remoteWasDeleted,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
    };
}

