/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 *  - TASK_STATE_UNSPECIFIED: The zero value is omitted in proto3 by convention if it's not used.
 * In your case, since you start your iota with 1, we will not define a zero value.
 *  - TASK_STATE_ACTIVE: Indicates that the task is currently being processed by Handler.
 *  - TASK_STATE_PENDING: Indicates that the task is ready to be processed by Handler.
 *  - TASK_STATE_SCHEDULED: Indicates that the task is scheduled to be processed some time in the future.
 *  - TASK_STATE_RETRY: Indicates that the task has previously failed and scheduled to be processed some time in the future.
 *  - TASK_STATE_ARCHIVED: Indicates that the task is archived and stored for inspection purposes.
 *  - TASK_STATE_COMPLETED: Indicates that the task is processed successfully and retained until the retention TTL expires.
 *  - TASK_STATE_AGGREGATING: Indicates that the task is waiting in a group to be aggregated into one task.
 *  - TASK_STATE_FAILED: Indicates that the task has failed and will not be retried.
 * @export
 */
export const TaskState = {
    Unspecified: 'TASK_STATE_UNSPECIFIED',
    Active: 'TASK_STATE_ACTIVE',
    Pending: 'TASK_STATE_PENDING',
    Scheduled: 'TASK_STATE_SCHEDULED',
    Retry: 'TASK_STATE_RETRY',
    Archived: 'TASK_STATE_ARCHIVED',
    Completed: 'TASK_STATE_COMPLETED',
    Aggregating: 'TASK_STATE_AGGREGATING',
    Failed: 'TASK_STATE_FAILED'
} as const;
export type TaskState = typeof TaskState[keyof typeof TaskState];


export function TaskStateFromJSON(json: any): TaskState {
    return TaskStateFromJSONTyped(json, false);
}

export function TaskStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskState {
    return json as TaskState;
}

export function TaskStateToJSON(value?: TaskState | null): any {
    return value as any;
}

