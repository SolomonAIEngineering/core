/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BusinessAccount } from './BusinessAccount';
import {
    BusinessAccountFromJSON,
    BusinessAccountFromJSONTyped,
    BusinessAccountToJSON,
} from './BusinessAccount';
import type { RoleAuditEvents } from './RoleAuditEvents';
import {
    RoleAuditEventsFromJSON,
    RoleAuditEventsFromJSONTyped,
    RoleAuditEventsToJSON,
} from './RoleAuditEvents';
import type { RoleType } from './RoleType';
import {
    RoleTypeFromJSON,
    RoleTypeFromJSONTyped,
    RoleTypeToJSON,
} from './RoleType';
import type { Team } from './Team';
import {
    TeamFromJSON,
    TeamFromJSONTyped,
    TeamToJSON,
} from './Team';
import type { UserAccount } from './UserAccount';
import {
    UserAccountFromJSON,
    UserAccountFromJSONTyped,
    UserAccountToJSON,
} from './UserAccount';

/**
 * Role defines the role of a user in the system with specific permissions.
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * Unique identifier for the role.
     * @type {string}
     * @memberof Role
     */
    id?: string;
    /**
     * Name of the role.
     * @type {string}
     * @memberof Role
     */
    name?: string;
    /**
     * 
     * @type {RoleType}
     * @memberof Role
     */
    type?: RoleType;
    /**
     * Permissions related to user management.
     * @type {boolean}
     * @memberof Role
     */
    canCreateUsers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    canReadUsers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    canUpdateUsers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    canDeleteUsers?: boolean;
    /**
     * Permissions related to project management.
     * @type {boolean}
     * @memberof Role
     */
    canCreateProjects?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    canReadProjects?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    canUpdateProjects?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    canDeleteProjects?: boolean;
    /**
     * Permissions related to report management.
     * @type {boolean}
     * @memberof Role
     */
    canCreateReports?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    canReadReports?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    canUpdateReports?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    canDeleteReports?: boolean;
    /**
     * Add more permissions as necessary for other modules or features.
     * Timestamps for tracking creation and modification times.
     * @type {Date}
     * @memberof Role
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Role
     */
    updatedAt?: Date;
    /**
     * Audit log for this role.
     * @type {Array<RoleAuditEvents>}
     * @memberof Role
     */
    auditLog?: Array<RoleAuditEvents>;
    /**
     * 
     * @type {Team}
     * @memberof Role
     */
    team?: Team;
    /**
     * 
     * @type {UserAccount}
     * @memberof Role
     */
    user?: UserAccount;
    /**
     * 
     * @type {BusinessAccount}
     * @memberof Role
     */
    business?: BusinessAccount;
}

/**
 * Check if a given object implements the Role interface.
 */
export function instanceOfRole(value: object): boolean {
    return true;
}

export function RoleFromJSON(json: any): Role {
    return RoleFromJSONTyped(json, false);
}

export function RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Role {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'type': json['type'] == null ? undefined : RoleTypeFromJSON(json['type']),
        'canCreateUsers': json['canCreateUsers'] == null ? undefined : json['canCreateUsers'],
        'canReadUsers': json['canReadUsers'] == null ? undefined : json['canReadUsers'],
        'canUpdateUsers': json['canUpdateUsers'] == null ? undefined : json['canUpdateUsers'],
        'canDeleteUsers': json['canDeleteUsers'] == null ? undefined : json['canDeleteUsers'],
        'canCreateProjects': json['canCreateProjects'] == null ? undefined : json['canCreateProjects'],
        'canReadProjects': json['canReadProjects'] == null ? undefined : json['canReadProjects'],
        'canUpdateProjects': json['canUpdateProjects'] == null ? undefined : json['canUpdateProjects'],
        'canDeleteProjects': json['canDeleteProjects'] == null ? undefined : json['canDeleteProjects'],
        'canCreateReports': json['canCreateReports'] == null ? undefined : json['canCreateReports'],
        'canReadReports': json['canReadReports'] == null ? undefined : json['canReadReports'],
        'canUpdateReports': json['canUpdateReports'] == null ? undefined : json['canUpdateReports'],
        'canDeleteReports': json['canDeleteReports'] == null ? undefined : json['canDeleteReports'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'auditLog': json['auditLog'] == null ? undefined : ((json['auditLog'] as Array<any>).map(RoleAuditEventsFromJSON)),
        'team': json['team'] == null ? undefined : TeamFromJSON(json['team']),
        'user': json['user'] == null ? undefined : UserAccountFromJSON(json['user']),
        'business': json['business'] == null ? undefined : BusinessAccountFromJSON(json['business']),
    };
}

export function RoleToJSON(value?: Role | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'type': RoleTypeToJSON(value['type']),
        'canCreateUsers': value['canCreateUsers'],
        'canReadUsers': value['canReadUsers'],
        'canUpdateUsers': value['canUpdateUsers'],
        'canDeleteUsers': value['canDeleteUsers'],
        'canCreateProjects': value['canCreateProjects'],
        'canReadProjects': value['canReadProjects'],
        'canUpdateProjects': value['canUpdateProjects'],
        'canDeleteProjects': value['canDeleteProjects'],
        'canCreateReports': value['canCreateReports'],
        'canReadReports': value['canReadReports'],
        'canUpdateReports': value['canUpdateReports'],
        'canDeleteReports': value['canDeleteReports'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'auditLog': value['auditLog'] == null ? undefined : ((value['auditLog'] as Array<any>).map(RoleAuditEventsToJSON)),
        'team': TeamToJSON(value['team']),
        'user': UserAccountToJSON(value['user']),
        'business': BusinessAccountToJSON(value['business']),
    };
}

