/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LinkedAccountingAccount } from './LinkedAccountingAccount';
import {
    LinkedAccountingAccountFromJSON,
    LinkedAccountingAccountFromJSONTyped,
    LinkedAccountingAccountToJSON,
} from './LinkedAccountingAccount';
import type { MergeLinkedAccountToken } from './MergeLinkedAccountToken';
import {
    MergeLinkedAccountTokenFromJSON,
    MergeLinkedAccountTokenFromJSONTyped,
    MergeLinkedAccountTokenToJSON,
} from './MergeLinkedAccountToken';

/**
 * 
 * @export
 * @interface AccountingIntegrationMergeLink
 */
export interface AccountingIntegrationMergeLink {
    /**
     * Unique identifier for the merge link.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    id?: string;
    /**
     * The integration name.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    integration?: string;
    /**
     * The slug for the integration.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    integrationSlug?: string;
    /**
     * The category of the integration.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    category?: string;
    /**
     * Identifier of the end user's origin.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    endUserOriginId?: string;
    /**
     * Name of the end user's organization.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    endUserOrganizationName?: string;
    /**
     * Email address of the end user.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    endUserEmailAddress?: string;
    /**
     * Status of the merge link.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    status?: string;
    /**
     * URL for the webhook listener associated with the merge link.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    webhookListenerUrl?: string;
    /**
     * Indicates whether the merge link is a duplicate.
     * @type {boolean}
     * @memberof AccountingIntegrationMergeLink
     */
    isDuplicate?: boolean;
    /**
     * 
     * @type {MergeLinkedAccountToken}
     * @memberof AccountingIntegrationMergeLink
     */
    token?: MergeLinkedAccountToken;
    /**
     * Name of the integration.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    integrationName?: string;
    /**
     * URL of the integration's image.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    integrationImage?: string;
    /**
     * URL of the integration's square image.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    integrationSquareImage?: string;
    /**
     * 
     * @type {LinkedAccountingAccount}
     * @memberof AccountingIntegrationMergeLink
     */
    account?: LinkedAccountingAccount;
    /**
     * Identifier of the merged linked account.
     * @type {string}
     * @memberof AccountingIntegrationMergeLink
     */
    mergeLinkedAccountId?: string;
    /**
     * Timestamp indicating when the merge link was last modified.
     * @type {Date}
     * @memberof AccountingIntegrationMergeLink
     */
    lastModifiedAt?: Date;
}

/**
 * Check if a given object implements the AccountingIntegrationMergeLink interface.
 */
export function instanceOfAccountingIntegrationMergeLink(value: object): boolean {
    return true;
}

export function AccountingIntegrationMergeLinkFromJSON(json: any): AccountingIntegrationMergeLink {
    return AccountingIntegrationMergeLinkFromJSONTyped(json, false);
}

export function AccountingIntegrationMergeLinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountingIntegrationMergeLink {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'integration': json['integration'] == null ? undefined : json['integration'],
        'integrationSlug': json['integrationSlug'] == null ? undefined : json['integrationSlug'],
        'category': json['category'] == null ? undefined : json['category'],
        'endUserOriginId': json['endUserOriginId'] == null ? undefined : json['endUserOriginId'],
        'endUserOrganizationName': json['endUserOrganizationName'] == null ? undefined : json['endUserOrganizationName'],
        'endUserEmailAddress': json['endUserEmailAddress'] == null ? undefined : json['endUserEmailAddress'],
        'status': json['status'] == null ? undefined : json['status'],
        'webhookListenerUrl': json['webhookListenerUrl'] == null ? undefined : json['webhookListenerUrl'],
        'isDuplicate': json['isDuplicate'] == null ? undefined : json['isDuplicate'],
        'token': json['token'] == null ? undefined : MergeLinkedAccountTokenFromJSON(json['token']),
        'integrationName': json['integrationName'] == null ? undefined : json['integrationName'],
        'integrationImage': json['integrationImage'] == null ? undefined : json['integrationImage'],
        'integrationSquareImage': json['integrationSquareImage'] == null ? undefined : json['integrationSquareImage'],
        'account': json['account'] == null ? undefined : LinkedAccountingAccountFromJSON(json['account']),
        'mergeLinkedAccountId': json['mergeLinkedAccountId'] == null ? undefined : json['mergeLinkedAccountId'],
        'lastModifiedAt': json['lastModifiedAt'] == null ? undefined : (new Date(json['lastModifiedAt'])),
    };
}

export function AccountingIntegrationMergeLinkToJSON(value?: AccountingIntegrationMergeLink | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'integration': value['integration'],
        'integrationSlug': value['integrationSlug'],
        'category': value['category'],
        'endUserOriginId': value['endUserOriginId'],
        'endUserOrganizationName': value['endUserOrganizationName'],
        'endUserEmailAddress': value['endUserEmailAddress'],
        'status': value['status'],
        'webhookListenerUrl': value['webhookListenerUrl'],
        'isDuplicate': value['isDuplicate'],
        'token': MergeLinkedAccountTokenToJSON(value['token']),
        'integrationName': value['integrationName'],
        'integrationImage': value['integrationImage'],
        'integrationSquareImage': value['integrationSquareImage'],
        'account': LinkedAccountingAccountToJSON(value['account']),
        'mergeLinkedAccountId': value['mergeLinkedAccountId'],
        'lastModifiedAt': value['lastModifiedAt'] == null ? undefined : ((value['lastModifiedAt']).toISOString()),
    };
}

