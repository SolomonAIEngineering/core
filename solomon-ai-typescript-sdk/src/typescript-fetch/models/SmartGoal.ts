/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Forecast } from './Forecast';
import {
    ForecastFromJSON,
    ForecastFromJSONTyped,
    ForecastToJSON,
} from './Forecast';
import type { GoalType } from './GoalType';
import {
    GoalTypeFromJSON,
    GoalTypeFromJSONTyped,
    GoalTypeToJSON,
} from './GoalType';
import type { Milestone } from './Milestone';
import {
    MilestoneFromJSON,
    MilestoneFromJSONTyped,
    MilestoneToJSON,
} from './Milestone';
import type { SmartNote } from './SmartNote';
import {
    SmartNoteFromJSON,
    SmartNoteFromJSONTyped,
    SmartNoteToJSON,
} from './SmartNote';

/**
 * SmartGoal: The Goals table stores information about each financial goal, including the name of the goal,
 * its description, the target amount of money the user wants to save or invest, and the expected date of completion.
 * 
 * The Goals table also includes columns for the start date of the goal, the current amount of money saved or
 * invested towards the goal, and a boolean flag indicating whether the goal has been achieved.
 * These additional columns allow the user to track their progress towards the goal and see how much
 * more they need to save or invest to reach their target amount.
 * @export
 * @interface SmartGoal
 */
export interface SmartGoal {
    /**
     * 
     * @type {string}
     * @memberof SmartGoal
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SmartGoal
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof SmartGoal
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SmartGoal
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SmartGoal
     */
    isCompleted?: boolean;
    /**
     * 
     * @type {GoalType}
     * @memberof SmartGoal
     */
    goalType?: GoalType;
    /**
     * 
     * @type {string}
     * @memberof SmartGoal
     */
    duration?: string;
    /**
     * 
     * @type {string}
     * @memberof SmartGoal
     */
    startDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SmartGoal
     */
    endDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SmartGoal
     */
    targetAmount?: string;
    /**
     * 
     * @type {string}
     * @memberof SmartGoal
     */
    currentAmount?: string;
    /**
     * 
     * @type {Array<Milestone>}
     * @memberof SmartGoal
     */
    milestones?: Array<Milestone>;
    /**
     * 
     * @type {Forecast}
     * @memberof SmartGoal
     */
    forecasts?: Forecast;
    /**
     * 
     * @type {Array<SmartNote>}
     * @memberof SmartGoal
     */
    notes?: Array<SmartNote>;
}

/**
 * Check if a given object implements the SmartGoal interface.
 */
export function instanceOfSmartGoal(value: object): boolean {
    return true;
}

export function SmartGoalFromJSON(json: any): SmartGoal {
    return SmartGoalFromJSONTyped(json, false);
}

export function SmartGoalFromJSONTyped(json: any, ignoreDiscriminator: boolean): SmartGoal {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'isCompleted': json['isCompleted'] == null ? undefined : json['isCompleted'],
        'goalType': json['goalType'] == null ? undefined : GoalTypeFromJSON(json['goalType']),
        'duration': json['duration'] == null ? undefined : json['duration'],
        'startDate': json['startDate'] == null ? undefined : json['startDate'],
        'endDate': json['endDate'] == null ? undefined : json['endDate'],
        'targetAmount': json['targetAmount'] == null ? undefined : json['targetAmount'],
        'currentAmount': json['currentAmount'] == null ? undefined : json['currentAmount'],
        'milestones': json['milestones'] == null ? undefined : ((json['milestones'] as Array<any>).map(MilestoneFromJSON)),
        'forecasts': json['forecasts'] == null ? undefined : ForecastFromJSON(json['forecasts']),
        'notes': json['notes'] == null ? undefined : ((json['notes'] as Array<any>).map(SmartNoteFromJSON)),
    };
}

export function SmartGoalToJSON(value?: SmartGoal | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'userId': value['userId'],
        'name': value['name'],
        'description': value['description'],
        'isCompleted': value['isCompleted'],
        'goalType': GoalTypeToJSON(value['goalType']),
        'duration': value['duration'],
        'startDate': value['startDate'],
        'endDate': value['endDate'],
        'targetAmount': value['targetAmount'],
        'currentAmount': value['currentAmount'],
        'milestones': value['milestones'] == null ? undefined : ((value['milestones'] as Array<any>).map(MilestoneToJSON)),
        'forecasts': ForecastToJSON(value['forecasts']),
        'notes': value['notes'] == null ? undefined : ((value['notes'] as Array<any>).map(SmartNoteToJSON)),
    };
}

