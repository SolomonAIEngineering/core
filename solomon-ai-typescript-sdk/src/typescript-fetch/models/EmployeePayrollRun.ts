/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Deduction } from './Deduction';
import {
    DeductionFromJSON,
    DeductionFromJSONTyped,
    DeductionToJSON,
} from './Deduction';
import type { Earning } from './Earning';
import {
    EarningFromJSON,
    EarningFromJSONTyped,
    EarningToJSON,
} from './Earning';
import type { Tax } from './Tax';
import {
    TaxFromJSON,
    TaxFromJSONTyped,
    TaxToJSON,
} from './Tax';

/**
 * The EmployeePayrollRun object is used to represent an employee's pay statement for a specific payroll run.
 * @export
 * @interface EmployeePayrollRun
 */
export interface EmployeePayrollRun {
    /**
     * 
     * @type {string}
     * @memberof EmployeePayrollRun
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof EmployeePayrollRun
     */
    remoteId?: string;
    /**
     * The total earnings throughout a given period for an employee before any deductions are made.
     * @type {number}
     * @memberof EmployeePayrollRun
     */
    grossPay?: number;
    /**
     * The take-home pay throughout a given period for an employee after deductions are made.
     * @type {number}
     * @memberof EmployeePayrollRun
     */
    netPay?: number;
    /**
     * The day and time the payroll run started.
     * @type {Date}
     * @memberof EmployeePayrollRun
     */
    startDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmployeePayrollRun
     */
    endDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmployeePayrollRun
     */
    checkDate?: Date;
    /**
     * 
     * @type {Array<Earning>}
     * @memberof EmployeePayrollRun
     */
    earnings?: Array<Earning>;
    /**
     * The Deduction object is used to represent an array of the wages withheld 
     * from total earnings for the purpose of paying taxes.
     * @type {Array<Deduction>}
     * @memberof EmployeePayrollRun
     */
    deductions?: Array<Deduction>;
    /**
     * The Tax object is used to represent an array of the tax deductions 
     * for a given employee's payroll run.
     * @type {Array<Tax>}
     * @memberof EmployeePayrollRun
     */
    taxes?: Array<Tax>;
    /**
     * Indicates whether or not this object has been deleted in the third party platform.
     * @type {boolean}
     * @memberof EmployeePayrollRun
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof EmployeePayrollRun
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmployeePayrollRun
     */
    modifiedAt?: Date;
    /**
     * The payroll being run.
     * @type {string}
     * @memberof EmployeePayrollRun
     */
    payrollRunMergeAccountId?: string;
    /**
     * The employee whose payroll is being run.
     * @type {string}
     * @memberof EmployeePayrollRun
     */
    employeeMergeAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeePayrollRun
     */
    mergeAccountId?: string;
}

/**
 * Check if a given object implements the EmployeePayrollRun interface.
 */
export function instanceOfEmployeePayrollRun(value: object): boolean {
    return true;
}

export function EmployeePayrollRunFromJSON(json: any): EmployeePayrollRun {
    return EmployeePayrollRunFromJSONTyped(json, false);
}

export function EmployeePayrollRunFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmployeePayrollRun {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'remoteId': json['remoteId'] == null ? undefined : json['remoteId'],
        'grossPay': json['grossPay'] == null ? undefined : json['grossPay'],
        'netPay': json['netPay'] == null ? undefined : json['netPay'],
        'startDate': json['startDate'] == null ? undefined : (new Date(json['startDate'])),
        'endDate': json['endDate'] == null ? undefined : (new Date(json['endDate'])),
        'checkDate': json['checkDate'] == null ? undefined : (new Date(json['checkDate'])),
        'earnings': json['earnings'] == null ? undefined : ((json['earnings'] as Array<any>).map(EarningFromJSON)),
        'deductions': json['deductions'] == null ? undefined : ((json['deductions'] as Array<any>).map(DeductionFromJSON)),
        'taxes': json['taxes'] == null ? undefined : ((json['taxes'] as Array<any>).map(TaxFromJSON)),
        'remoteWasDeleted': json['remoteWasDeleted'] == null ? undefined : json['remoteWasDeleted'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': json['modifiedAt'] == null ? undefined : (new Date(json['modifiedAt'])),
        'payrollRunMergeAccountId': json['payrollRunMergeAccountId'] == null ? undefined : json['payrollRunMergeAccountId'],
        'employeeMergeAccountId': json['employeeMergeAccountId'] == null ? undefined : json['employeeMergeAccountId'],
        'mergeAccountId': json['mergeAccountId'] == null ? undefined : json['mergeAccountId'],
    };
}

export function EmployeePayrollRunToJSON(value?: EmployeePayrollRun | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'remoteId': value['remoteId'],
        'grossPay': value['grossPay'],
        'netPay': value['netPay'],
        'startDate': value['startDate'] == null ? undefined : ((value['startDate']).toISOString()),
        'endDate': value['endDate'] == null ? undefined : ((value['endDate']).toISOString()),
        'checkDate': value['checkDate'] == null ? undefined : ((value['checkDate']).toISOString()),
        'earnings': value['earnings'] == null ? undefined : ((value['earnings'] as Array<any>).map(EarningToJSON)),
        'deductions': value['deductions'] == null ? undefined : ((value['deductions'] as Array<any>).map(DeductionToJSON)),
        'taxes': value['taxes'] == null ? undefined : ((value['taxes'] as Array<any>).map(TaxToJSON)),
        'remoteWasDeleted': value['remoteWasDeleted'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'modifiedAt': value['modifiedAt'] == null ? undefined : ((value['modifiedAt']).toISOString()),
        'payrollRunMergeAccountId': value['payrollRunMergeAccountId'],
        'employeeMergeAccountId': value['employeeMergeAccountId'],
        'mergeAccountId': value['mergeAccountId'],
    };
}

