/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Deduction } from './Deduction';
import {
    DeductionFromJSON,
    DeductionFromJSONTyped,
    DeductionToJSON,
} from './Deduction';
import type { Earning } from './Earning';
import {
    EarningFromJSON,
    EarningFromJSONTyped,
    EarningToJSON,
} from './Earning';
import type { Tax } from './Tax';
import {
    TaxFromJSON,
    TaxFromJSONTyped,
    TaxToJSON,
} from './Tax';

/**
 * The EmployeePayrollRun object is used to represent an employee's pay statement for a specific payroll run.
 * @export
 * @interface EmployeePayrollRun
 */
export interface EmployeePayrollRun {
    /**
     * 
     * @type {string}
     * @memberof EmployeePayrollRun
     */
    id?: string;
    /**
     * The third-party API ID of the matching object.
     * @type {string}
     * @memberof EmployeePayrollRun
     */
    remoteId?: string;
    /**
     * The total earnings throughout a given period for an employee before any deductions are made.
     * @type {number}
     * @memberof EmployeePayrollRun
     */
    grossPay?: number;
    /**
     * The take-home pay throughout a given period for an employee after deductions are made.
     * @type {number}
     * @memberof EmployeePayrollRun
     */
    netPay?: number;
    /**
     * The day and time the payroll run started.
     * @type {Date}
     * @memberof EmployeePayrollRun
     */
    startDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmployeePayrollRun
     */
    endDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmployeePayrollRun
     */
    checkDate?: Date;
    /**
     * 
     * @type {Array<Earning>}
     * @memberof EmployeePayrollRun
     */
    earnings?: Array<Earning>;
    /**
     * The Deduction object is used to represent an array of the wages withheld 
     * from total earnings for the purpose of paying taxes.
     * @type {Array<Deduction>}
     * @memberof EmployeePayrollRun
     */
    deductions?: Array<Deduction>;
    /**
     * The Tax object is used to represent an array of the tax deductions 
     * for a given employee's payroll run.
     * @type {Array<Tax>}
     * @memberof EmployeePayrollRun
     */
    taxes?: Array<Tax>;
    /**
     * Indicates whether or not this object has been deleted in the third party platform.
     * @type {boolean}
     * @memberof EmployeePayrollRun
     */
    remoteWasDeleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof EmployeePayrollRun
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmployeePayrollRun
     */
    modifiedAt?: Date;
    /**
     * The payroll being run.
     * @type {string}
     * @memberof EmployeePayrollRun
     */
    payrollRunMergeAccountId?: string;
    /**
     * The employee whose payroll is being run.
     * @type {string}
     * @memberof EmployeePayrollRun
     */
    employeeMergeAccountId?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeePayrollRun
     */
    mergeAccountId?: string;
}

/**
 * Check if a given object implements the EmployeePayrollRun interface.
 */
export function instanceOfEmployeePayrollRun(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EmployeePayrollRunFromJSON(json: any): EmployeePayrollRun {
    return EmployeePayrollRunFromJSONTyped(json, false);
}

export function EmployeePayrollRunFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmployeePayrollRun {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'remoteId': !exists(json, 'remoteId') ? undefined : json['remoteId'],
        'grossPay': !exists(json, 'grossPay') ? undefined : json['grossPay'],
        'netPay': !exists(json, 'netPay') ? undefined : json['netPay'],
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'checkDate': !exists(json, 'checkDate') ? undefined : (new Date(json['checkDate'])),
        'earnings': !exists(json, 'earnings') ? undefined : ((json['earnings'] as Array<any>).map(EarningFromJSON)),
        'deductions': !exists(json, 'deductions') ? undefined : ((json['deductions'] as Array<any>).map(DeductionFromJSON)),
        'taxes': !exists(json, 'taxes') ? undefined : ((json['taxes'] as Array<any>).map(TaxFromJSON)),
        'remoteWasDeleted': !exists(json, 'remoteWasDeleted') ? undefined : json['remoteWasDeleted'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'payrollRunMergeAccountId': !exists(json, 'payrollRunMergeAccountId') ? undefined : json['payrollRunMergeAccountId'],
        'employeeMergeAccountId': !exists(json, 'employeeMergeAccountId') ? undefined : json['employeeMergeAccountId'],
        'mergeAccountId': !exists(json, 'mergeAccountId') ? undefined : json['mergeAccountId'],
    };
}

export function EmployeePayrollRunToJSON(value?: EmployeePayrollRun | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'remoteId': value.remoteId,
        'grossPay': value.grossPay,
        'netPay': value.netPay,
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString()),
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString()),
        'checkDate': value.checkDate === undefined ? undefined : (value.checkDate.toISOString()),
        'earnings': value.earnings === undefined ? undefined : ((value.earnings as Array<any>).map(EarningToJSON)),
        'deductions': value.deductions === undefined ? undefined : ((value.deductions as Array<any>).map(DeductionToJSON)),
        'taxes': value.taxes === undefined ? undefined : ((value.taxes as Array<any>).map(TaxToJSON)),
        'remoteWasDeleted': value.remoteWasDeleted,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'payrollRunMergeAccountId': value.payrollRunMergeAccountId,
        'employeeMergeAccountId': value.employeeMergeAccountId,
        'mergeAccountId': value.mergeAccountId,
    };
}

