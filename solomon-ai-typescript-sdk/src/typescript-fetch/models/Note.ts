/* tslint:disable */
/* eslint-disable */
/**
 * User Service
 * Solomon AI User Service API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: yoanyomba@solomon-ai.co
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccountType } from './AccountType';
import {
    AccountTypeFromJSON,
    AccountTypeFromJSONTyped,
    AccountTypeToJSON,
} from './AccountType';
import type { Media } from './Media';
import {
    MediaFromJSON,
    MediaFromJSONTyped,
    MediaToJSON,
} from './Media';

/**
 * 
 * @export
 * @interface Note
 */
export interface Note {
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    backendPlatformUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    profileId?: string;
    /**
     * 
     * @type {Media}
     * @memberof Note
     */
    media?: Media;
    /**
     * 
     * @type {Array<string>}
     * @memberof Note
     */
    mentions?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Note
     */
    hashtags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    content: string;
    /**
     * 
     * @type {AccountType}
     * @memberof Note
     */
    authorAccountType?: AccountType;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    authorUserName: string;
    /**
     * 
     * @type {string}
     * @memberof Note
     */
    authorProfileImage: string;
}

/**
 * Check if a given object implements the Note interface.
 */
export function instanceOfNote(value: object): boolean {
    if (!('content' in value)) return false;
    if (!('authorUserName' in value)) return false;
    if (!('authorProfileImage' in value)) return false;
    return true;
}

export function NoteFromJSON(json: any): Note {
    return NoteFromJSONTyped(json, false);
}

export function NoteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Note {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'backendPlatformUserId': json['backendPlatformUserId'] == null ? undefined : json['backendPlatformUserId'],
        'profileId': json['profileId'] == null ? undefined : json['profileId'],
        'media': json['media'] == null ? undefined : MediaFromJSON(json['media']),
        'mentions': json['mentions'] == null ? undefined : json['mentions'],
        'hashtags': json['hashtags'] == null ? undefined : json['hashtags'],
        'createdAt': json['createdAt'] == null ? undefined : json['createdAt'],
        'content': json['content'],
        'authorAccountType': json['authorAccountType'] == null ? undefined : AccountTypeFromJSON(json['authorAccountType']),
        'authorUserName': json['authorUserName'],
        'authorProfileImage': json['authorProfileImage'],
    };
}

export function NoteToJSON(value?: Note | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'backendPlatformUserId': value['backendPlatformUserId'],
        'profileId': value['profileId'],
        'media': MediaToJSON(value['media']),
        'mentions': value['mentions'],
        'hashtags': value['hashtags'],
        'createdAt': value['createdAt'],
        'content': value['content'],
        'authorAccountType': AccountTypeToJSON(value['authorAccountType']),
        'authorUserName': value['authorUserName'],
        'authorProfileImage': value['authorProfileImage'],
    };
}

