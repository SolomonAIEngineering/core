// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"strings"

	financial_servicev1 "github.com/SolomonAIEngineering/core/core-library/pkg/generated/financial_service/v1"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newAccountStatementsORM(db *gorm.DB, opts ...gen.DOOption) accountStatementsORM {
	_accountStatementsORM := accountStatementsORM{}

	_accountStatementsORM.accountStatementsORMDo.UseDB(db, opts...)
	_accountStatementsORM.accountStatementsORMDo.UseModel(&financial_servicev1.AccountStatementsORM{})

	tableName := _accountStatementsORM.accountStatementsORMDo.TableName()
	_accountStatementsORM.ALL = field.NewAsterisk(tableName)
	_accountStatementsORM.BankAccountId = field.NewUint64(tableName, "bank_account_id")
	_accountStatementsORM.CreditAccountId = field.NewUint64(tableName, "credit_account_id")
	_accountStatementsORM.Id = field.NewUint64(tableName, "id")
	_accountStatementsORM.InvestmentAccountId = field.NewUint64(tableName, "investment_account_id")
	_accountStatementsORM.Month = field.NewUint64(tableName, "month")
	_accountStatementsORM.MortgageAccountId = field.NewUint64(tableName, "mortgage_account_id")
	_accountStatementsORM.PlaidStatementId = field.NewString(tableName, "plaid_statement_id")
	_accountStatementsORM.StatementPdfUrl = field.NewString(tableName, "statement_pdf_url")
	_accountStatementsORM.StudentLoanAccountId = field.NewUint64(tableName, "student_loan_account_id")
	_accountStatementsORM.Year = field.NewUint64(tableName, "year")

	_accountStatementsORM.fillFieldMap()

	return _accountStatementsORM
}

type accountStatementsORM struct {
	accountStatementsORMDo

	ALL                  field.Asterisk
	BankAccountId        field.Uint64
	CreditAccountId      field.Uint64
	Id                   field.Uint64
	InvestmentAccountId  field.Uint64
	Month                field.Uint64
	MortgageAccountId    field.Uint64
	PlaidStatementId     field.String
	StatementPdfUrl      field.String
	StudentLoanAccountId field.Uint64
	Year                 field.Uint64

	fieldMap map[string]field.Expr
}

func (a accountStatementsORM) Table(newTableName string) *accountStatementsORM {
	a.accountStatementsORMDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountStatementsORM) As(alias string) *accountStatementsORM {
	a.accountStatementsORMDo.DO = *(a.accountStatementsORMDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountStatementsORM) updateTableName(table string) *accountStatementsORM {
	a.ALL = field.NewAsterisk(table)
	a.BankAccountId = field.NewUint64(table, "bank_account_id")
	a.CreditAccountId = field.NewUint64(table, "credit_account_id")
	a.Id = field.NewUint64(table, "id")
	a.InvestmentAccountId = field.NewUint64(table, "investment_account_id")
	a.Month = field.NewUint64(table, "month")
	a.MortgageAccountId = field.NewUint64(table, "mortgage_account_id")
	a.PlaidStatementId = field.NewString(table, "plaid_statement_id")
	a.StatementPdfUrl = field.NewString(table, "statement_pdf_url")
	a.StudentLoanAccountId = field.NewUint64(table, "student_loan_account_id")
	a.Year = field.NewUint64(table, "year")

	a.fillFieldMap()

	return a
}

func (a *accountStatementsORM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountStatementsORM) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["bank_account_id"] = a.BankAccountId
	a.fieldMap["credit_account_id"] = a.CreditAccountId
	a.fieldMap["id"] = a.Id
	a.fieldMap["investment_account_id"] = a.InvestmentAccountId
	a.fieldMap["month"] = a.Month
	a.fieldMap["mortgage_account_id"] = a.MortgageAccountId
	a.fieldMap["plaid_statement_id"] = a.PlaidStatementId
	a.fieldMap["statement_pdf_url"] = a.StatementPdfUrl
	a.fieldMap["student_loan_account_id"] = a.StudentLoanAccountId
	a.fieldMap["year"] = a.Year
}

func (a accountStatementsORM) clone(db *gorm.DB) accountStatementsORM {
	a.accountStatementsORMDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountStatementsORM) replaceDB(db *gorm.DB) accountStatementsORM {
	a.accountStatementsORMDo.ReplaceDB(db)
	return a
}

type accountStatementsORMDo struct{ gen.DO }

type IAccountStatementsORMDo interface {
	gen.SubQuery
	Debug() IAccountStatementsORMDo
	WithContext(ctx context.Context) IAccountStatementsORMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAccountStatementsORMDo
	WriteDB() IAccountStatementsORMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAccountStatementsORMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAccountStatementsORMDo
	Not(conds ...gen.Condition) IAccountStatementsORMDo
	Or(conds ...gen.Condition) IAccountStatementsORMDo
	Select(conds ...field.Expr) IAccountStatementsORMDo
	Where(conds ...gen.Condition) IAccountStatementsORMDo
	Order(conds ...field.Expr) IAccountStatementsORMDo
	Distinct(cols ...field.Expr) IAccountStatementsORMDo
	Omit(cols ...field.Expr) IAccountStatementsORMDo
	Join(table schema.Tabler, on ...field.Expr) IAccountStatementsORMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAccountStatementsORMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAccountStatementsORMDo
	Group(cols ...field.Expr) IAccountStatementsORMDo
	Having(conds ...gen.Condition) IAccountStatementsORMDo
	Limit(limit int) IAccountStatementsORMDo
	Offset(offset int) IAccountStatementsORMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountStatementsORMDo
	Unscoped() IAccountStatementsORMDo
	Create(values ...*financial_servicev1.AccountStatementsORM) error
	CreateInBatches(values []*financial_servicev1.AccountStatementsORM, batchSize int) error
	Save(values ...*financial_servicev1.AccountStatementsORM) error
	First() (*financial_servicev1.AccountStatementsORM, error)
	Take() (*financial_servicev1.AccountStatementsORM, error)
	Last() (*financial_servicev1.AccountStatementsORM, error)
	Find() ([]*financial_servicev1.AccountStatementsORM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.AccountStatementsORM, err error)
	FindInBatches(result *[]*financial_servicev1.AccountStatementsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*financial_servicev1.AccountStatementsORM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAccountStatementsORMDo
	Assign(attrs ...field.AssignExpr) IAccountStatementsORMDo
	Joins(fields ...field.RelationField) IAccountStatementsORMDo
	Preload(fields ...field.RelationField) IAccountStatementsORMDo
	FirstOrInit() (*financial_servicev1.AccountStatementsORM, error)
	FirstOrCreate() (*financial_servicev1.AccountStatementsORM, error)
	FindByPage(offset int, limit int) (result []*financial_servicev1.AccountStatementsORM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAccountStatementsORMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetRecordByID(id int) (result financial_servicev1.AccountStatementsORM, err error)
	GetRecordByIDs(ids []int) (result []financial_servicev1.AccountStatementsORM, err error)
	CreateRecord(item financial_servicev1.AccountStatementsORM) (err error)
	UpdateRecordByID(id int, item financial_servicev1.AccountStatementsORM) (err error)
	DeleteRecordByID(id int) (err error)
	GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.AccountStatementsORM, err error)
	CountAll() (result int, err error)
	GetByID(id uint64) (result financial_servicev1.AccountStatementsORM, err error)
	GetByIDs(ids []uint64) (result []financial_servicev1.AccountStatementsORM, err error)
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountStatementsORMDo) GetRecordByID(id int) (result financial_servicev1.AccountStatementsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_statements ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a accountStatementsORMDo) GetRecordByIDs(ids []int) (result []financial_servicev1.AccountStatementsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_statements ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// INSERT INTO @@table (columns) VALUES (values)
func (a accountStatementsORMDo) CreateRecord(item financial_servicev1.AccountStatementsORM) (err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("INSERT INTO account_statements (columns) VALUES (values) ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String()) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table SET columns=values
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountStatementsORMDo) UpdateRecordByID(id int, item financial_servicev1.AccountStatementsORM) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("UPDATE account_statements SET columns=values ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DELETE FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountStatementsORMDo) DeleteRecordByID(id int) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("DELETE FROM account_statements ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// ORDER BY @@orderColumn
func (a accountStatementsORMDo) GetAllRecords(orderColumn string, limit int, offset int) (result []financial_servicev1.AccountStatementsORM, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_statements ORDER BY " + a.Quote(orderColumn) + " ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// Additional Operations
// SELECT COUNT(*) FROM @@table
func (a accountStatementsORMDo) CountAll() (result int, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("Additional Operations SELECT COUNT(*) FROM account_statements ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String()).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id=@id
//
// {{end}}
func (a accountStatementsORMDo) GetByID(id uint64) (result financial_servicev1.AccountStatementsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_statements ")
	var whereSQL0 strings.Builder
	params = append(params, id)
	whereSQL0.WriteString("id=? ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table
// {{where}}
//
//	id IN (@ids)
//
// {{end}}
func (a accountStatementsORMDo) GetByIDs(ids []uint64) (result []financial_servicev1.AccountStatementsORM, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM account_statements ")
	var whereSQL0 strings.Builder
	params = append(params, ids)
	whereSQL0.WriteString("id IN (?) ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a accountStatementsORMDo) Debug() IAccountStatementsORMDo {
	return a.withDO(a.DO.Debug())
}

func (a accountStatementsORMDo) WithContext(ctx context.Context) IAccountStatementsORMDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountStatementsORMDo) ReadDB() IAccountStatementsORMDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountStatementsORMDo) WriteDB() IAccountStatementsORMDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountStatementsORMDo) Session(config *gorm.Session) IAccountStatementsORMDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountStatementsORMDo) Clauses(conds ...clause.Expression) IAccountStatementsORMDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountStatementsORMDo) Returning(value interface{}, columns ...string) IAccountStatementsORMDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountStatementsORMDo) Not(conds ...gen.Condition) IAccountStatementsORMDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountStatementsORMDo) Or(conds ...gen.Condition) IAccountStatementsORMDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountStatementsORMDo) Select(conds ...field.Expr) IAccountStatementsORMDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountStatementsORMDo) Where(conds ...gen.Condition) IAccountStatementsORMDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountStatementsORMDo) Order(conds ...field.Expr) IAccountStatementsORMDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountStatementsORMDo) Distinct(cols ...field.Expr) IAccountStatementsORMDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountStatementsORMDo) Omit(cols ...field.Expr) IAccountStatementsORMDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountStatementsORMDo) Join(table schema.Tabler, on ...field.Expr) IAccountStatementsORMDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountStatementsORMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAccountStatementsORMDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountStatementsORMDo) RightJoin(table schema.Tabler, on ...field.Expr) IAccountStatementsORMDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountStatementsORMDo) Group(cols ...field.Expr) IAccountStatementsORMDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountStatementsORMDo) Having(conds ...gen.Condition) IAccountStatementsORMDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountStatementsORMDo) Limit(limit int) IAccountStatementsORMDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountStatementsORMDo) Offset(offset int) IAccountStatementsORMDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountStatementsORMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAccountStatementsORMDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountStatementsORMDo) Unscoped() IAccountStatementsORMDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountStatementsORMDo) Create(values ...*financial_servicev1.AccountStatementsORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountStatementsORMDo) CreateInBatches(values []*financial_servicev1.AccountStatementsORM, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountStatementsORMDo) Save(values ...*financial_servicev1.AccountStatementsORM) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountStatementsORMDo) First() (*financial_servicev1.AccountStatementsORM, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.AccountStatementsORM), nil
	}
}

func (a accountStatementsORMDo) Take() (*financial_servicev1.AccountStatementsORM, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.AccountStatementsORM), nil
	}
}

func (a accountStatementsORMDo) Last() (*financial_servicev1.AccountStatementsORM, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.AccountStatementsORM), nil
	}
}

func (a accountStatementsORMDo) Find() ([]*financial_servicev1.AccountStatementsORM, error) {
	result, err := a.DO.Find()
	return result.([]*financial_servicev1.AccountStatementsORM), err
}

func (a accountStatementsORMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*financial_servicev1.AccountStatementsORM, err error) {
	buf := make([]*financial_servicev1.AccountStatementsORM, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountStatementsORMDo) FindInBatches(result *[]*financial_servicev1.AccountStatementsORM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountStatementsORMDo) Attrs(attrs ...field.AssignExpr) IAccountStatementsORMDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountStatementsORMDo) Assign(attrs ...field.AssignExpr) IAccountStatementsORMDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountStatementsORMDo) Joins(fields ...field.RelationField) IAccountStatementsORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountStatementsORMDo) Preload(fields ...field.RelationField) IAccountStatementsORMDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountStatementsORMDo) FirstOrInit() (*financial_servicev1.AccountStatementsORM, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.AccountStatementsORM), nil
	}
}

func (a accountStatementsORMDo) FirstOrCreate() (*financial_servicev1.AccountStatementsORM, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*financial_servicev1.AccountStatementsORM), nil
	}
}

func (a accountStatementsORMDo) FindByPage(offset int, limit int) (result []*financial_servicev1.AccountStatementsORM, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountStatementsORMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountStatementsORMDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountStatementsORMDo) Delete(models ...*financial_servicev1.AccountStatementsORM) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountStatementsORMDo) withDO(do gen.Dao) *accountStatementsORMDo {
	a.DO = *do.(*gen.DO)
	return a
}
