// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: user_service/v1/message.proto

package user_servicev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProfileType: represents the type of account tied to a given profile
type ProfileType int32

const (
	ProfileType_PROFILE_TYPE_UNSPECIFIED ProfileType = 0
	ProfileType_PROFILE_TYPE_USER        ProfileType = 1
	ProfileType_PROFILE_TYPE_BUSINESS    ProfileType = 2
)

// Enum value maps for ProfileType.
var (
	ProfileType_name = map[int32]string{
		0: "PROFILE_TYPE_UNSPECIFIED",
		1: "PROFILE_TYPE_USER",
		2: "PROFILE_TYPE_BUSINESS",
	}
	ProfileType_value = map[string]int32{
		"PROFILE_TYPE_UNSPECIFIED": 0,
		"PROFILE_TYPE_USER":        1,
		"PROFILE_TYPE_BUSINESS":    2,
	}
)

func (x ProfileType) Enum() *ProfileType {
	p := new(ProfileType)
	*p = x
	return p
}

func (x ProfileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfileType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_message_proto_enumTypes[0].Descriptor()
}

func (ProfileType) Type() protoreflect.EnumType {
	return &file_user_service_v1_message_proto_enumTypes[0]
}

func (x ProfileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfileType.Descriptor instead.
func (ProfileType) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{0}
}

// RoleType defines the different types of roles.
type RoleType int32

const (
	RoleType_ROLE_TYPE_UNSPECIFIED RoleType = 0
	RoleType_ROLE_TYPE_SUPER_ADMIN RoleType = 1
	RoleType_ROLE_TYPE_TEAM_ADMIN  RoleType = 2
	RoleType_ROLE_TYPE_REGULAR     RoleType = 3
)

// Enum value maps for RoleType.
var (
	RoleType_name = map[int32]string{
		0: "ROLE_TYPE_UNSPECIFIED",
		1: "ROLE_TYPE_SUPER_ADMIN",
		2: "ROLE_TYPE_TEAM_ADMIN",
		3: "ROLE_TYPE_REGULAR",
	}
	RoleType_value = map[string]int32{
		"ROLE_TYPE_UNSPECIFIED": 0,
		"ROLE_TYPE_SUPER_ADMIN": 1,
		"ROLE_TYPE_TEAM_ADMIN":  2,
		"ROLE_TYPE_REGULAR":     3,
	}
)

func (x RoleType) Enum() *RoleType {
	p := new(RoleType)
	*p = x
	return p
}

func (x RoleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_message_proto_enumTypes[1].Descriptor()
}

func (RoleType) Type() protoreflect.EnumType {
	return &file_user_service_v1_message_proto_enumTypes[1]
}

func (x RoleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleType.Descriptor instead.
func (RoleType) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{1}
}

// AuditAction defines the types of actions that can be audited.
type AuditAction int32

const (
	AuditAction_AUDIT_ACTION_UNSPECIFIED AuditAction = 0
	AuditAction_AUDIT_ACTION_CREATED     AuditAction = 1
	AuditAction_AUDIT_ACTION_UPDATED     AuditAction = 2
	AuditAction_AUDIT_ACTION_DELETED     AuditAction = 3
)

// Enum value maps for AuditAction.
var (
	AuditAction_name = map[int32]string{
		0: "AUDIT_ACTION_UNSPECIFIED",
		1: "AUDIT_ACTION_CREATED",
		2: "AUDIT_ACTION_UPDATED",
		3: "AUDIT_ACTION_DELETED",
	}
	AuditAction_value = map[string]int32{
		"AUDIT_ACTION_UNSPECIFIED": 0,
		"AUDIT_ACTION_CREATED":     1,
		"AUDIT_ACTION_UPDATED":     2,
		"AUDIT_ACTION_DELETED":     3,
	}
)

func (x AuditAction) Enum() *AuditAction {
	p := new(AuditAction)
	*p = x
	return p
}

func (x AuditAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditAction) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_message_proto_enumTypes[2].Descriptor()
}

func (AuditAction) Type() protoreflect.EnumType {
	return &file_user_service_v1_message_proto_enumTypes[2]
}

func (x AuditAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditAction.Descriptor instead.
func (AuditAction) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{2}
}

// Team: represents a team within the context of solomon-ai.
type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the team.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the team.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the team.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Tags associated with the team.
	Tags []*Tags `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// Admin of the team.
	// NOTE: only one admin is allowed per team and that admin must be a business account.
	TeamAdmin *BusinessAccount `protobuf:"bytes,5,opt,name=team_admin,json=teamAdmin,proto3" json:"team_admin,omitempty"`
	// Members of the team.
	MemberUsersAccounts []*UserAccount `protobuf:"bytes,6,rep,name=member_users_accounts,json=memberUsersAccounts,proto3" json:"member_users_accounts,omitempty"`
	// Member business accounts of the team.
	MemberBusinessAccounts []*BusinessAccount `protobuf:"bytes,7,rep,name=member_business_accounts,json=memberBusinessAccounts,proto3" json:"member_business_accounts,omitempty"`
	// Timestamp for when the team was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for when the team was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Roles     []*Role                `protobuf:"bytes,10,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *Team) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Team) GetTags() []*Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Team) GetTeamAdmin() *BusinessAccount {
	if x != nil {
		return x.TeamAdmin
	}
	return nil
}

func (x *Team) GetMemberUsersAccounts() []*UserAccount {
	if x != nil {
		return x.MemberUsersAccounts
	}
	return nil
}

func (x *Team) GetMemberBusinessAccounts() []*BusinessAccount {
	if x != nil {
		return x.MemberBusinessAccounts
	}
	return nil
}

func (x *Team) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Team) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Team) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

// @brief Represents a user account in the context of simfinni.
type UserAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the account.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Email associated with the user account.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Physical address associated with the user.
	Address *Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// Brief description about the user, up to 200 characters.
	Bio string `protobuf:"bytes,12,opt,name=bio,proto3" json:"bio,omitempty"`
	// Short headline for the user's profile.
	Headline string `protobuf:"bytes,13,opt,name=headline,proto3" json:"headline,omitempty"`
	// Phone number associated with the account.
	PhoneNumber string `protobuf:"bytes,14,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Tags associated with the user account, between 1 and 10.
	Tags []*Tags `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	// ID for the authentication service linked to this account.
	AuthnAccountId uint64 `protobuf:"varint,18,opt,name=authn_account_id,json=authnAccountId,proto3" json:"authn_account_id,omitempty"`
	// Indicates if the account is currently active.
	IsActive bool `protobuf:"varint,22,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// User's first name.
	Firstname string `protobuf:"bytes,26,opt,name=firstname,proto3" json:"firstname,omitempty"`
	// User's last name.
	Lastname string `protobuf:"bytes,27,opt,name=lastname,proto3" json:"lastname,omitempty"`
	// Username associated with the account, minimum of 10 characters.
	Username string `protobuf:"bytes,28,opt,name=username,proto3" json:"username,omitempty"`
	// Indicates if the account is set to private.
	IsPrivate bool `protobuf:"varint,29,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	// Indicates if the user's email has been verified.
	IsEmailVerified bool `protobuf:"varint,30,opt,name=is_email_verified,json=isEmailVerified,proto3" json:"is_email_verified,omitempty"`
	// Timestamp for when the account was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for when the email was verified.
	VerifiedAt *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
	// Settings specific to the user account.
	Settings *Settings `protobuf:"bytes,40,opt,name=settings,proto3" json:"settings,omitempty"`
	// Enum indicating the type of profile (e.g., individual, corporate).
	AccountType ProfileType `protobuf:"varint,42,opt,name=account_type,json=accountType,proto3,enum=user_service.v1.ProfileType" json:"account_type,omitempty"`
	// Profile image associated with the user account.
	ProfileImageUrl string `protobuf:"bytes,43,opt,name=profile_image_url,json=profileImageUrl,proto3" json:"profile_image_url,omitempty"`
	// Auth0 user id
	Auth0UserId string `protobuf:"bytes,44,opt,name=auth0_user_id,json=auth0UserId,proto3" json:"auth0_user_id,omitempty"`
	// Algolia user id
	AlgoliaUserId string `protobuf:"bytes,46,opt,name=algolia_user_id,json=algoliaUserId,proto3" json:"algolia_user_id,omitempty"`
}

func (x *UserAccount) Reset() {
	*x = UserAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccount) ProtoMessage() {}

func (x *UserAccount) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccount.ProtoReflect.Descriptor instead.
func (*UserAccount) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *UserAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAccount) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserAccount) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UserAccount) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *UserAccount) GetHeadline() string {
	if x != nil {
		return x.Headline
	}
	return ""
}

func (x *UserAccount) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserAccount) GetTags() []*Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UserAccount) GetAuthnAccountId() uint64 {
	if x != nil {
		return x.AuthnAccountId
	}
	return 0
}

func (x *UserAccount) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *UserAccount) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *UserAccount) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *UserAccount) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserAccount) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *UserAccount) GetIsEmailVerified() bool {
	if x != nil {
		return x.IsEmailVerified
	}
	return false
}

func (x *UserAccount) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserAccount) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

func (x *UserAccount) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *UserAccount) GetAccountType() ProfileType {
	if x != nil {
		return x.AccountType
	}
	return ProfileType_PROFILE_TYPE_UNSPECIFIED
}

func (x *UserAccount) GetProfileImageUrl() string {
	if x != nil {
		return x.ProfileImageUrl
	}
	return ""
}

func (x *UserAccount) GetAuth0UserId() string {
	if x != nil {
		return x.Auth0UserId
	}
	return ""
}

func (x *UserAccount) GetAlgoliaUserId() string {
	if x != nil {
		return x.AlgoliaUserId
	}
	return ""
}

// BusinessAccount represents a business account within the context of solomon-ai.
type BusinessAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the business account.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Email associated with the business account.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Physical address associated with the business account.
	Address *Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// Short description of the business account. Maximum of 200 characters.
	Bio string `protobuf:"bytes,12,opt,name=bio,proto3" json:"bio,omitempty"`
	// Headline for the profile of the business account.
	Headline string `protobuf:"bytes,13,opt,name=headline,proto3" json:"headline,omitempty"`
	// Phone number associated with the business account.
	PhoneNumber string `protobuf:"bytes,14,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Tags associated with the business account. Between 1 and 10 tags are allowed.
	Tags []*Tags `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty"`
	// Identifier for the associated authentication service account.
	AuthnAccountId uint64 `protobuf:"varint,18,opt,name=authn_account_id,json=authnAccountId,proto3" json:"authn_account_id,omitempty"`
	// Indicates whether the business account is active.
	IsActive bool `protobuf:"varint,22,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Username for the business account. Must be at least 10 characters long.
	Username string `protobuf:"bytes,28,opt,name=username,proto3" json:"username,omitempty"`
	// Indicates whether the business account is private.
	IsPrivate bool `protobuf:"varint,29,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	// Indicates whether the email associated with the business account has been verified.
	IsEmailVerified bool `protobuf:"varint,30,opt,name=is_email_verified,json=isEmailVerified,proto3" json:"is_email_verified,omitempty"`
	// Timestamp indicating when the business account was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp indicating when the email for the business account was verified.
	VerifiedAt *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
	// Date when the company associated with the business account was established.
	CompanyEstablishedDate string `protobuf:"bytes,35,opt,name=company_established_date,json=companyEstablishedDate,proto3" json:"company_established_date,omitempty"`
	// Industry type of the company associated with the business account.
	CompanyIndustryType string `protobuf:"bytes,36,opt,name=company_industry_type,json=companyIndustryType,proto3" json:"company_industry_type,omitempty"`
	// Website URL of the company associated with the business account.
	CompanyWebsiteUrl string `protobuf:"bytes,37,opt,name=company_website_url,json=companyWebsiteUrl,proto3" json:"company_website_url,omitempty"`
	// Description of the company associated with the business account.
	CompanyDescription string `protobuf:"bytes,38,opt,name=company_description,json=companyDescription,proto3" json:"company_description,omitempty"`
	// Name of the company associated with the business account.
	CompanyName string `protobuf:"bytes,39,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// Settings specific to the business account.
	Settings *Settings `protobuf:"bytes,41,opt,name=settings,proto3" json:"settings,omitempty"`
	// The type of profile associated with the business account (e.g., individual, corporate).
	AccountType ProfileType `protobuf:"varint,42,opt,name=account_type,json=accountType,proto3,enum=user_service.v1.ProfileType" json:"account_type,omitempty"`
	// Profile image associated with the user account.
	ProfileImageUrl string `protobuf:"bytes,43,opt,name=profile_image_url,json=profileImageUrl,proto3" json:"profile_image_url,omitempty"`
	// auth0 user id associated with the business account
	Auth0UserId string `protobuf:"bytes,44,opt,name=auth0_user_id,json=auth0UserId,proto3" json:"auth0_user_id,omitempty"`
	// Algolia user id
	AlgoliaUserId string `protobuf:"bytes,46,opt,name=algolia_user_id,json=algoliaUserId,proto3" json:"algolia_user_id,omitempty"`
}

func (x *BusinessAccount) Reset() {
	*x = BusinessAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessAccount) ProtoMessage() {}

func (x *BusinessAccount) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessAccount.ProtoReflect.Descriptor instead.
func (*BusinessAccount) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *BusinessAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BusinessAccount) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *BusinessAccount) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *BusinessAccount) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *BusinessAccount) GetHeadline() string {
	if x != nil {
		return x.Headline
	}
	return ""
}

func (x *BusinessAccount) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *BusinessAccount) GetTags() []*Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *BusinessAccount) GetAuthnAccountId() uint64 {
	if x != nil {
		return x.AuthnAccountId
	}
	return 0
}

func (x *BusinessAccount) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *BusinessAccount) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BusinessAccount) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *BusinessAccount) GetIsEmailVerified() bool {
	if x != nil {
		return x.IsEmailVerified
	}
	return false
}

func (x *BusinessAccount) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BusinessAccount) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

func (x *BusinessAccount) GetCompanyEstablishedDate() string {
	if x != nil {
		return x.CompanyEstablishedDate
	}
	return ""
}

func (x *BusinessAccount) GetCompanyIndustryType() string {
	if x != nil {
		return x.CompanyIndustryType
	}
	return ""
}

func (x *BusinessAccount) GetCompanyWebsiteUrl() string {
	if x != nil {
		return x.CompanyWebsiteUrl
	}
	return ""
}

func (x *BusinessAccount) GetCompanyDescription() string {
	if x != nil {
		return x.CompanyDescription
	}
	return ""
}

func (x *BusinessAccount) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *BusinessAccount) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *BusinessAccount) GetAccountType() ProfileType {
	if x != nil {
		return x.AccountType
	}
	return ProfileType_PROFILE_TYPE_UNSPECIFIED
}

func (x *BusinessAccount) GetProfileImageUrl() string {
	if x != nil {
		return x.ProfileImageUrl
	}
	return ""
}

func (x *BusinessAccount) GetAuth0UserId() string {
	if x != nil {
		return x.Auth0UserId
	}
	return ""
}

func (x *BusinessAccount) GetAlgoliaUserId() string {
	if x != nil {
		return x.AlgoliaUserId
	}
	return ""
}

// Address: represents an account's address
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the address field
	// Validations:
	// - must be at least 5 character long (meaning cannot be empty)
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// the unit if the address is an apartment
	// Validations:
	// - must be at least 1 character long (meaning cannot be empty)
	Unit string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	// the address zipcode
	// Validations:
	// - must be exactly 5 characters this is to ensure the client inputs the proper zip code
	Zipcode string `protobuf:"bytes,4,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	// the city
	// Validations:
	// - must be at least 3 characters long (meaning cannot be empty)
	City string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	// the state/municipality
	// Validations
	// - must be at least 2 characters long
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// longitude
	// Validations: None - can be empty
	Longitude string `protobuf:"bytes,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// latittude
	// Validations: None - can be empty
	Lattitude string `protobuf:"bytes,8,opt,name=lattitude,proto3" json:"lattitude,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *Address) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Address) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Address) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *Address) GetLattitude() string {
	if x != nil {
		return x.Lattitude
	}
	return ""
}

// Tags: represents metadata tags associated to an account
type Tags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tag id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of tag
	// validations:
	// - cannot be empty
	// - must be at least 3 characters long
	TagName string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	// description of tag
	// validations:
	// - cannot be empty
	// - must be at least 10 characters long
	TagDescription string `protobuf:"bytes,3,opt,name=tag_description,json=tagDescription,proto3" json:"tag_description,omitempty"`
	// metadata associated with tag
	// validations:
	// - must provide between 1 and 10 metadata tags
	Metadata []string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Tags) Reset() {
	*x = Tags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tags) ProtoMessage() {}

func (x *Tags) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tags.ProtoReflect.Descriptor instead.
func (*Tags) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *Tags) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tags) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *Tags) GetTagDescription() string {
	if x != nil {
		return x.TagDescription
	}
	return ""
}

func (x *Tags) GetMetadata() []string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Role defines the role of a user in the system with specific permissions.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the role.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the role.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the role.
	Type RoleType `protobuf:"varint,3,opt,name=type,proto3,enum=user_service.v1.RoleType" json:"type,omitempty"`
	// Permissions related to user management.
	CanCreateUsers bool `protobuf:"varint,4,opt,name=can_create_users,json=canCreateUsers,proto3" json:"can_create_users,omitempty"`
	CanReadUsers   bool `protobuf:"varint,5,opt,name=can_read_users,json=canReadUsers,proto3" json:"can_read_users,omitempty"`
	CanUpdateUsers bool `protobuf:"varint,6,opt,name=can_update_users,json=canUpdateUsers,proto3" json:"can_update_users,omitempty"`
	CanDeleteUsers bool `protobuf:"varint,7,opt,name=can_delete_users,json=canDeleteUsers,proto3" json:"can_delete_users,omitempty"`
	// Permissions related to project management.
	CanCreateProjects bool `protobuf:"varint,8,opt,name=can_create_projects,json=canCreateProjects,proto3" json:"can_create_projects,omitempty"`
	CanReadProjects   bool `protobuf:"varint,9,opt,name=can_read_projects,json=canReadProjects,proto3" json:"can_read_projects,omitempty"`
	CanUpdateProjects bool `protobuf:"varint,10,opt,name=can_update_projects,json=canUpdateProjects,proto3" json:"can_update_projects,omitempty"`
	CanDeleteProjects bool `protobuf:"varint,11,opt,name=can_delete_projects,json=canDeleteProjects,proto3" json:"can_delete_projects,omitempty"`
	// Permissions related to report management.
	CanCreateReports bool `protobuf:"varint,12,opt,name=can_create_reports,json=canCreateReports,proto3" json:"can_create_reports,omitempty"`
	CanReadReports   bool `protobuf:"varint,13,opt,name=can_read_reports,json=canReadReports,proto3" json:"can_read_reports,omitempty"`
	CanUpdateReports bool `protobuf:"varint,14,opt,name=can_update_reports,json=canUpdateReports,proto3" json:"can_update_reports,omitempty"`
	CanDeleteReports bool `protobuf:"varint,15,opt,name=can_delete_reports,json=canDeleteReports,proto3" json:"can_delete_reports,omitempty"`
	// Add more permissions as necessary for other modules or features.
	// Timestamps for tracking creation and modification times.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Audit log for this role.
	AuditLog []*RoleAuditEvents `protobuf:"bytes,18,rep,name=audit_log,json=auditLog,proto3" json:"audit_log,omitempty"`
	// Team associated with the role.
	Team *Team `protobuf:"bytes,19,opt,name=team,proto3" json:"team,omitempty"`
	// User associated with the role.
	User *UserAccount `protobuf:"bytes,20,opt,name=user,proto3" json:"user,omitempty"`
	// Business account associated with the role.
	Business *BusinessAccount `protobuf:"bytes,21,opt,name=business,proto3" json:"business,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *Role) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetType() RoleType {
	if x != nil {
		return x.Type
	}
	return RoleType_ROLE_TYPE_UNSPECIFIED
}

func (x *Role) GetCanCreateUsers() bool {
	if x != nil {
		return x.CanCreateUsers
	}
	return false
}

func (x *Role) GetCanReadUsers() bool {
	if x != nil {
		return x.CanReadUsers
	}
	return false
}

func (x *Role) GetCanUpdateUsers() bool {
	if x != nil {
		return x.CanUpdateUsers
	}
	return false
}

func (x *Role) GetCanDeleteUsers() bool {
	if x != nil {
		return x.CanDeleteUsers
	}
	return false
}

func (x *Role) GetCanCreateProjects() bool {
	if x != nil {
		return x.CanCreateProjects
	}
	return false
}

func (x *Role) GetCanReadProjects() bool {
	if x != nil {
		return x.CanReadProjects
	}
	return false
}

func (x *Role) GetCanUpdateProjects() bool {
	if x != nil {
		return x.CanUpdateProjects
	}
	return false
}

func (x *Role) GetCanDeleteProjects() bool {
	if x != nil {
		return x.CanDeleteProjects
	}
	return false
}

func (x *Role) GetCanCreateReports() bool {
	if x != nil {
		return x.CanCreateReports
	}
	return false
}

func (x *Role) GetCanReadReports() bool {
	if x != nil {
		return x.CanReadReports
	}
	return false
}

func (x *Role) GetCanUpdateReports() bool {
	if x != nil {
		return x.CanUpdateReports
	}
	return false
}

func (x *Role) GetCanDeleteReports() bool {
	if x != nil {
		return x.CanDeleteReports
	}
	return false
}

func (x *Role) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Role) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Role) GetAuditLog() []*RoleAuditEvents {
	if x != nil {
		return x.AuditLog
	}
	return nil
}

func (x *Role) GetTeam() *Team {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *Role) GetUser() *UserAccount {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Role) GetBusiness() *BusinessAccount {
	if x != nil {
		return x.Business
	}
	return nil
}

// RoleAuditEvents defines the audit record for any changes made to a role.
type RoleAuditEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Action      AuditAction            `protobuf:"varint,3,opt,name=action,proto3,enum=user_service.v1.AuditAction" json:"action,omitempty"` // The type of action (created, updated, deleted)
	PerformedBy string                 `protobuf:"bytes,4,opt,name=performed_by,json=performedBy,proto3" json:"performed_by,omitempty"`      // Identifier of the user who performed the action
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                             // Time of the event
	// Additional fields for enhanced auditing:
	AffectedFields []string `protobuf:"bytes,6,rep,name=affected_fields,json=affectedFields,proto3" json:"affected_fields,omitempty"` // Specific fields that were changed (if applicable)
	PreviousValues []string `protobuf:"bytes,7,rep,name=previous_values,json=previousValues,proto3" json:"previous_values,omitempty"` // Values of those fields before the change
	ClientIp       string   `protobuf:"bytes,8,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`                   // IP address of the client that initiated the change
	UserAgent      string   `protobuf:"bytes,9,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`                // User agent string of the client
	Context        string   `protobuf:"bytes,10,opt,name=context,proto3" json:"context,omitempty"`                                    // Additional context about the change (e.g., reason for change)
}

func (x *RoleAuditEvents) Reset() {
	*x = RoleAuditEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_service_v1_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleAuditEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAuditEvents) ProtoMessage() {}

func (x *RoleAuditEvents) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAuditEvents.ProtoReflect.Descriptor instead.
func (*RoleAuditEvents) Descriptor() ([]byte, []int) {
	return file_user_service_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *RoleAuditEvents) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleAuditEvents) GetAction() AuditAction {
	if x != nil {
		return x.Action
	}
	return AuditAction_AUDIT_ACTION_UNSPECIFIED
}

func (x *RoleAuditEvents) GetPerformedBy() string {
	if x != nil {
		return x.PerformedBy
	}
	return ""
}

func (x *RoleAuditEvents) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RoleAuditEvents) GetAffectedFields() []string {
	if x != nil {
		return x.AffectedFields
	}
	return nil
}

func (x *RoleAuditEvents) GetPreviousValues() []string {
	if x != nil {
		return x.PreviousValues
	}
	return nil
}

func (x *RoleAuditEvents) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *RoleAuditEvents) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *RoleAuditEvents) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

var File_user_service_v1_message_proto protoreflect.FileDescriptor

var file_user_service_v1_message_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72,
	0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce,
	0x04, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x13, 0xba, 0xb9, 0x19, 0x0f, 0x0a, 0x0d, 0x5a, 0x0b, 0x69, 0x64, 0x78,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x49, 0x0a,
	0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52,
	0x13, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02,
	0x48, 0x01, 0x52, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01,
	0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22,
	0xe9, 0x07, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0xba, 0xb9, 0x19,
	0x0f, 0x0a, 0x0d, 0x5a, 0x0b, 0x69, 0x64, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x16, 0x4a, 0x14, 0x22, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x40, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x60, 0x01, 0xba, 0xb9, 0x19, 0x12, 0x0a, 0x10, 0x5a, 0x0e, 0x69, 0x64, 0x78,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0a, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x33, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x74, 0x65, 0x73, 0x74, 0x75, 0x73, 0x65,
	0x72, 0x39, 0x36, 0x39, 0x36, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x0a, 0xba, 0xb9, 0x19,
	0x15, 0x0a, 0x13, 0x5a, 0x11, 0x69, 0x64, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x30,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0xba, 0xb9, 0x19, 0x1a, 0x0a, 0x18, 0x5a, 0x16, 0x69, 0x64, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x30, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x30, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x6c, 0x67, 0x6f, 0x6c, 0x69, 0x61, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x6c, 0x69, 0x61, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xb5, 0x0b, 0x0a, 0x0f,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1a, 0x92, 0x41, 0x00,
	0xba, 0xb9, 0x19, 0x13, 0x0a, 0x11, 0x5a, 0x0f, 0x69, 0x64, 0x78, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x15, 0x4a,
	0x13, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0xba, 0xb9, 0x19, 0x16, 0x0a,
	0x14, 0x5a, 0x12, 0x69, 0x64, 0x78, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x00, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x32, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x16, 0x4a, 0x14, 0x22, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x00, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x13, 0x4a, 0x11, 0x22,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x36,
	0x35, 0x31, 0x33, 0x34, 0x32, 0x34, 0x31, 0x32, 0x34, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x00, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x42, 0x12, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x0a, 0xba,
	0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2d, 0x0a,
	0x10, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x74, 0x65,
	0x73, 0x74, 0x75, 0x73, 0x65, 0x72, 0x39, 0x36, 0x39, 0x36, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x0a, 0xba, 0xb9, 0x19, 0x19, 0x0a, 0x17, 0x5a, 0x15, 0x69, 0x64, 0x78, 0x5f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x92,
	0x41, 0x07, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x73, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x45,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x49,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92,
	0x41, 0x0b, 0x4a, 0x09, 0x22, 0x66, 0x69, 0x6e, 0x74, 0x65, 0x63, 0x68, 0x22, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0x92, 0x41, 0x1e, 0x4a, 0x1c, 0x22, 0x57, 0x65, 0x20, 0x68, 0x65, 0x6c, 0x70, 0x20, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x53, 0x6f, 0x6c, 0x6f, 0x6d,
	0x6f, 0x6e, 0x20, 0x41, 0x49, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02, 0x38,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x30, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0xba, 0xb9, 0x19, 0x11, 0x0a, 0x0f, 0x5a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x30, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x30, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x67, 0x6f, 0x6c, 0x69, 0x61, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c,
	0x67, 0x6f, 0x6c, 0x69, 0x61, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x22, 0x85, 0x03, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x19, 0x92, 0x41, 0x00,
	0xba, 0xb9, 0x19, 0x12, 0x0a, 0x10, 0x5a, 0x0e, 0x69, 0x64, 0x78, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x10,
	0x4a, 0x0e, 0x22, 0x31, 0x32, 0x33, 0x34, 0x20, 0x35, 0x74, 0x68, 0x20, 0x41, 0x76, 0x65, 0x22,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x41, 0x70, 0x74, 0x20, 0x31, 0x22, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x7a, 0x69, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x09, 0x4a,
	0x07, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x05, 0x52,
	0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x4e, 0x65,
	0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x4e, 0x65, 0x77, 0x20, 0x59,
	0x6f, 0x72, 0x6b, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x4a, 0x0c, 0x22, 0x2d, 0x37, 0x33,
	0x2e, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x22, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x34, 0x30,
	0x2e, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x22, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x86, 0x02, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x16, 0x92, 0x41, 0x00, 0xba, 0xb9, 0x19, 0x0f, 0x0a, 0x0d, 0x5a, 0x0b, 0x69, 0x64, 0x78,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08,
	0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x0f, 0x4a, 0x0d, 0x22, 0x74, 0x65, 0x73, 0x74, 0x74, 0x61, 0x67, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x03, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x74, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x16,
	0x4a, 0x14, 0x22, 0x74, 0x65, 0x73, 0x74, 0x74, 0x61, 0x67, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x0a, 0x52, 0x0e, 0x74,
	0x61, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x31, 0x92, 0x41, 0x24, 0x4a, 0x22, 0x5b, 0x22, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x5d, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01,
	0x10, 0x0a, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x06, 0xba, 0xb9,
	0x19, 0x02, 0x08, 0x01, 0x22, 0xa1, 0x08, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x13, 0xba, 0xb9, 0x19, 0x0f, 0x0a,
	0x0d, 0x5a, 0x0b, 0x69, 0x64, 0x78, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0xba, 0xb9, 0x19, 0x11, 0x0a, 0x0f, 0x5a, 0x0d, 0x69, 0x64, 0x78, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63,
	0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x63, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x10, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x00, 0xba, 0xb9, 0x19, 0x04, 0x2a, 0x02, 0x48, 0x01, 0x52, 0x08, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x1a, 0x02,
	0x38, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x1a, 0x02, 0x38, 0x01, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x81, 0x04, 0x0a, 0x0f, 0x52, 0x6f, 0x6c,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x20, 0xba, 0xb9, 0x19, 0x1c, 0x0a, 0x1a,
	0x5a, 0x18, 0x69, 0x64, 0x78, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5a,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x24, 0xba, 0xb9,
	0x19, 0x20, 0x0a, 0x1e, 0x52, 0x1c, 0x69, 0x64, 0x78, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0c, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2a, 0xba, 0xb9, 0x19, 0x26, 0x0a, 0x24, 0x52, 0x22, 0x69, 0x64, 0x78, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x79, 0x12, 0x61, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x27, 0xba, 0xb9, 0x19, 0x23, 0x0a, 0x21,
	0x52, 0x1f, 0x69, 0x64, 0x78, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x2a, 0x5d, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x02, 0x2a, 0x71, 0x0a, 0x08, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x03, 0x2a, 0x79,
	0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x42, 0xec, 0x01, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x6e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6f,
	0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x41, 0x49, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x55, 0x58, 0x58, 0xaa, 0x02, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_service_v1_message_proto_rawDescOnce sync.Once
	file_user_service_v1_message_proto_rawDescData = file_user_service_v1_message_proto_rawDesc
)

func file_user_service_v1_message_proto_rawDescGZIP() []byte {
	file_user_service_v1_message_proto_rawDescOnce.Do(func() {
		file_user_service_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_service_v1_message_proto_rawDescData)
	})
	return file_user_service_v1_message_proto_rawDescData
}

var file_user_service_v1_message_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_user_service_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_user_service_v1_message_proto_goTypes = []interface{}{
	(ProfileType)(0),              // 0: user_service.v1.ProfileType
	(RoleType)(0),                 // 1: user_service.v1.RoleType
	(AuditAction)(0),              // 2: user_service.v1.AuditAction
	(*Team)(nil),                  // 3: user_service.v1.Team
	(*UserAccount)(nil),           // 4: user_service.v1.UserAccount
	(*BusinessAccount)(nil),       // 5: user_service.v1.BusinessAccount
	(*Address)(nil),               // 6: user_service.v1.Address
	(*Tags)(nil),                  // 7: user_service.v1.Tags
	(*Role)(nil),                  // 8: user_service.v1.Role
	(*RoleAuditEvents)(nil),       // 9: user_service.v1.RoleAuditEvents
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(*Settings)(nil),              // 11: user_service.v1.Settings
}
var file_user_service_v1_message_proto_depIdxs = []int32{
	7,  // 0: user_service.v1.Team.tags:type_name -> user_service.v1.Tags
	5,  // 1: user_service.v1.Team.team_admin:type_name -> user_service.v1.BusinessAccount
	4,  // 2: user_service.v1.Team.member_users_accounts:type_name -> user_service.v1.UserAccount
	5,  // 3: user_service.v1.Team.member_business_accounts:type_name -> user_service.v1.BusinessAccount
	10, // 4: user_service.v1.Team.created_at:type_name -> google.protobuf.Timestamp
	10, // 5: user_service.v1.Team.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 6: user_service.v1.Team.roles:type_name -> user_service.v1.Role
	6,  // 7: user_service.v1.UserAccount.address:type_name -> user_service.v1.Address
	7,  // 8: user_service.v1.UserAccount.tags:type_name -> user_service.v1.Tags
	10, // 9: user_service.v1.UserAccount.created_at:type_name -> google.protobuf.Timestamp
	10, // 10: user_service.v1.UserAccount.verified_at:type_name -> google.protobuf.Timestamp
	11, // 11: user_service.v1.UserAccount.settings:type_name -> user_service.v1.Settings
	0,  // 12: user_service.v1.UserAccount.account_type:type_name -> user_service.v1.ProfileType
	6,  // 13: user_service.v1.BusinessAccount.address:type_name -> user_service.v1.Address
	7,  // 14: user_service.v1.BusinessAccount.tags:type_name -> user_service.v1.Tags
	10, // 15: user_service.v1.BusinessAccount.created_at:type_name -> google.protobuf.Timestamp
	10, // 16: user_service.v1.BusinessAccount.verified_at:type_name -> google.protobuf.Timestamp
	11, // 17: user_service.v1.BusinessAccount.settings:type_name -> user_service.v1.Settings
	0,  // 18: user_service.v1.BusinessAccount.account_type:type_name -> user_service.v1.ProfileType
	1,  // 19: user_service.v1.Role.type:type_name -> user_service.v1.RoleType
	10, // 20: user_service.v1.Role.created_at:type_name -> google.protobuf.Timestamp
	10, // 21: user_service.v1.Role.updated_at:type_name -> google.protobuf.Timestamp
	9,  // 22: user_service.v1.Role.audit_log:type_name -> user_service.v1.RoleAuditEvents
	3,  // 23: user_service.v1.Role.team:type_name -> user_service.v1.Team
	4,  // 24: user_service.v1.Role.user:type_name -> user_service.v1.UserAccount
	5,  // 25: user_service.v1.Role.business:type_name -> user_service.v1.BusinessAccount
	2,  // 26: user_service.v1.RoleAuditEvents.action:type_name -> user_service.v1.AuditAction
	10, // 27: user_service.v1.RoleAuditEvents.timestamp:type_name -> google.protobuf.Timestamp
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_user_service_v1_message_proto_init() }
func file_user_service_v1_message_proto_init() {
	if File_user_service_v1_message_proto != nil {
		return
	}
	file_user_service_v1_settings_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_user_service_v1_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_service_v1_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleAuditEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_service_v1_message_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_service_v1_message_proto_goTypes,
		DependencyIndexes: file_user_service_v1_message_proto_depIdxs,
		EnumInfos:         file_user_service_v1_message_proto_enumTypes,
		MessageInfos:      file_user_service_v1_message_proto_msgTypes,
	}.Build()
	File_user_service_v1_message_proto = out.File
	file_user_service_v1_message_proto_rawDesc = nil
	file_user_service_v1_message_proto_goTypes = nil
	file_user_service_v1_message_proto_depIdxs = nil
}
