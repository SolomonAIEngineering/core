syntax = "proto3";

package user_service.v1;

import "protoc-gen-gorm/options/gorm.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "user_service/v1/settings.proto";

option go_package = "github.com/SolomonAIEngineering/core/core-library/pkg/generated/user_service/v1";

/*
  ProfileType: represents the type of account tied to a given profile
*/
enum ProfileType {
  PROFILE_TYPE_UNSPECIFIED = 0;
  PROFILE_TYPE_USER = 1;
  PROFILE_TYPE_BUSINESS = 2;
}

/**
  Team: represents a team within the context of solomon-ai.
*/
message Team {
  option (gorm.opts) = {
    ormable: true
  };

  // Unique identifier for the team.
  uint64 id = 1 [(gorm.field).tag = {unique_index: "idx_team_id"}];

  // Name of the team.
  string name = 2;

  // Description of the team.
  string description = 3;

  // Tags associated with the team.
  repeated Tags tags = 4;

  // Admin of the team.
  // NOTE: only one admin is allowed per team and that admin must be a business account.
  BusinessAccount team_admin = 5 [
    (gorm.field).has_one.preload = true
  ];

  // Members of the team.
  repeated UserAccount member_users_accounts = 6 [
    (gorm.field).has_many.preload = true
  ];

  // Member business accounts of the team.
  repeated BusinessAccount member_business_accounts = 7 [
    (gorm.field).has_many.preload = true
  ];

  // Timestamp for when the team was created.
  google.protobuf.Timestamp created_at = 8;

  // Timestamp for when the team was last updated.
  google.protobuf.Timestamp updated_at = 9;

  repeated Role roles = 10 [
    (gorm.field).has_many.preload = true
  ];
}


/**
 * @brief Represents a user account in the context of simfinni.
 */
message UserAccount {
  option (gorm.opts) = {
    ormable: true
  };

  // Unique identifier for the account.
  uint64 id = 1 [(gorm.field).tag = {unique_index: "idx_user_id"}];

  // Email associated with the user account.
  string email = 2 [
    (validate.rules).string.email = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"sample@example.com\""
    } ,
    (gorm.field).tag = {unique_index: "idx_user_email"}
  ];

  // Physical address associated with the user.
  Address address = 7;

  // Brief description about the user, up to 200 characters.
  string bio = 12;

  // Short headline for the user's profile.
  string headline = 13;

  // Phone number associated with the account.
  string phone_number = 14;

  // Tags associated with the user account, between 1 and 10.
  repeated Tags tags = 15 [
    (validate.rules).repeated.min_items = 1,
    (validate.rules).repeated.max_items = 10
  ];

  // ID for the authentication service linked to this account.
  uint64 authn_account_id = 18;

  // Indicates if the account is currently active.
  bool is_active = 22;

  // User's first name.
  string firstname = 26;

  // User's last name.
  string lastname = 27;

  // Username associated with the account, minimum of 10 characters.
  string username = 28 [
    (validate.rules).string.min_len = 10,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"testuser9696\""
    },
    (gorm.field).tag = {unique_index: "idx_user_username"}
  ];

  // Indicates if the account is set to private.
  bool is_private = 29;

  // Indicates if the user's email has been verified.
  bool is_email_verified = 30;

  // Timestamp for when the account was created.
  google.protobuf.Timestamp created_at = 31;

  // Timestamp for when the email was verified.
  google.protobuf.Timestamp verified_at = 32;

  // Settings specific to the user account.
  Settings settings = 40;

  // Enum indicating the type of profile (e.g., individual, corporate).
  ProfileType account_type = 42;

  // Profile image associated with the user account.
  string profile_image_url = 43;

  // Auth0 user id
  string auth0_user_id = 44 [
    (gorm.field).tag = {unique_index: "idx_user_auth0_user_id"}
  ];

  // Algolia user id
  string algolia_user_id = 46;
}

// BusinessAccount represents a business account within the context of solomon-ai.
message BusinessAccount {
  option (gorm.opts) = {
    ormable: true,
  };

  // Unique identifier for the business account.
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "" },
    (gorm.field).tag = {unique_index: "idx_business_id"}
  ];

  // Email associated with the business account.
  string email = 2 [
    (validate.rules).string.email = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"example@gmail.com\"" },
    (gorm.field).tag = {unique_index: "idx_business_email"}
  ];

  // Physical address associated with the business account.
  Address address = 7 [
    (gorm.field).has_one.preload = true,
    (validate.rules).message.required = false
  ];

  // Short description of the business account. Maximum of 200 characters.
  string bio = 12 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"sample description\"" } 
  ];

  // Headline for the profile of the business account.
  string headline = 13 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"sample headline\"" } 
  ];

  // Phone number associated with the business account.
  string phone_number = 14 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"6513424124\"" } 
  ];

  // Tags associated with the business account. Between 1 and 10 tags are allowed.
  repeated Tags tags = 15 [
    (gorm.field).has_many.preload = true,
    (validate.rules).repeated.min_items = 1,
    (validate.rules).repeated.max_items = 10
  ];

  // Identifier for the associated authentication service account.
  uint64 authn_account_id = 18 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "" }
  ];

  // Indicates whether the business account is active.
  bool is_active = 22 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "true" }
  ];

  // Username for the business account. Must be at least 10 characters long.
  string username = 28 [
    (validate.rules).string.min_len = 10,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"testuser9696\"" },
    (gorm.field).tag = {unique_index: "idx_business_username"}
  ];

  // Indicates whether the business account is private.
  bool is_private = 29 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "false" }
  ];

  // Indicates whether the email associated with the business account has been verified.
  bool is_email_verified = 30 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "false" }
  ];

  // Timestamp indicating when the business account was created.
  google.protobuf.Timestamp created_at = 31;

  // Timestamp indicating when the email for the business account was verified.
  google.protobuf.Timestamp verified_at = 32;

  // Date when the company associated with the business account was established.
  string company_established_date = 35;

  // Industry type of the company associated with the business account.
  string company_industry_type = 36 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"fintech\"" } 
  ];

  // Website URL of the company associated with the business account.
  string company_website_url = 37 [
    (validate.rules).string.min_len = 0
  ];

  // Description of the company associated with the business account.
  string company_description = 38 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"We help businesses succeed\"" } 
  ];

  // Name of the company associated with the business account.
  string company_name = 39 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { example: "\"Solomon AI\"" } 
  ];

  // Settings specific to the business account.
  Settings settings = 41 [
    (gorm.field).has_one.preload = true
  ];

  // The type of profile associated with the business account (e.g., individual, corporate).
  ProfileType account_type = 42;

  // Profile image associated with the user account.
  string profile_image_url = 43;

  // auth0 user id associated with the business account
  string auth0_user_id = 44 [
    (gorm.field).tag = {unique_index: "auth0_user_id"}
  ];

  // Algolia user id
  string algolia_user_id = 46;
}

/*
 Address: represents an account's address
*/
message Address {
  option (gorm.opts) = {
    ormable : true,
  };
  // address id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    },
    (gorm.field).tag = {unique_index: "idx_address_id"}
  ];
  // the address field
  // Validations:
  // - must be at least 5 character long (meaning cannot be empty)
  string address = 2 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1234 5th Ave\""
    }
  ];
  // the unit if the address is an apartment
  // Validations:
  // - must be at least 1 character long (meaning cannot be empty)
  string unit = 3 
  [(validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"Apt 1\""
    }
  ];
  // the address zipcode
  // Validations: 
  // - must be exactly 5 characters this is to ensure the client inputs the proper zip code
  string zipcode = 4 [
    (validate.rules).string.min_len = 5,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"12345\""
    }  
  ];
  // the city
  // Validations:
  // - must be at least 3 characters long (meaning cannot be empty)
  string city = 5 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"New York\""
    }
  ];
  // the state/municipality
  // Validations
  // - must be at least 2 characters long 
  string state = 6 [
    (validate.rules).string.min_len = 0,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"New York\""
    }
  ];
  // longitude
  // Validations: None - can be empty
  string longitude = 7 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"-73.987654\""
    }
  ];
  // latittude
  // Validations: None - can be empty
  string lattitude = 8 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"40.123456\""
    }
  ];
}

/*
 Tags: represents metadata tags associated to an account
*/
message Tags {
  option (gorm.opts) = {
    ormable : true,
  };
  // tag id
  uint64 id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: ""
    },
    (gorm.field).tag = {unique_index: "idx_tags_id"}
  ];
  // name of tag
  // validations: 
  // - cannot be empty
  // - must be at least 3 characters long
  string tag_name = 2  [(validate.rules).string.min_len = 3,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"testtagname\""
    }
  ];
  // description of tag
  // validations: 
  // - cannot be empty
  // - must be at least 10 characters long
  string tag_description = 3 [(validate.rules).string.min_len = 10,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"testtagdescription\""
    }
  ];
  // metadata associated with tag
  // validations:
  // - must provide between 1 and 10 metadata tags
  repeated string metadata = 4 [(validate.rules).repeated = {min_items: 1, max_items: 10},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "[\"testmetadata1\", \"testmetadata2\"]"
    }
  ];
}


// RoleType defines the different types of roles.
enum RoleType {
  ROLE_TYPE_UNSPECIFIED = 0;
  ROLE_TYPE_SUPER_ADMIN = 1;
  ROLE_TYPE_TEAM_ADMIN = 2;
  ROLE_TYPE_REGULAR = 3;
}


// AuditAction defines the types of actions that can be audited.
enum AuditAction {
  AUDIT_ACTION_UNSPECIFIED = 0;
  AUDIT_ACTION_CREATED = 1;
  AUDIT_ACTION_UPDATED = 2;
  AUDIT_ACTION_DELETED = 3;
}

// Role defines the role of a user in the system with specific permissions.
message Role {
  option (gorm.opts) = {
    ormable: true,
  };

  // Unique identifier for the role.
  int64 id = 1 [
    (gorm.field).tag = {unique_index: "idx_role_id"}
  ];

  // Name of the role.
  string name = 2 [
    // Creating a unique index on name to ensure no duplicate roles are created.
    (gorm.field).tag = {unique_index: "idx_role_name"}
  ];

  // Type of the role.
  RoleType type = 3;

  // Permissions related to user management.
  bool can_create_users = 4;
  bool can_read_users = 5;
  bool can_update_users = 6;
  bool can_delete_users = 7;

  // Permissions related to project management.
  bool can_create_projects = 8;
  bool can_read_projects = 9;
  bool can_update_projects = 10;
  bool can_delete_projects = 11;

  // Permissions related to report management.
  bool can_create_reports = 12;
  bool can_read_reports = 13;
  bool can_update_reports = 14;
  bool can_delete_reports = 15;

  // Add more permissions as necessary for other modules or features.
    // Timestamps for tracking creation and modification times.
  google.protobuf.Timestamp created_at = 16;
  google.protobuf.Timestamp updated_at = 17;

  // Audit log for this role.
  repeated RoleAuditEvents audit_log = 18 [
    (gorm.field).has_many.preload = true,
    (validate.rules).repeated.min_items = 0
  ];

  // Team associated with the role.
  Team team = 19 [
    (gorm.field).has_one.preload = true
  ];

  // User associated with the role.
  UserAccount user = 20 [
    (gorm.field).has_one.preload = true
  ];

  // Business account associated with the role.
  BusinessAccount business = 21 [
    (gorm.field).has_one.preload = true
  ];
}


// RoleAuditEvents defines the audit record for any changes made to a role.
message RoleAuditEvents {
  option (gorm.opts) = {
    ormable: true,
  };

  int64 id = 1 [
    (gorm.field).tag = {unique_index: "idx_role_audit_events_id"}
  ];
  AuditAction action = 3 [
    (gorm.field).tag = {index: "idx_role_audit_events_action"}
  ]; // The type of action (created, updated, deleted)
  string performed_by = 4 [
    (gorm.field).tag = {index: "idx_role_audit_events_performed_by"}
  ]; // Identifier of the user who performed the action
  google.protobuf.Timestamp timestamp = 5 [
    (gorm.field).tag = {index: "idx_role_audit_events_timestamp"}
  ]; // Time of the event

  // Additional fields for enhanced auditing:
  repeated string affected_fields = 6;   // Specific fields that were changed (if applicable)
  repeated string previous_values = 7;   // Values of those fields before the change
  string client_ip = 8;                  // IP address of the client that initiated the change
  string user_agent = 9;                 // User agent string of the client
  string context = 10;                   // Additional context about the change (e.g., reason for change)
}