name: Deploy build artifacts for api-gateway

on:
  push:
    branches:
      - "staging"

defaults:
  run:
    working-directory: ./backend-api-gateway

permissions:
  contents: write # needed to write releases
  id-token: write # needed for keyless signing
  packages: write # needed for ghcr access

jobs:
  publish-artifacts:
    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            release_suffix: ubuntu
        platform: [linux/amd64, linux/arm64]
    defaults:
      run:
        working-directory: ./backend-api-gateway
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: sigstore/cosign-installer@main
      - uses: fluxcd/flux2/action@main
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.20.x
      - name: Setup Helm
        uses: ./.github/actions/helm
        with:
          version: 3.8.1
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Prepare
        id: prep
        run: |
          HELM_VERSION=$(grep 'version:' ./charts/api-gateway/Chart.yaml | tail -n1 | awk '{ print $2}')
          VERSION=sha-${GITHUB_SHA::8}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF/refs\/tags\//}
          fi
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "REVISION=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "HELM_VERSION=${HELM_VERSION}" >> $GITHUB_OUTPUT
      - name: Validate Service Helm Chart
        run: |
          helm lint ./charts/api-gateway
          helm template api-gateway ./charts/api-gateway --values ./charts/api-gateway/values.staging.yaml
      - name: Generate images meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            docker.io/solomonai/api-gateway
          tags: |
            type=raw,value=staging
      - name: Publish Multi-Arch Image Backend Api Gateway Service
        uses: docker/build-push-action@v5
        with:
          sbom: true
          provenance: true
          push: ${{ github.event_name != 'pull_request' }}
          builder: ${{ steps.buildx.outputs.name }}
          context: ./backend-api-gateway
          file: ./backend-api-gateway/Dockerfile.staging
          platforms: ${{matrix.operating-system}}
          build-args: |
            REVISION=${{ steps.prep.outputs.REVISION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Debug failure
        if: failure()
        run: |
          kubectl logs -l app=api-gateway || true

  deploy:
    needs: [publish-artifacts]
    runs-on: ubuntu-latest
    env:
      working-directory: ./backend-api-gateway
      cluster: ${{ secrets.STAGING_CLUSTER_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}
      - name: Deploy To Staging Environment
        working-directory: ${{env.working-directory}}
        run: |
          doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{env.cluster}}
          helm upgrade --install api-gateway ./charts/api-gateway --values ./charts/api-gateway/values.staging.yaml -n platform
